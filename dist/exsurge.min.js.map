{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///exsurge.min.js","webpack:///webpack/bootstrap c31c4a9b3cce0a034823","webpack:///./src/index.js","webpack:///./src/Exsurge.Core.js","webpack:///./src/Exsurge.Text.js","webpack:///./src/Exsurge.Glyphs.js","webpack:///./src/Exsurge.Drawing.js","webpack:///./src/addAccent.js","webpack:///./src/makeLigature.js","webpack:///./src/greextraGlyphs.js","webpack:///./src/Exsurge.Chant.js","webpack:///./src/Exsurge.Chant.ChantLine.js","webpack:///./src/Exsurge.Chant.Markings.js","webpack:///./src/Exsurge.Chant.Signs.js","webpack:///./src/Exsurge.Gabc.js","webpack:///./src/Exsurge.Chant.Neumes.js","webpack:///./src/Exsurge.Titles.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_ExsurgeCore","keys","forEach","key","enumerable","get","_ExsurgeText","_ExsurgeGlyphs","_ExsurgeDrawing","_ExsurgeChant","_ExsurgeChantChantLine","_ExsurgeChantMarkings","_ExsurgeChantSigns","_ExsurgeChantNeumes","_ExsurgeGabc","_ExsurgeTitles","_greextraGlyphs","_classCallCheck","instance","Constructor","TypeError","DeviceIndependent","n","Centimeters","Units","ToDeviceIndependent","Millimeters","Inches","ToCentimeters","FromDeviceIndependent","ToMillimeters","ToInches","generateRandomGuid","s4","Math","floor","random","toString","substring","getCssForProperties","properties","entries","map","_ref","_ref2","_slicedToArray","val","join","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","_createClass","defineProperties","target","props","descriptor","configurable","writable","protoProps","staticProps","prototype","DeviceIndepenedent","DIU_PER_INCH","DIU_PER_CENTIMETER","inputUnits","outputUnits","StringToUnitsType","s","ToLower","UnitsTypeToString","units","Point","x","y","point","Step","Rect","width","height","Infinity","rect","other","right","max","bottom","min","Margins","left","top","margins","Size","size","Do","Du","Re","Me","Mi","Fa","Fu","So","La","Te","Ti","__StepToStaffPosition","__StaffOffsetToStep","Pitch","step","octave","toInt","pitch","offset","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","Language","name","centerNeume","text","parsedWords","words","split","end","syllabifyWord","English","_Language","_this","getPrototypeOf","regexLetter","startIndex","match","exec","slice","found","index","Latin","_Language2","_this2","diphthongs","possibleDiphthongs","concat","regexVowel","wordExceptions","vowels","vowelsThatMightBeConsonants","muteConsonantsAndF","liquidConsonants","isVowelThatMightBeConsonant","isVowel","word","lookahead","haveLookahead","syllables","haveCompleteSyllable","previousWasVowel","workingString","toLowerCase","startSyllable","makeSyllable","substr","wordLength","cIsVowel","isDiphthong","isMuteConsonantOrF","isLiquidConsonant","ignore","_this3","lastIndex","stringSlice","isIgnoredMatch","endIndex","inIgnore","find","Spanish","_Language3","_this4","weakVowels","strongVowels","uDiphthongExceptions","previousIsVowel","previousIsStrongVowel","cIsStrongVowel","isStrongVowel","createSyllable","consonant2","numberOfConsonants","j","d","indexOf","tripthong","endj","findVowelSegment","language","english","latin","spanish","Glyphs","None","paths","type","data","bounds","origin","align","AcuteAccent","GraveAccent","Circle","Semicircle","ReversedSemicircle","Stropha","BeginningAscLiquescent","BeginningDesLiquescent","CustosDescLong","CustosDescShort","CustosLong","CustosShort","DoClef","FaClef","Flat","Mora","Natural","Sharp","OriscusAsc","OriscusDes","OriscusLiquescent","PodatusLower","PodatusUpper","Porrectus1","Porrectus2","Porrectus3","Porrectus4","PunctumCavum","PunctumQuadratum","PunctumQuadratumLiquescent","PunctumQuadratumAscLiquescent","PunctumQuadratumDesLiquescent","PunctumInclinatum","PunctumInclinatumLiquescent","Quilisma","TerminatingAscLiquescent","TerminatingDesLiquescent","VerticalEpisemaAbove","VerticalEpisemaBelow","VirgaLong","VirgaShort","Virgula","_toConsumableArray","arr2","from","getFontFilenameForProperties","arguments","url","italic","bold","replace","ChantNotationElement","Annotations","Annotation","TextLeftRight","Subtitle","Title","Supertitle","TitleTextElement","DropCap","TranslationText","AboveLinesText","ChoralSign","Lyric","LyricArray","LyricType","TextElement","TextSpan","CurlyBraceVisualizer","RoundBraceVisualizer","GlyphVisualizer","LineaVisualizer","VirgaLineVisualizer","NeumeLineVisualizer","DividerLineVisualizer","ChantLayoutElement","ChantContext","TextMeasuringStrategy","QuickSvg","GlyphCode","DefaultTrailingSpace","TextTypesByClass","TextTypes","MarkingPositionHint","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getter","_addAccent","_makeLigature","canAccessDOM","document","__getNeumeFromSvgElem","score","elem","note","notes","parentElement","querySelector","getAttribute","neume","Default","Above","Below","supertitle","display","defaultSize","containedInScore","titles","hasSupertitle","getFromScore","title","hasTitle","subtitle","hasSubtitle","leftRight","cssClass","hasTextLeft","hasTextRight","extraClass","getFromSvgElem","classList","contains","annotation","_ref$elementIndex","elementIndex","annotations","querySelectorAll","dropCap","al","hasAboveLinesText","notations","notation","notationIndex","alText","alIndex","choralSign","ctxt","staffInterval","lyric","hasLyrics","lyrics","lyricIndex","translation","hasTranslations","translationText","translationIndex","_ref3","entry","intraNeumeSpacing","interSyllabicMultiplier","isDefault","StrophaLiquescent","UpperBrace","ns","xmlns","xlink","hasDOMAccess","svg","node","createElementNS","setAttribute","setAttributeNS","defs","appendChild","clearNotations","removeChild","hasChildNodes","lastChild","line","x1","y1","x2","y2","g","tspan","str","textContent","use","nodeRef","svgFragmentForGlyph","glyph","svgSrc","path","createFragment","fill","nodesForGlyph","functionName","nodes","createNode","attributes","children","source","attr","hasOwnProperty","createSvgTree","_len","_key","className","class","convertKeysToCamelCase","obj","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","test","camelCase","whole","letter","toUpperCase","return","style","sourceGabc","child","fragment","parseFragment","well","createElement","container","innerHTML","il","firstChild","childNodes","translate","scale","sx","sy","Svg","Canvas","OpenTypeJS","textMeasuringStrategy","fontDictionary","staffLineCount","makeDefs","defsNode","textStyles","textColor","setFont","rubricColor","specialCharProperties","font-family","textBeforeSpecialChar","textAfterSpecialChar","specialCharMap","℣","℟","+","*","plusProperties","asteriskProperties","specialCharText","char","fontStyleDictionary","b","font-weight","font-style","u","text-decoration","ul","sc","font-variant","v","e","font-size","markupSymbolDictionary","_","^","%","prefix","padding","minLedgerSeparation","minSpaceAboveStaff","minSpaceBelowStaff","spaceBetweenSystems","glyphPunctumWidth","glyphPunctumHeight","maxExtraSpaceInStaffIntervals","activeClef","neumeLineColor","staffLineColor","dividerLineColor","defaultLanguage","pixelRatio","window","devicePixelRatio","svgTextMeasurer","body","insertBefore","makeCanvasIfNeeded","syllableConnector","scaleDefs","setGlyphScaling","accidentalSpaceMultiplier","interVerbalMultiplier","drawGuides","drawDebuggingBounds","activeNotations","currNotationIndex","minSyllablesLastLine","minNotesLastLine","condensingTolerance","autoColor","useExtraTextOnly","noteIdPrefix","insertFontsInDoc","setMergeAnnotationWithTextLeft","staffPosition","staffPositionSymmetric","fontFamily","keyWithFontFamily","Regular","font","baseStyle","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_step2$value","textType","textStyle","color","baseTextStyle","merge","mergeAnnotationWithTextLeft","__mergeAnnotationWithTextLeft","glyphScaling","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_step3$value","_textStyles$key","createStyleCss","hyphen","SingleSyllable","multiplier","minLyricWordSpacing","hyphenWidth","staffHeight","staffLineWeight","ceil","neumeLineWeight","dividerLineWeight","episemaLineWeight","updateHyphenWidth","styleElement","getElementById","head","isNeume","hasNoWidth","canvas","canvasCtxt","getContext","setTransform","selected","highlighted","_ChantLayoutElement","staffPosition0","staffPosition1","divider","y0","calculateHeightFromStaffPosition","temp","fillStyle","fillRect","sourceIndex","getSvgProps","_ChantLayoutElement2","note0","note1","hanging","abs","_ChantLayoutElement3","_ChantLayoutElement4","_this5","_this6","_this7","apply","_this8","_ChantLayoutElement5","glyphCode","_this9","setGlyph","getDefProps","options","transform","makeDef","makeSvgTree","Path2D","noteIndex","nextNote","isSelected","model","result","xlink:href","glyphVisualizer","getSvgAttributes","_ChantLayoutElement6","isAbove","_this10","braceHeight","generatePathString","stroke","stroke-width","getSvgPathProps","accent","createSvgNode","createSvgFragment","dx","dy","cx1","cy","cx2","dp","toFixed","_ChantLayoutElement7","addAcuteAccent","_this11","union","h","q","qy1","qx2","qy2","tx1","ty1","qy3","qx4","qy4","propertyArray","activeTags","extraProps","xOffset","newLine","assign","MarkupStackFrame","tagName","symbol","extraProperties","__subsForTspans","&","<",">","_ChantLayoutElement8","fontSize","textAnchor","_this12","dominantBaseline","generateSpansFromText","recalculateMetrics","_this13","spans","markupStack","spanStartIndex","newLineInNextSpan","filterFrames","frame","closeSpan","spanText","span","markupRegex","vTagRegex","openedAsterisk","closeCurrentSpan","_match","_match2","vTag","asterisk","plus","tilde","vowelLigature","specialChar","specialChar2","specialChar3","markupSymbol","closingTag","family","enclosedText","vMatch","iOffset","_vMatch","_vMatch2","grecross","greextra","greextraGlyphs","pop","vowel","makeLigature","addAccent","filter","findIndex","splice","createStackFrame","parseFloat","resize","measureSubstring","returnBBox","lines","widths","newLineSpans","subStringLength","numLines","bbox","myText","parseInt","rightAligned","firstLineMaxWidth","getCanvasFontForProperties","metrics","measureText","actualBoundingBoxLeft","actualBoundingBoxAscent","actualBoundingBoxDescent","getFontForProperties","features","liga","smcp","spanFontSize","subBbox","getPath","getBoundingBox","subWidth","getAdvanceWidth","resetNewLines","maxWidth","createStyleNode","getBBox","measureSubstringBBox","reduce","percentage","lastWidth","lastMatch","regex","_spans","spanIndex","splitSpan","textLeft","textRight","newSpans","needsLayout","textAlign","translateWidth","translateHeight","count","getExtraStyleProperties","fillText","textLength","source-index","getCssClasses","trim","text-anchor","useStyleObject","lengthAdjust","getSpanOptions","extraStyleProperties","svgNode","escapeForTspan","setFontFamilyAttributes","string","String","BeginningSyllable","MiddleSyllable","EndingSyllable","Directive","getLeft","lyricArray","NaN","Number","MAX_VALUE","getRight","presumeConnectorNeeded","MIN_VALUE","l","allowsConnector","needsConnector","getConnectorWidth","hasOnlyOneLyric","originalText","indexOfLyric","mergeIn","newLyrics","mergeInArray","setNotation","_TextElement","lyricType","_this14","centerStartIndex","centerLength","connectorSpan","force","forceConnector","needs","setConnectorWidth","widthWithoutConnector","connectorWidth","defaultConnectorWidth","setNeedsConnector","activeLanguage","vowelSegmentWidth","getSubStringLength","lastIndexOf","indexOffset","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","includes","dropCapSpan","clone","dropCapLowerCase","dropCapSourceGabcLength","classes","_TextElement2","_this15","positionHint","_TextElement3","_this16","_TextElement4","gabcSource","anchor","_this17","_TextElement5","_this18","_TextElement6","_TitleTextElement","_this20","_TitleTextElement2","_this21","_TitleTextElement3","_this22","_TitleTextElement4","_this23","headerKey","_TextElement7","_this24","__connectorSpan","_ChantLayoutElement9","_this25","lineHeight","_len2","texts","_key2","updateBounds","draw","_ChantLayoutElement10","_this26","leadingSpace","trailingSpace","keepWithNext","visualizers","chantLayoutElement","ignoreBounds","isEmpty","unshift","calculatedTrailingSpace","_this27","calculateLyricX","inner","getInnerSvgNodes","svgProps","_len3","annotationSpans","_key3","Æ","Œ","A","E","I","O","U","Y","æ","œ","a","o","AE","Ae","ae","OE","Oe","oe","MedicaeaFlat","HufnagelCustosUpShort","HufnagelCustosUpLong","HufnagelCustosUpMedium","HufnagelCustosDownShort","HufnagelCustosDownLong","HufnagelCustosDownMedium","MedicaeaCustosUpShort","MedicaeaCustosUpLong","MedicaeaCustosUpMedium","MedicaeaCustosDownShort","MedicaeaCustosDownLong","MedicaeaCustosDownMedium","MensuralCustosUpShort","MensuralCustosUpLong","MensuralCustosUpMedium","MensuralCustosDownShort","MensuralCustosDownLong","MensuralCustosDownMedium","MensuralFlat","HufnagelFlat","MedicaeaCClef","MedicaeaCClefChange","MedicaeaFClef","MedicaeaFClefChange","HufnagelCClef","HufnagelCClefChange","HufnagelFClef","HufnagelFClefChange","HugnagelCFClef","HufnagelCFClefChange","MensuralFlatHole","HufnagelFlatHole","MedicaeaFlatHole","StarSix","Dagger","Bar.alt","StarHeight","Cross","RBar.alt","VBar.alt","Drawing1","Drawing2","RWithBarGoth","VWithBarGoth","Line1","Line2","Line3","Line4","Line5","Cross.alt","ABarCaption","RBarCaption","VBarCaption","ABarCaptionSC","RBarCaptionSC","VBarCaptionSC","ABar","RBar","VBar","ABarSC","RBarSC","VBarSC","ABarSmall","RBarSmall","VBarSmall","ABarSmallSC","RBarSmallSC","VBarSmallSC","RBar.alt2","VBar.alt2","ABarCaptionSlant","RBarCaptionSlant","VBarCaptionSlant","ABarSlant","RBarSlant","VBarSlant","ABarSmallSlant","RBarSmallSlant","VBarSmallSlant","ChantDocument","ChantScore","ChantMapping","ChantLineBreak","TextOnly","Clef","Note","NoteShapeModifiers","NoteShape","LiquescentType","Large","Small","Ascending","Descending","InitioDebilis","LargeAscending","LargeDescending","SmallAscending","SmallDescending","Virga","Inclinatum","Oriscus","Cavum","Stemmed","Linea","Reverse","liquescent","shape","shapeModifiers","episemata","morae","setStaffPosition","shapeModifier","_ChantNotationElement","defaultAccidental","isClef","activeAccidental","performLayout","accidentalGlyph","createGlyphVisualizer","addVisualizer","__defaultDoClef","_Clef","stepToStaffOffset","octaveOffset","staffOffsetToStep","accidentalType","finishLayout","_Clef2","_ChantNotationElement2","sourceLength","_ChantNotationElement3","justify","lb","mappings","useDropCap","Titles","startingClef","compiled","autoColoring","updateNotations","startLine","endLine","lastLine","selection","elementSelection","element","indices","selectedIndices","insertion","afterElementIndex","insertionCursor","insertionElement","insertionLine","chantLine","InsertionCursor","mapping","nonNoteElementCount","default","elements","recreateDropCap","generateDropCap","initializeLayout","finishedCallback","setTimeout","onFontLoaded","performLayoutAsync","layoutElementsAsync","timeout","Date","getTime","overrideTextLeft","mapAnnotationSpansToTextLeft","layoutTitles","currIndex","ChantLine","buildFromChantNotationIndex","notationsStartIndex","numNotationsOnLine","pages","updateSelection","pageHeightOffset","startLineIndex","pageHeight","copyLines","setCanvasSize","clearRect","zoom","xmlns:xlink","version","editable","viewBox","cloneNode","createStyleTree","def","createStyle","lineFragment","fragmentDefs","createDropCap","Gabc","parseChantNotations","unsanitizedText","defaults","layout","default-font","page","margin-left","margin-top","margin-right","margin-bottom","scores","copyLayout","to","unserializeFromJson","serializeToJson","notationBounds","staffLeft","staffRight","custos","ledgerLines","braces","nextLine","previousLine","lyricLineHeight","lyricLineBaseline","numLyricLines","spaceAfterNotations","spaceBetweenTextTracks","lastLyrics","staffSpaces","lastNeumeIndex","extraTextOnlyIndex","altLineHeight","altLineBaseline","numAltLines","translationLineHeight","translationLineBaseline","numTranslationLines","aboveLinesLineHeight","notationBoundsOffset","extraTextOnlyHeight","extraTextOnlyLyricIndex","lastNotation","extraLines","lineWidth","lowestPossibleAnnotationY","lyricAndTextRect","altLineTextRect","totalHeight","strokeStyle","beginPath","moveTo","lineTo","layoutInsertionCursor","ledgerLine","functionNames","quickSvg","getInnerNodes","element-index","len","qx1","qx3","newElementStart","beginningLyrics","prev","prevNeume","prevLyrics","condensableSpaces","paddingLeft","DoubleBar","newLyric","elidesToNext","MAX_SAFE_INTEGER","minX","curr","rightNotationBoundary","lastTranslationTextWithEndNeume","lastNotationIndex","lastStartBrace","lastLyricsBeforeTextOnly","textOnlyStartIndex","actualRightBoundary","Custos","isDivider","forceBreak","fitsOnLine","positionNotationElement","candidateForExtraTextOnlyLine","currentLyric","nextNotation","firstOnLine","startExtraTextOnlyFromFirst","lastNotationWithLyrics","reverse","lastLyricRight","setMaxWidth","isTextOnlyBeforeDivider","firstDivider","every","notationsAfterBreak","countSyllables","countNotes","flatMap","cne","firstWithNoWidth","allowLineBreakBeforeNext","maxNumNotationsOnLine","findNeumesToJustify","extraSpace","getWhitespaceOnRight","toJustify","sum","condensable","endNeume","last","isLastLine","whitespace","rightEdge","minHyphenWidth","justifyElements","centerDividers","oldBoundsX","barWidth","leftPoint","rightPoint","FullBar","nextOrCurr","isAccidental","lastRightNeume","lastRightLyric","doJustify","extraSpaceBeforeCustos","increment","toJustifyIndex","nextToJustify","incrementOffsetAtNextChance","startBrace","k","startNote","BraceShape","RoundBrace","getAttachmentX","braceEnd","AccentedCurlyBrace","processElementForLedgerLine","endElem","offsetX","ledgerLinePositionAbove","half","minY","maxY","positionNonLyricText","rightX","beyondStaffRight","ll","episema","spaceBetweenEpisemata","terminating","alignment","HorizontalEpisemaAlignment","Left","Center","Right","newY","newWidth","handleEndBrace","braceStart","nextNotationButOne","nextNoteButOne","BracePoint","BraceAttachment","space","fixedX","total","maxRight","currLyric","minLeft","firstOfSyllable","hasShifted","atLeastOneWithoutConnector","prevLyricRight","condensableSpacesSincePrevLyric","condensableSpaceSincePrevLyric","notationI","currLyricLeft","shift","spaceBetweenSyls","pLyrics","lastCondensable","useMidpoint","minIndex","maxIndex","curIndex","notationX","closenessToLeft","closenessToRight","Ictus","HorizontalEpisema","Accent","_GlyphVisualizer","minDistanceAway","punctumInclinatumShorten","prevNote","convertStaffPositionToSymmetric","_GlyphVisualizer2","horizontalOffset","collisionWithEpisema","verticalOffset","shortOffset","extraOffset","collisionWithStaffLine","_GlyphVisualizer3","CurlyBrace","attachment","Accidental","AccidentalType","DominicanBar","HalfBar","QuarterBar","Divider","auto","findNextNeume","pitchToStaffPosition","getGlyphCode","resetsAccidentals","_Divider","_Divider2","_Divider3","_Divider4","_Divider5","parity","_Divider6","line0","line1","adjustStep","_Divider7","_interopRequireWildcard","__esModule","newObj","GabcHeader","Markings","Signs","Neumes","__syllablesRegex","__altTranslationRegex","__notationsRegex","__notationsRegex_group_insideBraces","__bracketedCommandRegex","__braceSpecRegex","TrailingSpaceForAccidental","TrailingSpaceMultiple","regexHeaderEnd","regexHeaderLine","regexHeaderComment","comments","cValues","original","txtHeader","arrayName","gabc","alternateKey","array","console","warn","elementCountForNotations","items","item","headerLength","getLength","splitWords","createMappingsFromWords","clef","before","after","oldIndexMap","startOld","startNew","subLength","inew","overlap","_overlap","iold","diffDescriptorsAndNewWords","newGabcSource","insertionIndex","oldInsertionIndex","newWords","results","lastTranslationNeumes","resultCode","resultValues","sourceIndexDiff","elementCount","createMappingFromWord","curNotation","prevIsAccidental","resetDependencies","resetAccidentals","staffPositionToPitch","automatic","needToEndBrace","transText","lastTranslationText","matches","currSyllable","lyricText","pre","main","post","notationData","parseNotations","firstOfParentheses","notationWithLyrics","proposedLyricType","createSyllableLyrics","lyricTexts","_loop","lyricTextWithoutVTags","vtagRegex","vtags","indexClosingBracket","getTrueIndex","indexWithoutVTags","accum","makeLyric","textIndex","centerEndIndex","elides","setForceConnector","baseSourceIndex","addToLastSourceGabc","addNotation","neumes","createNeumesFromNotes","prevNotation","RegExp","atom","gabcHeightToExsurgeHeight","noteArray","createNoteFromData","accidental","gabcHeightToExsurgePitch","bracketedNotations","finalTrailingSpace","firstNoteIndex","currNoteIndex","createNeume","includeCurrNote","lastNoteIndex","includePrevNote","addNote","unknownState","Punctum","handle","currNote","virgaState","apostrophaState","oriscusState","punctaInclinataState","punctumState","notesRemaining","state","ictus","podatusState","climacusState","clivisState","distrophaState","PunctaInclinata","PesQuassus","Clivis","Podatus","salicusState","scandicusState","pesSubpunctisState","torculusState","porrectusState","Ancus","Climacus","Porrectus","PorrectusFlexus","PesSubpunctis","Salicus","salicusFlexusState","SalicusFlexus","Scandicus","scandicusFlexusState","ScandicusFlexus","bivirgaState","Bivirga","Trivirga","Apostropha","Distropha","tristrophaState","Tristropha","Torculus","prevNoteButOne","torculusResupinusState","TorculusResupinus","TorculusResupinusFlexus","mark","episemaNoteIndex","episemaNote","previousNote","previousMora","episemaHadModifier","newNote","shapeModifers","processInstructionForNote","instruction","sourceIndexOffset","cmd","above","attachmentPoint","gabcNotations","parseWords","gabcWords","parseWord","gabcWord","gabcHeight","charCodeAt","exsurgeHeight","Neume","NeumeBuilder","startingX","lastNote","lineIsHanging","previousNotation","withLineTo","noteAlignsRight","needsLine","linea","noteAt","lowerNote","upperNote","upperGlyph","lowerGlyph","upper","lower","lineFrom","withClivisUpper","withClivisLower","prevStaffPosition","advanceWidth","multiple","start","requiresLedgerLine","positionMarkings","firstAbove","needsAbove","firstBelow","needsBelow","endI","position","positionEpisemata","bottomNote","topNote","positionEpisemataBelow","positionEpisemataAbove","positionPodatusEpisemata","positionPodatusMorae","firstNote","secondNote","thirdNote","hasTopEpisema","positionClivisMarkings","positionClivisMorae","positionClivisEpisemata","positionPodatusMarkings","first","second","third","fourth","_Neume","build","getNoteGlyphCode","_Neume2","virgaAt","advanceBy","_Neume3","_Neume4","positionInclinataMorae","withInclinata","_Neume5","withClivis","_Neume6","middle","builder","middleGlyph","_Neume7","glyphCodes","glyphAdvance","_Neume8","nextNoteStaffPosition","_Neume9","lowerStaffPos","upperStaffPos","withLineEndingAt","_Neume10","withPodatus","_Neume11","_Neume12","positionPorrectusMarkings","thirdGlyph","withPorrectusSwash","_Neume13","positionPorrectusFlexusMarkings","fourthGlyph","_Neume14","_Neume15","_Neume16","_Neume17","positionTorculusMarkings","_Neume18","_Neume19","_Neume20","glyph1","glyph3","note2","note3","_Neume21","firstGlyph","_Neume22","fifthGlyph","fifth","_Neume23","_Neume24","setSupertitle","setTitle","setSubtitle","setTextLeft","setTextRight","elementName","setBoundsX","finalY","el","_arr2","_i2","_arr3","_i3"],"mappings":"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","file":"exsurge.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"exsurge\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"exsurge\"] = factory();\n\telse\n\t\troot[\"exsurge\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t'use strict';\n\t\n\t// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n\t// import { Gabc } from './Exsurge.Gabc.js'\n\t//\n\t// // client side support\n\t//\n\t// if (typeof document !== 'undefined' && document.registerElement) {\n\t//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n\t//\n\t//   ChantVisualElementPrototype.createdCallback = function() {\n\t//     var ctxt = new ChantContext();\n\t//\n\t//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n\t//\n\t//     var useDropCap = true;\n\t//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n\t//     if (useDropCapAttr === 'false')\n\t//       useDropCap = false;\n\t//\n\t//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n\t//\n\t//     var annotationAttr = this.getAttribute(\"annotation\");\n\t//     if (annotationAttr) {\n\t//       // add an annotation\n\t//       score.annotation = new Annotation(ctxt, annotationAttr);\n\t//     }\n\t//\n\t//     var _element = this;\n\t//\n\t//     var width = 0;\n\t//     var doLayout = function() {\n\t//       var newWidth = _element.parentElement.clientWidth;\n\t//       if(width === newWidth) return;\n\t//       width = newWidth;\n\t//       // perform layout on the chant\n\t//       score.performLayout(ctxt, function() {\n\t//         score.layoutChantLines(ctxt, width, function() {\n\t//           // render the score to svg code\n\t//           _element.appendElement(score.createSvgNode(ctxt));\n\t//         });\n\t//       });\n\t//     }\n\t//     doLayout();\n\t//     if (window.addEventListener)\n\t//       window.addEventListener('resize',doLayout,false);\n\t//     else if (window.attachEvent)\n\t//       window.attachEvent('onresize',doLayout);\n\t//   }\n\t//\n\t//   ChantVisualElementPrototype.attachedCallback = function() {\n\t//\n\t//   }\n\t//\n\t//   // register the custom element\n\t//   // if(window.customElements && window.customElements.define) {\n\t//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n\t//   // } else {\n\t//     document.registerElement('chant-visual', {\n\t//       prototype: ChantVisualElementPrototype\n\t//     });\n\t//   // }\n\t// }\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tObject.keys(_ExsurgeCore).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeCore[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tObject.keys(_ExsurgeText).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeText[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tObject.keys(_ExsurgeGlyphs).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGlyphs[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tObject.keys(_ExsurgeDrawing).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeDrawing[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tObject.keys(_ExsurgeChant).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChant[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(9);\n\t\n\tObject.keys(_ExsurgeChantChantLine).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantChantLine[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(10);\n\t\n\tObject.keys(_ExsurgeChantMarkings).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantMarkings[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tObject.keys(_ExsurgeChantSigns).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantSigns[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(13);\n\t\n\tObject.keys(_ExsurgeChantNeumes).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeChantNeumes[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeGabc = __webpack_require__(12);\n\t\n\tObject.keys(_ExsurgeGabc).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeGabc[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _ExsurgeTitles = __webpack_require__(14);\n\t\n\tObject.keys(_ExsurgeTitles).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _ExsurgeTitles[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _greextraGlyphs = __webpack_require__(7);\n\t\n\tObject.keys(_greextraGlyphs).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _greextraGlyphs[key];\n\t    }\n\t  });\n\t});\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\texports.DeviceIndependent = DeviceIndependent;\n\texports.Centimeters = Centimeters;\n\texports.Millimeters = Millimeters;\n\texports.Inches = Inches;\n\texports.ToCentimeters = ToCentimeters;\n\texports.ToMillimeters = ToMillimeters;\n\texports.ToInches = ToInches;\n\texports.generateRandomGuid = generateRandomGuid;\n\texports.getCssForProperties = getCssForProperties;\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Units = exports.Units = {\n\t  // enums\n\t  DeviceIndepenedent: 0, // device independent units: 96/inch\n\t  Centimeters: 1,\n\t  Millimeters: 2,\n\t  Inches: 3,\n\t\n\t  // constants for device independent units (diu)\n\t  DIU_PER_INCH: 96,\n\t  DIU_PER_CENTIMETER: 96 / 2.54,\n\t\n\t  ToDeviceIndependent: function ToDeviceIndependent(n, inputUnits) {\n\t    switch (inputUnits) {\n\t      case Centimeters:\n\t        return n * Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n * Units.DIU_PER_CENTIMETER / 10;\n\t      case Inches:\n\t        return n * Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  FromDeviceIndependent: function FromDeviceIndependent(n, outputUnits) {\n\t    switch (outputUnits) {\n\t      case Centimeters:\n\t        return n / Units.DIU_PER_CENTIMETER;\n\t      case Millimeters:\n\t        return n / Units.DIU_PER_CENTIMETER * 10;\n\t      case Inches:\n\t        return n / Units.DIU_PER_INCH;\n\t      default:\n\t        return n;\n\t    }\n\t  },\n\t\n\t  StringToUnitsType: function StringToUnitsType(s) {\n\t    switch (s.ToLower()) {\n\t      case \"in\":\n\t      case \"inches\":\n\t        return Units.Inches;\n\t\n\t      case \"cm\":\n\t      case \"centimeters\":\n\t        return Units.Centimeters;\n\t\n\t      case \"mm\":\n\t      case \"millimeters\":\n\t        return Units.Millimeters;\n\t\n\t      case \"di\":\n\t      case \"device-independent\":\n\t        return Units.DeviceIndepenedent;\n\t\n\t      default:\n\t        return Units.DeviceIndepenedent;\n\t    }\n\t  },\n\t\n\t  UnitsTypeToString: function UnitsTypeToString(units) {\n\t    switch (units) {\n\t      case Units.Inches:\n\t        return \"in\";\n\t      case Units.Centimeters:\n\t        return \"cm\";\n\t      case Units.Millimeters:\n\t        return \"mm\";\n\t      case Units.DeviceIndepenedent:\n\t        return \"device-independent\";\n\t      default:\n\t        return \"device-independent\";\n\t    }\n\t  }\n\t};\n\t\n\tfunction DeviceIndependent(n) {\n\t  return n;\n\t}\n\t\n\tfunction Centimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction Millimeters(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction Inches(n) {\n\t  return Units.ToDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\tfunction ToCentimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Centimeters);\n\t}\n\t\n\tfunction ToMillimeters(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Millimeters);\n\t}\n\t\n\tfunction ToInches(n) {\n\t  return Units.FromDeviceIndependent(n, Units.Inches);\n\t}\n\t\n\t/*\n\t * Point\n\t */\n\t\n\tvar Point = exports.Point = function () {\n\t  function Point(x, y) {\n\t    _classCallCheck(this, Point);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : 0;\n\t    this.y = typeof y !== 'undefined' ? y : 0;\n\t  }\n\t\n\t  _createClass(Point, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Point(this.x, this.y);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(point) {\n\t      return this.x === point.x && this.y === point.y;\n\t    }\n\t  }]);\n\t\n\t  return Point;\n\t}();\n\t\n\t/*\n\t * Rect\n\t */\n\t\n\t\n\tvar Rect = exports.Rect = function () {\n\t  function Rect(x, y, width, height) {\n\t    _classCallCheck(this, Rect);\n\t\n\t    this.x = typeof x !== 'undefined' ? x : Infinity;\n\t    this.y = typeof y !== 'undefined' ? y : Infinity;\n\t    this.width = typeof width !== 'undefined' ? width : -Infinity;\n\t    this.height = typeof height !== 'undefined' ? height : -Infinity;\n\t  }\n\t\n\t  _createClass(Rect, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Rect(this.x, this.y, this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"isEmpty\",\n\t    value: function isEmpty() {\n\t      return this.x === Infinity && this.y === Infinity && this.width === -Infinity && this.height === -Infinity;\n\t    }\n\t\n\t    // convenience method\n\t\n\t  }, {\n\t    key: \"right\",\n\t    value: function right() {\n\t      return this.x + this.width;\n\t    }\n\t  }, {\n\t    key: \"bottom\",\n\t    value: function bottom() {\n\t      return this.y + this.height;\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(rect) {\n\t      return this.x === rect.x && this.y === rect.y && this.width === rect.width && this.height === rect.height;\n\t    }\n\t\n\t    // other can be a Point or a Rect\n\t\n\t  }, {\n\t    key: \"contains\",\n\t    value: function contains(other) {\n\t      if (other instanceof Point) {\n\t        return other.x >= this.x && other.x <= this.x + this.width && other.y >= this.y && other.y <= this.y + this.height;\n\t      } else {\n\t        // better be instance of Rect\n\t        return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"union\",\n\t    value: function union(rect) {\n\t\n\t      var right = Math.max(this.x + this.width, rect.x + rect.width);\n\t      var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\t\n\t      this.x = Math.min(this.x, rect.x);\n\t      this.y = Math.min(this.y, rect.y);\n\t\n\t      this.width = right - this.x;\n\t      this.height = bottom - this.y;\n\t    }\n\t  }]);\n\t\n\t  return Rect;\n\t}();\n\t\n\t/**\n\t * Margins\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Margins = exports.Margins = function () {\n\t  function Margins(left, top, right, bottom) {\n\t    _classCallCheck(this, Margins);\n\t\n\t    this.left = typeof left !== 'undefined' ? left : 0;\n\t    this.top = typeof top !== 'undefined' ? top : 0;\n\t    this.right = typeof right !== 'undefined' ? right : 0;\n\t    this.bottom = typeof bottom !== 'undefined' ? bottom : 0;\n\t  }\n\t\n\t  _createClass(Margins, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Margins(this.left, this.top, this.right, this.bottom);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(margins) {\n\t      return this.left === margins.left && this.top === margins.top && this.right === margins.right && this.bottom === margins.bottom;\n\t    }\n\t  }]);\n\t\n\t  return Margins;\n\t}();\n\t\n\t/**\n\t * Size\n\t *\n\t * @class\n\t */\n\t\n\t\n\tvar Size = exports.Size = function () {\n\t  function Size(width, height) {\n\t    _classCallCheck(this, Size);\n\t\n\t    this.width = typeof width !== 'undefined' ? width : 0;\n\t    this.height = typeof height !== 'undefined' ? height : 0;\n\t  }\n\t\n\t  _createClass(Size, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      return new Size(this.width, this.height);\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(size) {\n\t      return this.width === size.width && this.height === size.height;\n\t    }\n\t  }]);\n\t\n\t  return Size;\n\t}();\n\t\n\t/*\n\t * Pitches, notes\n\t */\n\t\n\t\n\tvar Step = exports.Step = {\n\t  Do: 0,\n\t  Du: 1,\n\t  Re: 2,\n\t  Me: 3,\n\t  Mi: 4,\n\t  Fa: 5,\n\t  Fu: 6,\n\t  So: 7,\n\t  La: 9,\n\t  Te: 10,\n\t  Ti: 11\n\t};\n\t\n\t// this little array helps map step values to staff positions. The numeric values of steps\n\t// correspond to whole step increments (2) or half step increments (1). This gives us the ability\n\t// to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n\t// array maps the steps to an incremental position the steps take on the staff line. This works\n\t// so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n\t// for relatively easy mapping to staff line locations.\n\t//                         Do Du Re Me Mi Fa Fu So    La Te Ti\n\tvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\n\tvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\t\n\t\n\tvar Pitch = exports.Pitch = function () {\n\t  function Pitch(step, octave) {\n\t    _classCallCheck(this, Pitch);\n\t\n\t    if (typeof octave === 'undefined') {\n\t      octave = Math.floor(step / 12);\n\t      step = step % 12;\n\t    }\n\t    this.step = step;\n\t    this.octave = octave;\n\t  }\n\t\n\t  _createClass(Pitch, [{\n\t    key: \"toInt\",\n\t    value: function toInt() {\n\t      return this.octave * 12 + this.step;\n\t    }\n\t  }, {\n\t    key: \"transpose\",\n\t    value: function transpose(step) {\n\t      return new Pitch(this.toInt() + step);\n\t    }\n\t  }, {\n\t    key: \"isHigherThan\",\n\t    value: function isHigherThan(pitch) {\n\t      return this.toInt() > pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"isLowerThan\",\n\t    value: function isLowerThan(pitch) {\n\t      return this.toInt() < pitch.toInt();\n\t    }\n\t  }, {\n\t    key: \"equals\",\n\t    value: function equals(pitch) {\n\t      return this.toInt() === pitch.toInt();\n\t    }\n\t  }], [{\n\t    key: \"stepToStaffOffset\",\n\t    value: function stepToStaffOffset(step) {\n\t      return __StepToStaffPosition[step];\n\t    }\n\t  }, {\n\t    key: \"staffOffsetToStep\",\n\t    value: function staffOffsetToStep(offset) {\n\t      while (offset < 0) {\n\t        offset = __StaffOffsetToStep.length + offset;\n\t      }return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n\t    }\n\t  }]);\n\t\n\t  return Pitch;\n\t}();\n\t\n\tfunction generateRandomGuid() {\n\t  function s4() {\n\t    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n\t  }\n\t  return s4() + s4();\n\t}\n\t\n\tfunction getCssForProperties(properties) {\n\t  return Object.entries(properties).map(function (_ref) {\n\t    var _ref2 = _slicedToArray(_ref, 2),\n\t        key = _ref2[0],\n\t        val = _ref2[1];\n\t\n\t    return key && val && key !== \"class\" ? key + \": \" + val + \";\" : \"\";\n\t  }).join(\"\");\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t//\n\t\n\t/**\n\t * @class\n\t */\n\tvar Language = exports.Language = function () {\n\t  function Language(name) {\n\t    _classCallCheck(this, Language);\n\t\n\t    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n\t    this.centerNeume = false;\n\t  }\n\t\n\t  /**\n\t   * @param {String} text The string to parsed into words.\n\t   * @return {Word[]} the resulting parsed words from syllabification\n\t   */\n\t\n\t\n\t  _createClass(Language, [{\n\t    key: \"syllabify\",\n\t    value: function syllabify(text) {\n\t      var parsedWords = [];\n\t\n\t      if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\t\n\t      // Divide the text into words separated by whitespace\n\t      var words = text.split(/[\\s]+/);\n\t\n\t      for (var i = 0, end = words.length; i < end; i++) {\n\t        parsedWords.push(this.syllabifyWord(words[i]));\n\t      }return parsedWords;\n\t    }\n\t  }]);\n\t\n\t  return Language;\n\t}();\n\t\n\tvar English = exports.English = function (_Language) {\n\t  _inherits(English, _Language);\n\t\n\t  function English() {\n\t    _classCallCheck(this, English);\n\t\n\t    var _this = _possibleConstructorReturn(this, (English.__proto__ || Object.getPrototypeOf(English)).call(this, \"English\"));\n\t\n\t    _this.centerNeume = true;\n\t    _this.regexLetter = /[a-z\\u00c0-\\u02af\\u0300-\\u036f\\u1e00-\\u1eff‿]+/i;\n\t    return _this;\n\t  }\n\t\n\t  /**\n\t   * @param {String} s the string to search\n\t   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t   */\n\t\n\t\n\t  _createClass(English, [{\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var match = this.regexLetter.exec(s.slice(startIndex));\n\t      if (match) return {\n\t        found: true,\n\t        startIndex: startIndex + match.index,\n\t        length: match[0].length\n\t      };\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return English;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Latin = exports.Latin = function (_Language2) {\n\t  _inherits(Latin, _Language2);\n\t\n\t  /**\n\t   * @constructs\n\t   */\n\t  function Latin() {\n\t    _classCallCheck(this, Latin);\n\t\n\t    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n\t    var _this2 = _possibleConstructorReturn(this, (Latin.__proto__ || Object.getPrototypeOf(Latin)).call(this, \"Latin\"));\n\t\n\t    _this2.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n\t    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n\t    _this2.possibleDiphthongs = _this2.diphthongs.concat([\"ei\", \"eu\", \"ui\", \"éi\", \"éu\", \"úi\"]);\n\t    _this2.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/gi;\n\t\n\t    // some words that are simply exceptions to standard syllabification rules!\n\t    var wordExceptions = new Object();\n\t\n\t    // ui combos pronounced as diphthongs\n\t    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n\t    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n\t    wordExceptions[\"huic\"] = [\"huic\"];\n\t    wordExceptions[\"cui\"] = [\"cui\"];\n\t    wordExceptions[\"hui\"] = [\"hui\"];\n\t\n\t    // eu combos pronounced as diphthongs\n\t    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n\t    wordExceptions[\"seu\"] = [\"seu\"];\n\t\n\t    _this2.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ä\", \"ë\", \"ï\", \"ö\", \"ü\", \"ā\", \"ē\", \"ī\", \"ō\", \"ū\", \"ă\", \"ĕ\", \"ĭ\", \"ŏ\", \"ŭ\", \"å\", \"e̊\", \"o̊\", \"ů\", \"æ\", \"œ\", \"ǽ\", // no accented œ in unicode?\n\t    \"y\", \"ý\", \"ÿ\"]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\t\n\t    _this2.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\t\n\t    _this2.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\t\n\t    _this2.liquidConsonants = [\"l\", \"r\"];\n\t    return _this2;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Latin, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"isVowelThatMightBeConsonant\",\n\t    value: function isVowelThatMightBeConsonant(c) {\n\t      for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++) {\n\t        if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    // substring should be a vowel and the character following\n\t\n\t  }, {\n\t    key: \"isVowelActingAsConsonant\",\n\t    value: function isVowelActingAsConsonant(substring) {\n\t      return this.isVowelThatMightBeConsonant(substring[0]) && this.isVowel(substring[1]);\n\t    }\n\t\n\t    /**\n\t     * f is not a mute consonant, but we lump it together for syllabification\n\t     * since it is syntactically treated the same way\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isMuteConsonantOrF\",\n\t    value: function isMuteConsonantOrF(c) {\n\t      for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++) {\n\t        if (this.muteConsonantsAndF[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is a liquid consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isLiquidConsonant\",\n\t    value: function isLiquidConsonant(c) {\n\t      for (var i = 0, end = this.liquidConsonants.length; i < end; i++) {\n\t        if (this.liquidConsonants[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isPossibleDiphthong\",\n\t    value: function isPossibleDiphthong(s) {\n\t      for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++) {\n\t        if (this.possibleDiphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n\t     *\n\t     * Divisions occur when:\n\t     *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n\t     *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n\t     *   3. After the first consonant when two or more consonants follow a vowel\n\t     *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n\t     *\n\t     * Exceptions:\n\t     *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n\t     *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n\t     *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n\t     *\n\t     * In addition to these rules, Wheelock's Latin provides this sound exception:\n\t     *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n\t     *      th, which should never be separated in syllabification:\n\t     *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n\t     *\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t      var haveCompleteSyllable = false;\n\t      var previousWasVowel = false;\n\t      var workingString = word.toLowerCase();\n\t      var startSyllable = 0;\n\t\n\t      var c, lookahead, haveLookahead;\n\t\n\t      // a helper function to create syllables\n\t      var makeSyllable = function makeSyllable(length) {\n\t        if (haveCompleteSyllable) {\n\t          syllables.push(word.substr(startSyllable, length));\n\t          startSyllable += length;\n\t        }\n\t\n\t        haveCompleteSyllable = false;\n\t      };\n\t\n\t      for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n\t        c = workingString[i];\n\t\n\t        // get our lookahead in case we need them...\n\t        lookahead = \"*\";\n\t        haveLookahead = i + 1 < wordLength;\n\t\n\t        if (haveLookahead) lookahead = workingString[i + 1];\n\t\n\t        var cIsVowel = this.isVowel(c);\n\t\n\t        // i is a special case for a vowel. when i is at the beginning\n\t        // of the word (Iesu) or i is between vowels (alleluia),\n\t        // then the i is treated as a consonant (y)\n\t        if (c === \"i\") {\n\t          if (i === 0 && haveLookahead && this.isVowel(lookahead)) cIsVowel = false;else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n\t            cIsVowel = false;\n\t          }\n\t        }\n\t\n\t        if (c === \"-\") {\n\t          // a hyphen forces a syllable break, which effectively resets\n\t          // the logic...\n\t\n\t          haveCompleteSyllable = true;\n\t          previousWasVowel = false;\n\t          makeSyllable(i - startSyllable);\n\t          startSyllable++;\n\t        } else if (cIsVowel) {\n\t          // once we get a vowel, we have a complete syllable\n\t          haveCompleteSyllable = true;\n\t\n\t          if (previousWasVowel && !this.isDiphthong(workingString[i - 1] + \"\" + c)) {\n\t            makeSyllable(i - startSyllable);\n\t            haveCompleteSyllable = true;\n\t          }\n\t\n\t          previousWasVowel = true;\n\t        } else if (haveLookahead) {\n\t          if (c === \"q\" && lookahead === \"u\" || lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\")) {\n\t            // handle wheelock's exceptions for qu, ch, ph and th\n\t            makeSyllable(i - startSyllable);\n\t            i++; // skip over the 'h' or 'u'\n\t          } else if (previousWasVowel && this.isVowel(lookahead)) {\n\t            // handle division rule 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (this.isMuteConsonantOrF(c) && this.isLiquidConsonant(lookahead)) {\n\t            // handle exception 2\n\t            makeSyllable(i - startSyllable);\n\t          } else if (haveCompleteSyllable) {\n\t            // handle division rule 3\n\t            makeSyllable(i + 1 - startSyllable);\n\t          }\n\t\n\t          previousWasVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex, ignore) {\n\t      var _this3 = this;\n\t\n\t      this.regexVowel.lastIndex = 0;\n\t      var stringSlice = s.slice(startIndex);\n\t      var match = this.regexVowel.exec(stringSlice);\n\t      var isIgnoredMatch = function isIgnoredMatch(_ref) {\n\t        var index = _ref.index,\n\t            endIndex = _ref.endIndex;\n\t        return index <= match.index && endIndex > match.index || index < _this3.regexVowel.lastIndex && endIndex >= _this3.regexVowel.lastIndex;\n\t      };\n\t      var inIgnore = match && ignore && ignore.length && ignore.find(isIgnoredMatch);\n\t      while (inIgnore) {\n\t        match = this.regexVowel.exec(stringSlice);\n\t        inIgnore = match && ignore.find(isIgnoredMatch);\n\t      }\n\t      if (match) {\n\t        if (match[1]) {\n\t          // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n\t          match.index += match[1].length;\n\t        }\n\t        return {\n\t          found: true,\n\t          startIndex: startIndex + match.index,\n\t          length: match[2].length\n\t        };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Latin;\n\t}(Language);\n\t\n\t/**\n\t * @class\n\t */\n\t\n\t\n\tvar Spanish = exports.Spanish = function (_Language3) {\n\t  _inherits(Spanish, _Language3);\n\t\n\t  function Spanish() {\n\t    _classCallCheck(this, Spanish);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (Spanish.__proto__ || Object.getPrototypeOf(Spanish)).call(this, \"Spanish\"));\n\t\n\t    _this4.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\t\n\t    _this4.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\t\n\t    _this4.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\t\n\t    _this4.diphthongs = [\"ai\", \"ei\", \"oi\", \"ui\", \"ia\", \"ie\", \"io\", \"iu\", \"au\", \"eu\", \"ou\", \"ua\", \"ue\", \"uo\", \"ái\", \"éi\", \"ói\", \"úi\", \"iá\", \"ié\", \"ió\", \"iú\", \"áu\", \"éu\", \"óu\", \"uá\", \"ué\", \"uó\", \"üe\", \"üi\"];\n\t\n\t    _this4.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n\t    return _this4;\n\t  }\n\t\n\t  // c must be lowercase!\n\t\n\t\n\t  _createClass(Spanish, [{\n\t    key: \"isVowel\",\n\t    value: function isVowel(c) {\n\t      for (var i = 0, end = this.vowels.length; i < end; i++) {\n\t        if (this.vowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isWeakVowel\",\n\t    value: function isWeakVowel(c) {\n\t      for (var i = 0, end = this.weakVowels.length; i < end; i++) {\n\t        if (this.weakVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     * @param {String} c The character to test; must be lowercase\n\t     * @return {boolean} true if c is an f or a mute consonant\n\t     */\n\t\n\t  }, {\n\t    key: \"isStrongVowel\",\n\t    value: function isStrongVowel(c) {\n\t      for (var i = 0, end = this.strongVowels.length; i < end; i++) {\n\t        if (this.strongVowels[i] === c) return true;\n\t      }return false;\n\t    }\n\t\n\t    /**\n\t     *\n\t     * @param {String} s The string to test; must be lowercase\n\t     * @return {boolean} true if s is a diphthong\n\t     */\n\t\n\t  }, {\n\t    key: \"isDiphthong\",\n\t    value: function isDiphthong(s) {\n\t      for (var i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        if (this.diphthongs[i] === s) return true;\n\t      }return false;\n\t    }\n\t  }, {\n\t    key: \"createSyllable\",\n\t    value: function createSyllable(text) {\n\t      /*\n\t      var accented = false;\n\t      var ellidesToNext = false;\n\t       if (text.length > 0) {\n\t           if (text[0] == '`') {\n\t              accented = true;\n\t              text = text.substr(1);\n\t          }\n\t           if (text[text.length - 1] == '_') {\n\t              ellidesToNext = true;\n\t              text = text.substr(0, text.length - 1);\n\t          }\n\t      }\n\t       var s = new Syllable(text);\n\t       s.isMusicalAccent = accented;\n\t      s.elidesToNext = ellidesToNext;*/\n\t\n\t      return text;\n\t    }\n\t\n\t    /**\n\t     */\n\t\n\t  }, {\n\t    key: \"syllabifyWord\",\n\t    value: function syllabifyWord(word) {\n\t      var syllables = [];\n\t\n\t      var haveCompleteSyllable = false;\n\t      var previousIsVowel = false;\n\t      var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n\t      var startSyllable = 0;\n\t\n\t      // fixme: first check for prefixes\n\t\n\t      for (var i = 0; i < word.length; i++) {\n\t        var c = word[i].toLowerCase();\n\t\n\t        if (this.isVowel(c)) {\n\t          // we have a complete syllable as soon as we have a vowel\n\t          haveCompleteSyllable = true;\n\t\n\t          var cIsStrongVowel = this.isStrongVowel(c);\n\t\n\t          if (previousIsVowel) {\n\t            // if we're at a strong vowel, then we finish out the last syllable\n\t            if (cIsStrongVowel) {\n\t              if (previousIsStrongVowel) {\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              }\n\t            }\n\t          }\n\t\n\t          previousIsVowel = true;\n\t          previousIsStrongVowel = cIsStrongVowel;\n\t        } else {\n\t          if (!haveCompleteSyllable) {\n\t            // do nothing since we don't have a complete syllable yet...\n\t          } else {\n\t            // handle explicit syllable breaks\n\t            if (word[i] === \"-\") {\n\t              // start new syllable\n\t              syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t              startSyllable = ++i;\n\t            } else {\n\t              var numberOfConsonants = 1,\n\t                  consonant2;\n\t\n\t              // count how many more consonants there are\n\t              for (var j = i + 1; j < word.length; j++) {\n\t                if (this.isVowel(word[j])) break;\n\t                numberOfConsonants++;\n\t              }\n\t\n\t              if (numberOfConsonants === 1) {\n\t                // start new syllable\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 2) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t                if (consonant2 === \"l\" || consonant2 === \"r\" || c === \"c\" && consonant2 === \"h\") {\n\t                  // split before the consonant pair\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                  startSyllable = i++;\n\t                } else {\n\t                  //split the consonants\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t                  startSyllable = i;\n\t                }\n\t              } else if (numberOfConsonants === 3) {\n\t                consonant2 = word[i + 1].toLowerCase();\n\t\n\t                // if second consonant is s, divide cc-c, otherwise divide c-cc\n\t                if (consonant2 === \"s\") {\n\t                  i += 2;\n\t                  syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable)));\n\t                } else syllables.push(this.createSyllable(word.substr(startSyllable, ++i - startSyllable)));\n\t\n\t                startSyllable = i;\n\t              } else if (numberOfConsonants === 4) {\n\t                // four always get split cc-cc\n\t                syllables.push(this.createSyllable(word.substr(startSyllable, i - startSyllable + 2)));\n\t                startSyllable = i + 2;\n\t                i += 3;\n\t              }\n\t            }\n\t\n\t            haveCompleteSyllable = false;\n\t          }\n\t\n\t          previousIsVowel = false;\n\t        }\n\t      }\n\t\n\t      // if we have a complete syllable, we can add it as a new one. Otherwise\n\t      // we tack the remaining characters onto the last syllable.\n\t      if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));else if (startSyllable > 0) syllables[syllables.length - 1] += word.substr(startSyllable);else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\t\n\t      return syllables;\n\t    }\n\t\n\t    /**\n\t     * @param {String} s the string to search\n\t     * @param {Number} startIndex The index at which to start searching for a vowel in the string\n\t     * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n\t     */\n\t\n\t  }, {\n\t    key: \"findVowelSegment\",\n\t    value: function findVowelSegment(s, startIndex) {\n\t      var i, end, index;\n\t      var workingString = s.toLowerCase();\n\t\n\t      // do we have a diphthongs?\n\t      for (i = 0, end = this.diphthongs.length; i < end; i++) {\n\t        var d = this.diphthongs[i];\n\t        index = workingString.indexOf(d, startIndex);\n\t\n\t        if (index >= 0) {\n\t          // check the exceptions...\n\t          if (d[0] === \"u\" && index > 0) {\n\t            var tripthong = s.substr(index - 1, 3).toLowerCase();\n\t\n\t            for (var j = 0, endj = this.uDiphthongExceptions.length; i < endj; j++) {\n\t              if (tripthong === this.uDiphthongExceptions[j]) {\n\t                // search from after the u...\n\t                return this.findVowelSegment(s, index + 1);\n\t              }\n\t            }\n\t          }\n\t\n\t          return { found: true, startIndex: index, length: d.length };\n\t        }\n\t      }\n\t\n\t      // no diphthongs. Let's look for single vowels then...\n\t      for (i = 0, end = this.vowels.length; i < end; i++) {\n\t        index = workingString.indexOf(this.vowels[i], startIndex);\n\t\n\t        if (index >= 0) return { found: true, startIndex: index, length: 1 };\n\t      }\n\t\n\t      // no vowels sets found after startIndex!\n\t      return { found: false, startIndex: -1, length: -1 };\n\t    }\n\t  }]);\n\t\n\t  return Spanish;\n\t}(Language);\n\t\n\tvar language = exports.language = {\n\t  english: new English(),\n\t  latin: new Latin(),\n\t  spanish: new Spanish()\n\t};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t//\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// generated based on the svg data\n\tvar Glyphs = exports.Glyphs = {\n\t  None: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0,\n\t      height: 0\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  AcuteAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0.803,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  GraveAccent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 0, //110.992,\n\t      height: 125.794\n\t    },\n\t    origin: {\n\t      x: 0, // -110.992,\n\t      y: 125.274\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Circle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 100\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 100\n\t    }\n\t  },\n\t  Semicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  ReversedSemicircle: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 55\n\t    },\n\t    origin: {\n\t      x: -50,\n\t      y: 50\n\t    }\n\t  },\n\t  Stropha: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.657,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 48,\n\t      y: 73.438\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  BeginningDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.59\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosDescShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.053\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 65.89\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 46.353,\n\t      height: 339.582\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 270.082\n\t    },\n\t    align: \"left\"\n\t  },\n\t  CustosShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 43.75,\n\t      height: 270.052\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 200.365\n\t    },\n\t    align: \"left\"\n\t  },\n\t  DoClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 331.251\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 164.876\n\t    },\n\t    align: \"left\"\n\t  },\n\t  FaClef: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 193.752,\n\t      height: 333.595\n\t    },\n\t    origin: {\n\t      x: 0.001,\n\t      y: 157.001\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Flat: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 97.917,\n\t      height: 267.969\n\t    },\n\t    origin: {\n\t      x: 1.042,\n\t      y: 204.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Mora: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 48,\n\t      height: 48\n\t    },\n\t    origin: {\n\t      x: -24,\n\t      y: 24\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Natural: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 70.311,\n\t      height: 330.469\n\t    },\n\t    origin: {\n\t      x: 0.312,\n\t      y: 166.563\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Sharp: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 154.646,\n\t      height: 147.987\n\t    },\n\t    origin: {\n\t      x: 0,\n\t      y: 74.098\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusAsc: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 76\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusDes: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  OriscusLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 147.656\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.406\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusLower: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 103.124\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 42\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PodatusUpper: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 91.406,\n\t      height: 125.781\n\t    },\n\t    origin: {\n\t      x: 91.406,\n\t      y: 63.781\n\t    },\n\t    align: \"right\"\n\t  },\n\t  Porrectus1: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 302.344,\n\t      height: 215.627\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 52.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus2: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.343,\n\t      height: 328.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 68.75\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus3: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 377.344,\n\t      height: 427.345\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Porrectus4: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 420,\n\t      height: 525.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 70\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumCavum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }, {\n\t      type: \"negative\",\n\t      data: \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 123.438\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 60.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 152.344\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 88.344\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumQuadratumDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 151.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.562\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatum: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150.78\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 75.78\n\t    },\n\t    align: \"left\"\n\t  },\n\t  PunctumInclinatumLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 105.546\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 53.164\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Quilisma: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 150\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 89.282\n\t    },\n\t    align: \"left\"\n\t  },\n\t  TerminatingAscLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 49.999,\n\t      height: 121.873\n\t    },\n\t    origin: {\n\t      x: 49.999,\n\t      y: 48.843\n\t    },\n\t    align: \"right\"\n\t  },\n\t  TerminatingDesLiquescent: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 50,\n\t      height: 122.658\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 80.97\n\t    },\n\t    align: \"right\"\n\t  },\n\t  VerticalEpisemaAbove: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 60\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VerticalEpisemaBelow: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 16,\n\t      height: 60\n\t    },\n\t    origin: {\n\t      x: 8,\n\t      y: 0\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaLong: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 326.562\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  VirgaShort: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 100,\n\t      height: 253.126\n\t    },\n\t    origin: {\n\t      x: 50,\n\t      y: 66.906\n\t    },\n\t    align: \"left\"\n\t  },\n\t  Virgula: {\n\t    paths: [{\n\t      type: \"positive\",\n\t      data: \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n\t    }],\n\t    bounds: {\n\t      x: 0,\n\t      y: 0,\n\t      width: 98.014,\n\t      height: 175.221\n\t    },\n\t    origin: {\n\t      x: 1.074,\n\t      y: 88.86\n\t    },\n\t    align: \"left\"\n\t  }\n\t};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantNotationElement = exports.Annotations = exports.Annotation = exports.TextLeftRight = exports.Subtitle = exports.Title = exports.Supertitle = exports.TitleTextElement = exports.DropCap = exports.TranslationText = exports.AboveLinesText = exports.ChoralSign = exports.Lyric = exports.LyricArray = exports.LyricType = exports.TextElement = exports.TextSpan = exports.CurlyBraceVisualizer = exports.RoundBraceVisualizer = exports.GlyphVisualizer = exports.LineaVisualizer = exports.VirgaLineVisualizer = exports.NeumeLineVisualizer = exports.DividerLineVisualizer = exports.ChantLayoutElement = exports.ChantContext = exports.TextMeasuringStrategy = exports.QuickSvg = exports.GlyphCode = exports.DefaultTrailingSpace = exports.TextTypesByClass = exports.TextTypes = exports.MarkingPositionHint = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tvar _ExsurgeText = __webpack_require__(2);\n\t\n\tvar _addAccent = __webpack_require__(5);\n\t\n\tvar _makeLigature = __webpack_require__(6);\n\t\n\tvar _greextraGlyphs = __webpack_require__(7);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction getFontFilenameForProperties() {\n\t  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"{}\";\n\t\n\t  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n\t      bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n\t  return url.replace(\"{}\", \"\" + (italic || bold ? \"\" + bold + italic : \"Regular\"));\n\t}\n\t\n\t// load in the web font for special chant characters here:\n\t// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\t\n\tvar canAccessDOM = typeof document !== \"undefined\";\n\t\n\tvar __getNeumeFromSvgElem = function __getNeumeFromSvgElem(score, elem) {\n\t  var note = score.notes[elem.parentElement.querySelector(\"[element-index]\").getAttribute(\"element-index\")];\n\t  return note.neume || note;\n\t};\n\t\n\t// for positioning markings on notes\n\tvar MarkingPositionHint = exports.MarkingPositionHint = {\n\t  Default: 0,\n\t  Above: 1,\n\t  Below: 2\n\t};\n\t\n\t/**\n\t * List of types of text and their defaults relative to lyrics\n\t * @type Array\n\t */\n\tvar TextTypes = exports.TextTypes = {\n\t  supertitle: {\n\t    display: \"Supertitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 7 / 6;\n\t    }, // 14pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSupertitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.supertitle;\n\t    }\n\t  },\n\t  title: {\n\t    display: \"Title\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 3 / 2;\n\t    }, // 18pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.title;\n\t    }\n\t  },\n\t  subtitle: {\n\t    display: \"Subtitle\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    }, // 12pt\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasSubtitle();\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.titles.subtitle;\n\t    }\n\t  },\n\t  leftRight: {\n\t    display: \"Left / Right Text\",\n\t    cssClass: \"textLeftRight\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.titles.hasTextLeft() || score.titles.hasTextRight();\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.titles[elem.extraClass];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return score.titles[elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"];\n\t    }\n\t  },\n\t  annotation: {\n\t    display: \"Annotation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 2 / 3;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.annotation;\n\t    },\n\t    getFromScore: function getFromScore(score, _ref) {\n\t      var _ref$elementIndex = _ref.elementIndex,\n\t          elementIndex = _ref$elementIndex === undefined ? 0 : _ref$elementIndex;\n\t      return score.annotation && (score.annotation.annotations ? score.annotation.annotations[elementIndex] : score.annotation);\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return score.annotation && (score.annotation.annotations ? score.annotation.annotations[Array.from(elem.parentElement.querySelectorAll(\"text.annotation\")).indexOf(elem)] : score.annotation);\n\t    }\n\t  },\n\t  dropCap: {\n\t    display: \"Drop Cap\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 4;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return !!score.dropCap;\n\t    },\n\t    getFromScore: function getFromScore(score) {\n\t      return score.dropCap;\n\t    }\n\t  },\n\t  al: {\n\t    display: \"Above Staff\",\n\t    cssClass: \"aboveLinesText\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasAboveLinesText;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].alText[elem.alIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).alText[elem.getAttribute(\"al-index\") || 0];\n\t    }\n\t  },\n\t  choralSign: {\n\t    display: \"Choral Sign\",\n\t    size: function size(ctxt) {\n\t      return ctxt.staffInterval * 1.5;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return false;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notes[elem.note.elementIndex].choralSign;\n\t    }\n\t  },\n\t  lyric: {\n\t    display: \"Lyric\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.9;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasLyrics;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).lyrics[elem.getAttribute(\"lyric-index\") || 0];\n\t    }\n\t  },\n\t  translation: {\n\t    display: \"Translation\",\n\t    defaultSize: function defaultSize(size) {\n\t      return size * 0.75;\n\t    },\n\t    containedInScore: function containedInScore(score) {\n\t      return score.hasTranslations;\n\t    },\n\t    getFromScore: function getFromScore(score, elem) {\n\t      return score.notations[elem.notation.notationIndex].translationText[elem.translationIndex];\n\t    },\n\t    getFromSvgElem: function getFromSvgElem(score, elem) {\n\t      return __getNeumeFromSvgElem(score, elem).translationText[elem.getAttribute(\"translation-index\") || 0];\n\t    }\n\t  }\n\t};\n\tvar TextTypesByClass = exports.TextTypesByClass = {};\n\tObject.entries(TextTypes).forEach(function (_ref2) {\n\t  var _ref3 = _slicedToArray(_ref2, 2),\n\t      key = _ref3[0],\n\t      entry = _ref3[1];\n\t\n\t  var cssClass = entry.cssClass = entry.cssClass || key;\n\t  entry.key = key;\n\t  TextTypesByClass[cssClass] = entry;\n\t});\n\t\n\tvar DefaultTrailingSpace = exports.DefaultTrailingSpace = function DefaultTrailingSpace(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\n\t};\n\tDefaultTrailingSpace.isDefault = true;\n\t\n\tvar GlyphCode = exports.GlyphCode = {\n\t  None: \"None\",\n\t\n\t  AcuteAccent: \"AcuteAccent\",\n\t  GraveAccent: \"GraveAccent\",\n\t  Circle: \"Circle\",\n\t  Semicircle: \"Semicircle\",\n\t  ReversedSemicircle: \"ReversedSemicircle\",\n\t  Stropha: \"Stropha\",\n\t  StrophaLiquescent: \"StrophaLiquescent\",\n\t\n\t  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n\t  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\t\n\t  CustosDescLong: \"CustosDescLong\",\n\t  CustosDescShort: \"CustosDescShort\",\n\t  CustosLong: \"CustosLong\",\n\t  CustosShort: \"CustosShort\",\n\t\n\t  // clefs and other markings\n\t  DoClef: \"DoClef\",\n\t  FaClef: \"FaClef\",\n\t  Flat: \"Flat\",\n\t  Mora: \"Mora\",\n\t  Natural: \"Natural\",\n\t  OriscusAsc: \"OriscusAsc\",\n\t  OriscusDes: \"OriscusDes\",\n\t  OriscusLiquescent: \"OriscusLiquescent\",\n\t\n\t  PodatusLower: \"PodatusLower\",\n\t  PodatusUpper: \"PodatusUpper\",\n\t\n\t  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n\t  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n\t  Porrectus3: \"Porrectus3\",\n\t  Porrectus4: \"Porrectus4\",\n\t\n\t  PunctumCavum: \"PunctumCavum\",\n\t  PunctumQuadratum: \"PunctumQuadratum\",\n\t  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n\t  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n\t  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n\t  PunctumInclinatum: \"PunctumInclinatum\",\n\t  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n\t  Quilisma: \"Quilisma\",\n\t\n\t  Sharp: \"Sharp\",\n\t  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n\t  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n\t  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n\t  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n\t  VirgaLong: \"VirgaLong\",\n\t  VirgaShort: \"VirgaShort\",\n\t  Virgula: \"Virgula\",\n\t\n\t  UpperBrace: \"UpperBrace\"\n\t}; // GlyphCode\n\t\n\tvar QuickSvg = exports.QuickSvg = {\n\t  // namespaces\n\t  ns: \"http://www.w3.org/2000/svg\",\n\t  xmlns: \"https://www.w3.org/2000/xmlns/\",\n\t  xlink: \"http://www.w3.org/1999/xlink\",\n\t\n\t  hasDOMAccess: function hasDOMAccess() {\n\t    return canAccessDOM;\n\t  },\n\t\n\t  // create the root level svg object\n\t  svg: function svg(width, height) {\n\t    var node = document.createElementNS(this.ns, \"svg\");\n\t\n\t    node.setAttribute(\"xmlns\", this.ns);\n\t    node.setAttribute(\"version\", \"1.1\");\n\t    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    // create the defs element\n\t    var defs = document.createElementNS(this.ns, \"defs\");\n\t    node.appendChild(defs);\n\t\n\t    node.defs = defs;\n\t\n\t    node.clearNotations = function () {\n\t      // clear out all children except defs\n\t      node.removeChild(defs);\n\t\n\t      while (node.hasChildNodes()) {\n\t        node.removeChild(node.lastChild);\n\t      }node.appendChild(defs);\n\t    };\n\t\n\t    return node;\n\t  },\n\t\n\t  rect: function rect(width, height) {\n\t    var node = document.createElementNS(this.ns, \"rect\");\n\t\n\t    node.setAttribute(\"width\", width);\n\t    node.setAttribute(\"height\", height);\n\t\n\t    return node;\n\t  },\n\t\n\t  line: function line(x1, y1, x2, y2) {\n\t    var node = document.createElementNS(this.ns, \"line\");\n\t\n\t    node.setAttribute(\"x1\", x1);\n\t    node.setAttribute(\"y1\", y1);\n\t    node.setAttribute(\"x2\", x2);\n\t    node.setAttribute(\"y2\", y2);\n\t\n\t    return node;\n\t  },\n\t\n\t  g: function g() {\n\t    var node = document.createElementNS(this.ns, \"g\");\n\t\n\t    return node;\n\t  },\n\t\n\t  text: function text() {\n\t    var node = document.createElementNS(this.ns, \"text\");\n\t\n\t    return node;\n\t  },\n\t\n\t  tspan: function tspan(str) {\n\t    var node = document.createElementNS(this.ns, \"tspan\");\n\t    node.textContent = str;\n\t\n\t    return node;\n\t  },\n\t\n\t  // nodeRef should be the id of the object in defs (without the #)\n\t  use: function use(nodeRef) {\n\t    var node = document.createElementNS(this.ns, \"use\");\n\t    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\t\n\t    return node;\n\t  },\n\t\n\t  svgFragmentForGlyph: function svgFragmentForGlyph(glyph) {\n\t    var svgSrc = \"\";\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n\t        d: path.data || undefined,\n\t        fill: path.type === \"negative\" ? \"#fff\" : undefined\n\t      });\n\t    }\n\t    return svgSrc;\n\t  },\n\t\n\t  nodesForGlyph: function nodesForGlyph(glyph) {\n\t    var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createNode\";\n\t\n\t    var nodes = [];\n\t    for (var i = 0; i < glyph.paths.length; ++i) {\n\t      var path = glyph.paths[i];\n\t      var props = {};\n\t      if (path.data) props.d = path.data;\n\t      if (path.type === \"negative\") props.fill = \"#fff\";\n\t      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n\t    }\n\t    return nodes;\n\t  },\n\t\n\t  createNode: function createNode(name, attributes, children) {\n\t    var node = document.createElementNS(this.ns, name);\n\t    if (attributes && attributes.source) {\n\t      node.source = attributes.source;\n\t      delete attributes.source;\n\t    }\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") {\n\t        var val = attributes[attr];\n\t        var match = attr.match(/^([^:]+):([^:]+)$/);\n\t        if (match) {\n\t          node.setAttributeNS(this[match[1]], match[2], val);\n\t        } else {\n\t          node.setAttribute(attr, val);\n\t        }\n\t      }\n\t    }\n\t    if (children) {\n\t      if (typeof children === \"string\") {\n\t        node.textContent = children;\n\t      } else if (children.constructor === [].constructor) {\n\t        for (var i = 0; i < children.length; ++i) {\n\t          node.appendChild(children[i]);\n\t        }\n\t      } else {\n\t        node.appendChild(children);\n\t      }\n\t    }\n\t    return node;\n\t  },\n\t\n\t  createSvgTree: function createSvgTree(name, props) {\n\t    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      children[_key - 2] = arguments[_key];\n\t    }\n\t\n\t    if (\"class\" in props) {\n\t      props.className = props.class;\n\t      delete props.class;\n\t    }\n\t    if (children.length === 1 && children[0] instanceof Array) {\n\t      children = children[0];\n\t    }\n\t    var convertKeysToCamelCase = function convertKeysToCamelCase(obj) {\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          var key = _step.value;\n\t\n\t          if (/[-:][a-z]/.test(key)) {\n\t            if (/^\\w+-index$/.test(key)) continue;\n\t            var camelCase = key.replace(/[-:]([a-z])/g, function (whole, letter) {\n\t              return letter.toUpperCase();\n\t            });\n\t            obj[camelCase] = obj[key];\n\t            delete obj[key];\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t    };\n\t    convertKeysToCamelCase(props);\n\t    if (props.style) convertKeysToCamelCase(props.style);\n\t    var source = props.source;\n\t    if (source && source.sourceGabc) {\n\t      props[\"source-gabc\"] = source.sourceGabc;\n\t    }\n\t    return { name: name, props: props, children: children };\n\t  },\n\t\n\t\n\t  createFragment: function createFragment(name, attributes, child) {\n\t    if (child === undefined || child === null) child = \"\";\n\t\n\t    var fragment = \"<\" + name + \" \";\n\t\n\t    for (var attr in attributes) {\n\t      if (attributes.hasOwnProperty(attr) && typeof attributes[attr] !== \"undefined\") fragment += attr + '=\"' + attributes[attr] + '\" ';\n\t    }\n\t\n\t    fragment += \">\" + child + \"</\" + name + \">\";\n\t\n\t    return fragment;\n\t  },\n\t\n\t  parseFragment: function parseFragment(fragment) {\n\t    // create temporary holder\n\t    var well = document.createElement(\"svg\");\n\t\n\t    // act as a setter if svg is given\n\t    if (fragment) {\n\t      var container = this.g();\n\t\n\t      // dump raw svg\n\t      // do this to allow the browser to automatically create svg nodes?\n\t      well.innerHTML = \"<svg>\" + fragment.replace(/\\n/, \"\").replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n\t\n\t      // transplant nodes\n\t      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n\t        container.appendChild(well.firstChild.firstChild);\n\t      }return container;\n\t    }\n\t  },\n\t\n\t  translate: function translate(node, x, y) {\n\t    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\t    return node;\n\t  },\n\t\n\t  scale: function scale(node, sx, sy) {\n\t    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n\t    return node;\n\t  }\n\t};\n\t\n\tvar TextMeasuringStrategy = exports.TextMeasuringStrategy = {\n\t  // shapes\n\t  Svg: 0,\n\t  Canvas: 1,\n\t  OpenTypeJS: 2\n\t};\n\t\n\t/*\n\t * ChantContext\n\t */\n\t\n\tvar ChantContext = exports.ChantContext = function () {\n\t  function ChantContext() {\n\t    var _this = this;\n\t\n\t    var textMeasuringStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : QuickSvg.hasDOMAccess() ? TextMeasuringStrategy.Canvas : TextMeasuringStrategy.OpenTypeJS;\n\t\n\t    _classCallCheck(this, ChantContext);\n\t\n\t    /**\n\t     * font dictionary\n\t     * @type {{ [key: string]: import('opentype.js').Font }}\n\t     */\n\t    this.fontDictionary = undefined;\n\t    this.staffLineCount = 4;\n\t    this.textMeasuringStrategy = textMeasuringStrategy;\n\t    this.getFontFilenameForProperties = getFontFilenameForProperties;\n\t    this.defs = {};\n\t    this.makeDefs = [];\n\t    if (QuickSvg.hasDOMAccess()) {\n\t      this.defsNode = QuickSvg.createNode(\"defs\");\n\t    }\n\t\n\t    // font styles\n\t    this.textStyles = {};\n\t    this.textColor = \"#000\";\n\t    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\t\n\t    this.rubricColor = \"#d00\";\n\t    this.specialCharProperties = {\n\t      \"font-family\": \"'Exsurge Characters'\",\n\t      fill: this.rubricColor,\n\t      class: 'rubric'\n\t    };\n\t    this.textBeforeSpecialChar = \"\";\n\t    this.textAfterSpecialChar = \".\";\n\t    this.specialCharMap = {\n\t      \"℣\": 'v',\n\t      \"℟\": 'r',\n\t      \"+\": \"+\",\n\t      \"*\": \"*\"\n\t    };\n\t    this.plusProperties = {};\n\t    this.asteriskProperties = {};\n\t    this.specialCharText = function (char) {\n\t      return _this.specialCharMap[char] || char;\n\t    };\n\t\n\t    this.fontStyleDictionary = {\n\t      b: { \"font-weight\": \"bold\" },\n\t      i: { \"font-style\": \"italic\" },\n\t      u: { \"text-decoration\": \"underline\" },\n\t      ul: { \"text-decoration\": \"underline\" },\n\t      c: { fill: this.rubricColor, class: 'rubric' },\n\t      sc: { \"font-variant\": \"small-caps\" },\n\t      v: {},\n\t      e: { \"font-style\": \"italic\", \"font-size\": \"90%\" }\n\t    };\n\t\n\t    this.markupSymbolDictionary = {\n\t      \"*\": \"b\",\n\t      \"_\": \"i\",\n\t      \"^\": \"c\",\n\t      \"%\": \"sc\"\n\t    };\n\t\n\t    this.textStyles.al.prefix = \"<i>\";\n\t\n\t    this.textStyles.translation.prefix = \"<i>\";\n\t\n\t    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\t\n\t    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\t\n\t    this.minLedgerSeparation = 2; // multiple of staffInterval\n\t    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n\t    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n\t    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\t\n\t    // everything depends on the scale of the punctum\n\t    this.glyphPunctumWidth = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.width;\n\t    this.glyphPunctumHeight = _ExsurgeGlyphs.Glyphs.PunctumQuadratum.bounds.height;\n\t\n\t    // max space to add between notations when justifying, in multiples of this.staffInterval\n\t    this.maxExtraSpaceInStaffIntervals = 0.5;\n\t\n\t    // for keeping track of the clef\n\t    this.activeClef = null;\n\t\n\t    this.neumeLineColor = \"#000\";\n\t    this.staffLineColor = \"#000\";\n\t    this.dividerLineColor = \"#000\";\n\t\n\t    this.defaultLanguage = _ExsurgeText.language.latin;\n\t\n\t    // calculate the pixel ratio for drawing to a canvas\n\t    this.pixelRatio = typeof window === 'undefined' ? 1.0 : window.devicePixelRatio || 1.0;\n\t\n\t    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\t\n\t    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n\t      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n\t      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n\t      document.body.insertBefore(this.svgTextMeasurer, document.body.firstChild);\n\t    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t      this.makeCanvasIfNeeded();\n\t    }\n\t\n\t    // for connecting neume syllables...\n\t    this.syllableConnector = \"-\";\n\t\n\t    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n\t    this.scaleDefs = true;\n\t\n\t    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n\t    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n\t    // on the text metrics, right? 1 punctum ~ x height size?\n\t    this.setGlyphScaling(1.0 / 16.0);\n\t\n\t    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n\t    this.interSyllabicMultiplier = 2.5;\n\t\n\t    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n\t    this.accidentalSpaceMultiplier = 2;\n\t\n\t    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n\t    this.interVerbalMultiplier = 1;\n\t\n\t    this.drawGuides = false;\n\t    this.drawDebuggingBounds = true;\n\t\n\t    // we keep track of where we are in processing notations, so that\n\t    // we can maintain the context for notations to know about.\n\t    //\n\t    // these are only gauranteed to be valid during the performLayout phase!\n\t    this.activeNotations = null;\n\t    this.currNotationIndex = -1;\n\t\n\t    this.minSyllablesLastLine = 0;\n\t    this.minNotesLastLine = 0;\n\t\n\t    // chant notation elements are normally separated by a minimum fixed amount of space\n\t    // on the staff line. It can happen, however, that two text elements are almost close\n\t    // enough to merge, only to be separated much more by the required hyphen (or other\n\t    // connecting string).\n\t    //\n\t    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n\t    // elements, thus bringing the chant notation elements a bit closer than otherwise\n\t    // would be normally allowed.\n\t    //\n\t    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n\t    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n\t    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n\t    this.condensingTolerance = 0.3;\n\t\n\t    // if auto color is true, then exsurge tries to automatically colorize\n\t    // some elements of the chant (directives become rubric color, etc.)\n\t    this.autoColor = true;\n\t\n\t    this.useExtraTextOnly = true;\n\t\n\t    this.noteIdPrefix = 'note-';\n\t\n\t    this.insertFontsInDoc();\n\t    this.setMergeAnnotationWithTextLeft(true);\n\t  }\n\t\n\t  /**\n\t   * convert a staff position counting from the first space below the staff (gabc notation \"c\")\n\t   * into a position counting from the middle space (variable based on how many staff lines there are)\n\t   * @param {number} staffPosition \n\t   * @returns {number}\n\t   */\n\t\n\t\n\t  _createClass(ChantContext, [{\n\t    key: \"convertStaffPositionToSymmetric\",\n\t    value: function convertStaffPositionToSymmetric(staffPosition) {\n\t      return staffPosition - this.staffLineCount;\n\t    }\n\t  }, {\n\t    key: \"convertSymmetricStaffPosition\",\n\t    value: function convertSymmetricStaffPosition(staffPositionSymmetric) {\n\t      return staffPositionSymmetric + this.staffLineCount;\n\t    }\n\t\n\t    /**\n\t     * \n\t     * @param {*} properties \n\t     * @param {string} fontFamily \n\t     * @returns {import('opentype.js').Font | undefined}\n\t     */\n\t\n\t  }, {\n\t    key: \"getFontForProperties\",\n\t    value: function getFontForProperties() {\n\t      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t      var fontFamily = arguments[1];\n\t\n\t      var key = this.getFontFilenameForProperties(properties),\n\t          keyWithFontFamily = this.getFontFilenameForProperties(properties, fontFamily);\n\t      return this.fontDictionary && (this.fontDictionary[keyWithFontFamily] || this.fontDictionary[fontFamily] || this.fontDictionary.Regular);\n\t    }\n\t\n\t    /**\n\t     * \n\t     * @param {string} font : ;\n\t     * @param {number} size \n\t     * @param {any} baseStyle \n\t     * @param {{ [key: string]: import('opentype.js').Font }} fontDictionary \n\t     */\n\t\n\t  }, {\n\t    key: \"setFont\",\n\t    value: function setFont(font) {\n\t      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n\t      var baseStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t      var fontDictionary = arguments[3];\n\t      var _iteratorNormalCompletion2 = true;\n\t      var _didIteratorError2 = false;\n\t      var _iteratorError2 = undefined;\n\t\n\t      try {\n\t        for (var _iterator2 = Object.entries(TextTypes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t          var _step2$value = _slicedToArray(_step2.value, 2),\n\t              key = _step2$value[0],\n\t              textType = _step2$value[1];\n\t\n\t          var textStyle = this.textStyles[key] = this.textStyles[key] || {};\n\t          textStyle.size = textType.defaultSize ? textType.defaultSize(size, this) : textType.size(this);\n\t          textStyle.font = font;\n\t          textStyle.color = this.textColor || \"#000\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t            _iterator2.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError2) {\n\t            throw _iteratorError2;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.baseTextStyle = baseStyle;\n\t\n\t      if (fontDictionary) {\n\t        this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n\t        this.fontDictionary = fontDictionary;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setRubricColor\",\n\t    value: function setRubricColor(color) {\n\t      this.rubricColor = color;\n\t      this.specialCharProperties.fill = color;\n\t      this.fontStyleDictionary.c.fill = color;\n\t    }\n\t  }, {\n\t    key: \"setMergeAnnotationWithTextLeft\",\n\t    value: function setMergeAnnotationWithTextLeft(merge) {\n\t      this.mergeAnnotationWithTextLeft = merge ? __mergeAnnotationWithTextLeft : undefined;\n\t    }\n\t  }, {\n\t    key: \"setScaleDefs\",\n\t    value: function setScaleDefs(scaleDefs) {\n\t      scaleDefs = !!scaleDefs;\n\t      if (this.scaleDefs !== scaleDefs) {\n\t        this.scaleDefs = scaleDefs;\n\t        this.setGlyphScaling(this.glyphScaling);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"createStyleCss\",\n\t    value: function createStyleCss() {\n\t      var style = \"\";\n\t      var _iteratorNormalCompletion3 = true;\n\t      var _didIteratorError3 = false;\n\t      var _iteratorError3 = undefined;\n\t\n\t      try {\n\t        for (var _iterator3 = Object.entries(TextTypes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t          var _step3$value = _slicedToArray(_step3.value, 2),\n\t              key = _step3$value[0],\n\t              textType = _step3$value[1];\n\t\n\t          var cssClass = textType.cssClass,\n\t              _textStyles$key = this.textStyles[key],\n\t              color = _textStyles$key.color,\n\t              font = _textStyles$key.font,\n\t              size = _textStyles$key.size;\n\t\n\t          style += \"svg.Exsurge .\" + cssClass + \"{fill:\" + color + \";font-family:\" + font + \";font-size:\" + size + \"px;font-kerning:normal}\";\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t            _iterator3.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError3) {\n\t            throw _iteratorError3;\n\t          }\n\t        }\n\t      }\n\t\n\t      return style;\n\t    }\n\t  }, {\n\t    key: \"createStyleNode\",\n\t    value: function createStyleNode() {\n\t      var node = QuickSvg.createNode(\"style\", {});\n\t      node.textContent = this.createStyleCss();\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createStyleTree\",\n\t    value: function createStyleTree() {\n\t      return { name: \"style\", props: {}, children: [this.createStyleCss()] };\n\t    }\n\t  }, {\n\t    key: \"createStyle\",\n\t    value: function createStyle() {\n\t      return \"<style>\" + this.createStyleCss() + \"</style>\";\n\t    }\n\t  }, {\n\t    key: \"updateHyphenWidth\",\n\t    value: function updateHyphenWidth() {\n\t      // measure the size of a hyphen for the lyrics\n\t      var hyphen = new Lyric(this, this.syllableConnector, LyricType.SingleSyllable);\n\t      var multiplier = this.minLyricWordSpacing / (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n\t      this.hyphenWidth = hyphen.bounds.width;\n\t\n\t      this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n\t    }\n\t  }, {\n\t    key: \"setStaffHeight\",\n\t    value: function setStaffHeight(staffHeight) {\n\t      this.setGlyphScaling(staffHeight / 600);\n\t    }\n\t  }, {\n\t    key: \"setGlyphScaling\",\n\t    value: function setGlyphScaling(glyphScaling) {\n\t      this.glyphScaling = glyphScaling;\n\t\n\t      this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\t\n\t      // setup the line weights for the various elements.\n\t      this.staffLineWeight = Math.ceil(5 * this.staffInterval / 8) / 5;\n\t      this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n\t      this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n\t      this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\t\n\t      this.intraNeumeSpacing = this.staffInterval / 2.0;\n\t\n\t      while (this.defsNode && this.defsNode.firstChild) {\n\t        this.defsNode.removeChild(this.defsNode.firstChild);\n\t      }for (var i = 0; i < this.makeDefs.length; ++i) {\n\t        this.makeDefs[i]();\n\t      }\n\t\n\t      this.updateHyphenWidth();\n\t    }\n\t  }, {\n\t    key: \"calculateHeightFromStaffPosition\",\n\t    value: function calculateHeightFromStaffPosition(staffPosition) {\n\t      return -staffPosition * this.staffInterval;\n\t    }\n\t  }, {\n\t    key: \"insertFontsInDoc\",\n\t    value: function insertFontsInDoc() {\n\t      if (!canAccessDOM) return;\n\t\n\t      var styleElement = document.getElementById(\"exsurge-fonts\");\n\t\n\t      if (styleElement === null) {\n\t        // create it since it doesn't exist yet.\n\t        styleElement = document.createElement(\"style\");\n\t        styleElement.id = \"exsurge-fonts\";\n\t\n\t        // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\t\n\t        document.head.appendChild(styleElement);\n\t      }\n\t    }\n\t\n\t    // returns the next neume starting at this.currNotationIndex, or null\n\t    // if there isn't a neume after this one...\n\t\n\t  }, {\n\t    key: \"findNextNeume\",\n\t    value: function findNextNeume() {\n\t      if (typeof this.currNotationIndex === \"undefined\") throw \"findNextNeume() called without a valid currNotationIndex set\";\n\t\n\t      for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t\n\t        if (notation.isNeume && !notation.hasNoWidth) return notation;\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }, {\n\t    key: \"makeCanvasIfNeeded\",\n\t    value: function makeCanvasIfNeeded() {\n\t      if (!this.canvas) {\n\t        this.canvas = document.createElement(\"canvas\");\n\t        this.canvasCtxt = this.canvas.getContext(\"2d\");\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setCanvasSize\",\n\t    value: function setCanvasSize(width, height) {\n\t      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\t\n\t      this.makeCanvasIfNeeded();\n\t\n\t      this.canvas.style.width = width * scale + \"px\";\n\t      this.canvas.style.height = height * scale + \"px\";\n\t      scale *= this.pixelRatio;\n\t      this.canvas.width = width * scale;\n\t      this.canvas.height = height * scale;\n\t\n\t      this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n\t    }\n\t  }]);\n\t\n\t  return ChantContext;\n\t}();\n\t\n\t/*\n\t * ChantLayoutElement\n\t */\n\t\n\t\n\tvar ChantLayoutElement = exports.ChantLayoutElement = function () {\n\t  function ChantLayoutElement() {\n\t    _classCallCheck(this, ChantLayoutElement);\n\t\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t    this.origin = new _ExsurgeCore.Point(0, 0);\n\t\n\t    this.selected = false;\n\t    this.highlighted = false;\n\t  }\n\t\n\t  // draws the element on an html5 canvas\n\t\n\t\n\t  _createClass(ChantLayoutElement, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      throw \"ChantLayout Elements must implement draw(ctxt)\";\n\t    }\n\t\n\t    // returns svg element\n\t\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n\t    }\n\t\n\t    // returns svg code for the element, used for printing support\n\t\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n\t    }\n\t  }]);\n\t\n\t  return ChantLayoutElement;\n\t}();\n\t\n\tvar DividerLineVisualizer = exports.DividerLineVisualizer = function (_ChantLayoutElement) {\n\t  _inherits(DividerLineVisualizer, _ChantLayoutElement);\n\t\n\t  function DividerLineVisualizer(ctxt, staffPosition0, staffPosition1, divider) {\n\t    _classCallCheck(this, DividerLineVisualizer);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (DividerLineVisualizer.__proto__ || Object.getPrototypeOf(DividerLineVisualizer)).call(this));\n\t\n\t    _this2.divider = divider;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    if (y0 > y1) {\n\t      var temp = y0;\n\t      y0 = y1;\n\t      y1 = temp;\n\t    }\n\t\n\t    _this2.bounds.x = 0;\n\t    _this2.bounds.y = y0;\n\t    _this2.bounds.width = ctxt.dividerLineWeight;\n\t    _this2.bounds.height = y1 - y0;\n\t\n\t    _this2.origin.x = _this2.bounds.width / 2;\n\t    _this2.origin.y = y0;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(DividerLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.dividerLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      var props = {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.dividerLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.dividerLineColor,\n\t        class: \"dividerLine\"\n\t      };\n\t      if (this.divider) {\n\t        if (this.divider.selected) props.class += \" selected\";\n\t        props[\"source-index\"] = this.divider.sourceIndex;\n\t        props[\"element-index\"] = this.divider.elementIndex;\n\t        props.source = this.divider;\n\t      }\n\t      return props;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return DividerLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar NeumeLineVisualizer = exports.NeumeLineVisualizer = function (_ChantLayoutElement2) {\n\t  _inherits(NeumeLineVisualizer, _ChantLayoutElement2);\n\t\n\t  function NeumeLineVisualizer(ctxt, note0, note1, hanging) {\n\t    _classCallCheck(this, NeumeLineVisualizer);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (NeumeLineVisualizer.__proto__ || Object.getPrototypeOf(NeumeLineVisualizer)).call(this));\n\t\n\t    var staffPosition0 = note0.staffPosition;\n\t    var staffPosition1 = note1.staffPosition;\n\t\n\t    // note0 should be the upper one for our calculations here\n\t    if (staffPosition0 < staffPosition1) {\n\t      var temp = staffPosition0;\n\t      staffPosition0 = staffPosition1;\n\t      staffPosition1 = temp;\n\t    }\n\t\n\t    if (hanging && staffPosition0 - staffPosition1 > 4) {\n\t      staffPosition1 = staffPosition0 - 4;\n\t    }\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n\t    var y1 = 0;\n\t\n\t    if (hanging) {\n\t      // if the difference between the notes is only one, and the upper\n\t      // note is on a line, and the lower note is within the four staff lines,\n\t      // then our hanging line goes past the lower note by a whole\n\t      // staff interval\n\t      if (staffPosition0 - staffPosition1 === 1 && Math.abs(staffPosition0) % 2 === 1 && staffPosition1 > -3) staffPosition1--;\n\t\n\t      y1 += ctxt.glyphPunctumHeight * ctxt.glyphScaling / 2.2;\n\t    }\n\t\n\t    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\t\n\t    _this3.bounds.x = 0;\n\t    _this3.bounds.y = y0;\n\t    _this3.bounds.width = ctxt.neumeLineWeight;\n\t    _this3.bounds.height = y1 - y0;\n\t\n\t    _this3.origin.x = 0;\n\t    _this3.origin.y = 0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(NeumeLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return NeumeLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar VirgaLineVisualizer = exports.VirgaLineVisualizer = function (_ChantLayoutElement3) {\n\t  _inherits(VirgaLineVisualizer, _ChantLayoutElement3);\n\t\n\t  function VirgaLineVisualizer(ctxt, note) {\n\t    _classCallCheck(this, VirgaLineVisualizer);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (VirgaLineVisualizer.__proto__ || Object.getPrototypeOf(VirgaLineVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n\t    var y1;\n\t\n\t    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;else y1 = y0 + ctxt.staffInterval * 2.7;\n\t\n\t    _this4.bounds.x = 0;\n\t    _this4.bounds.y = y0;\n\t    _this4.bounds.width = ctxt.neumeLineWeight;\n\t    _this4.bounds.height = y1 - y0;\n\t\n\t    _this4.origin.x = 0;\n\t    _this4.origin.y = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(VirgaLineVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return VirgaLineVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar LineaVisualizer = exports.LineaVisualizer = function (_ChantLayoutElement4) {\n\t  _inherits(LineaVisualizer, _ChantLayoutElement4);\n\t\n\t  function LineaVisualizer(ctxt, note) {\n\t    _classCallCheck(this, LineaVisualizer);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (LineaVisualizer.__proto__ || Object.getPrototypeOf(LineaVisualizer)).call(this));\n\t\n\t    var staffPosition = note.staffPosition;\n\t\n\t    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition) - note.origin.y;\n\t    var y1 = y0 + note.bounds.height;\n\t\n\t    _this5.bounds.x = 0;\n\t    _this5.bounds.y = y0;\n\t    _this5.bounds.width = ctxt.neumeLineWeight * 5 + note.bounds.width;\n\t    _this5.bounds.height = y1 - y0;\n\t\n\t    _this5.origin.x = ctxt.neumeLineWeight * 2.5;\n\t    _this5.origin.y = 0;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(LineaVisualizer, [{\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t      canvasCtxt.fillRect(this.bounds.x + this.bounds.width - ctxt.neumeLineWeight, this.bounds.y, ctxt.neumeLineWeight, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, x) {\n\t      return {\n\t        x: x,\n\t        y: this.bounds.y,\n\t        width: ctxt.neumeLineWeight,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"neumeLine\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var _this6 = this;\n\t\n\t      return QuickSvg.createNode(\"g\", null, [this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createNode(\"rect\", _this6.getSvgProps(ctxt, x));\n\t      }));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var _this7 = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", {}].concat(_toConsumableArray([this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createSvgTree(\"rect\", _this7.getSvgProps(ctxt, x));\n\t      }))));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var _this8 = this;\n\t\n\t      return QuickSvg.createFragment(\"g\", null, [this.bounds.x, this.bounds.x + this.bounds.width - ctxt.neumeLineWeight].map(function (x) {\n\t        return QuickSvg.createFragment(\"rect\", _this8.getSvgProps(ctxt, x));\n\t      }).join(''));\n\t    }\n\t  }]);\n\t\n\t  return LineaVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar GlyphVisualizer = exports.GlyphVisualizer = function (_ChantLayoutElement5) {\n\t  _inherits(GlyphVisualizer, _ChantLayoutElement5);\n\t\n\t  function GlyphVisualizer(ctxt, glyphCode) {\n\t    _classCallCheck(this, GlyphVisualizer);\n\t\n\t    var _this9 = _possibleConstructorReturn(this, (GlyphVisualizer.__proto__ || Object.getPrototypeOf(GlyphVisualizer)).call(this));\n\t\n\t    _this9.glyph = null;\n\t\n\t    _this9.setGlyph(ctxt, glyphCode);\n\t    return _this9;\n\t  }\n\t\n\t  _createClass(GlyphVisualizer, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      if (this.glyphCode !== glyphCode) {\n\t        if (typeof glyphCode === \"undefined\" || glyphCode === null || glyphCode === \"\") glyphCode = this.glyphCode = GlyphCode.None;else this.glyphCode = glyphCode;\n\t\n\t        var glyph = this.glyph = _ExsurgeGlyphs.Glyphs[glyphCode];\n\t\n\t        // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n\t        if (!ctxt.defs.hasOwnProperty(glyphCode)) {\n\t          var getDefProps = function getDefProps() {\n\t            var options = {\n\t              id: glyphCode,\n\t              class: \"glyph\"\n\t            };\n\t            if (ctxt.scaleDefs === true) {\n\t              options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t            }\n\t            return options;\n\t          };\n\t          var makeDef = function makeDef() {\n\t            var options = getDefProps();\n\t            // create the ref\n\t            ctxt.defs[glyphCode] = QuickSvg.createFragment(\"g\", options, QuickSvg.svgFragmentForGlyph(glyph));\n\t\n\t            if (ctxt.defsNode) ctxt.defsNode.appendChild(QuickSvg.createNode(\"g\", options, QuickSvg.nodesForGlyph(glyph)));\n\t          };\n\t          makeDef.makeSvgTree = function () {\n\t            return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", getDefProps()].concat(_toConsumableArray(QuickSvg.nodesForGlyph(glyph, \"createSvgTree\"))));\n\t          };\n\t          makeDef.glyphCode = glyphCode;\n\t          makeDef();\n\t          ctxt.makeDefs.push(makeDef);\n\t        }\n\t\n\t        this.align = this.glyph.align;\n\t      }\n\t\n\t      this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n\t      this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = -this.origin.y;\n\t      this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n\t      this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n\t    }\n\t  }, {\n\t    key: \"setStaffPosition\",\n\t    value: function setStaffPosition(ctxt, staffPosition) {\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      var x = this.bounds.x + this.origin.x;\n\t      var y = this.bounds.y + this.origin.y;\n\t      canvasCtxt.translate(x, y);\n\t      canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\t\n\t      for (var i = 0; i < this.glyph.paths.length; i++) {\n\t        var path = this.glyph.paths[i];\n\t        canvasCtxt.fillStyle = path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n\t        canvasCtxt.fill(new Path2D(path.data));\n\t      }\n\t\n\t      canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n\t      canvasCtxt.translate(-x, -y);\n\t    }\n\t  }, {\n\t    key: \"getSvgAttributes\",\n\t    value: function getSvgAttributes(ctxt, source) {\n\t      var className = \"\";\n\t      if (/^Porrectus\\d$/.test(this.glyphCode)) {\n\t        var notes = source.neume.notes,\n\t            noteIndex = notes.indexOf(source),\n\t            nextNote = notes[noteIndex + 1];\n\t        className = source.selected ? nextNote.selected ? \"selected\" : \"selectedA\" : nextNote.selected ? \"selectedB\" : \"\";\n\t      } else {\n\t        var isSelected = source && (source.selected || source.model && source.model.selected);\n\t        className = isSelected ? \"selected\" : \"\";\n\t      }\n\t      var result = {\n\t        \"xlink:href\": \"#\" + this.glyphCode,\n\t        class: className\n\t      };\n\t      if (source) {\n\t        result[\"source-index\"] = source.sourceIndex;\n\t        result[\"element-index\"] = source.elementIndex;\n\t        if ('noteIndex' in source) {\n\t          result.class += ' note';\n\t          result.id = ctxt.noteIdPrefix + (source.noteIndex + 1);\n\t          if (source.neume) {\n\t            var glyphCode = source.glyphVisualizer.glyphCode;\n\t            if (/^Porrectus/.test(glyphCode)) {\n\t              result.class += ' porrectus porrectus-start';\n\t            } else if (glyphCode === 'None') {\n\t              result.class += ' porrectus porrectus-end';\n\t            }\n\t          }\n\t        }\n\t      }\n\t      if (ctxt.scaleDefs === true) {\n\t        result.x = this.bounds.x + this.origin.x;\n\t        result.y = this.bounds.y + this.origin.y;\n\t      } else {\n\t        result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n\t        result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n\t        result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      attributes.source = source;\n\t      return QuickSvg.createNode(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, source) {\n\t      var attributes = this.getSvgAttributes(ctxt, source);\n\t      if (source) attributes.source = source;\n\t      return QuickSvg.createSvgTree(\"use\", attributes);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt, source) {\n\t      return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n\t    }\n\t  }]);\n\t\n\t  return GlyphVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar RoundBraceVisualizer = exports.RoundBraceVisualizer = function (_ChantLayoutElement6) {\n\t  _inherits(RoundBraceVisualizer, _ChantLayoutElement6);\n\t\n\t  function RoundBraceVisualizer(ctxt, x1, x2, y, isAbove) {\n\t    _classCallCheck(this, RoundBraceVisualizer);\n\t\n\t    var _this10 = _possibleConstructorReturn(this, (RoundBraceVisualizer.__proto__ || Object.getPrototypeOf(RoundBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this10.isAbove = isAbove;\n\t    _this10.braceHeight = 3 * ctxt.staffInterval / 2;\n\t\n\t    _this10.bounds = new _ExsurgeCore.Rect(x1, isAbove ? y - _this10.braceHeight : y, x2 - x1, _this10.braceHeight);\n\t\n\t    _this10.origin.x = 0;\n\t    _this10.origin.y = 0;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(RoundBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, dx, dy;\n\t\n\t      dx = width / 6;\n\t      dy = this.bounds.height;\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        dy = -dy;\n\t      } else {\n\t        y = this.bounds.y;\n\t      }\n\t\n\t      //Calculate Control Points of path,\n\t      var cx1 = x1 + dx;\n\t      var cy = y + dy;\n\t      var cx2 = x2 - dx;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" C \" + cx1.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + cx2.toFixed(dp) + \" \" + cy.toFixed(dp) + \" \" + x2.toFixed(dp) + \" \" + y.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return RoundBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar CurlyBraceVisualizer = exports.CurlyBraceVisualizer = function (_ChantLayoutElement7) {\n\t  _inherits(CurlyBraceVisualizer, _ChantLayoutElement7);\n\t\n\t  function CurlyBraceVisualizer(ctxt, x1, x2, y) {\n\t    var isAbove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\t    var addAcuteAccent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\t\n\t    _classCallCheck(this, CurlyBraceVisualizer);\n\t\n\t    var _this11 = _possibleConstructorReturn(this, (CurlyBraceVisualizer.__proto__ || Object.getPrototypeOf(CurlyBraceVisualizer)).call(this));\n\t\n\t    if (x1 > x2) {\n\t      // swap the xs\n\t      var temp = x1;\n\t      x1 = x2;\n\t      x2 = temp;\n\t    }\n\t\n\t    _this11.isAbove = isAbove;\n\t    _this11.braceHeight = ctxt.staffInterval / 2;\n\t\n\t    // y is the actual vertical start of the brace (left hand side)\n\t    // thus for a brace over notes, bounds.y is the bottom of brace,\n\t    // but for a brace under the notes, y is simply the y passed in.\n\t    if (isAbove) y -= _this11.braceHeight;\n\t\n\t    var bounds = new _ExsurgeCore.Rect(x1, y, x2 - x1, _this11.braceHeight);\n\t\n\t    if (addAcuteAccent && isAbove) {\n\t      _this11.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n\t      _this11.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n\t      _this11.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\t\n\t      bounds.union(_this11.accent.bounds);\n\t    }\n\t\n\t    _this11.bounds = bounds;\n\t\n\t    _this11.origin.x = 0;\n\t    _this11.origin.y = 0;\n\t    return _this11;\n\t  }\n\t\n\t  _createClass(CurlyBraceVisualizer, [{\n\t    key: \"getSvgPathProps\",\n\t    value: function getSvgPathProps(ctxt) {\n\t      return {\n\t        d: this.generatePathString(),\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.staffLineWeight + \"px\",\n\t        fill: \"none\",\n\t        class: \"brace\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        return QuickSvg.createNode(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, [node, this.accent.createSvgNode(ctxt)]);\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n\t      if (this.accent) {\n\t        return QuickSvg.createSvgTree(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, node, this.accent.createSvgTree(ctxt));\n\t      } else return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\t\n\t      if (this.accent) {\n\t        fragment += this.accent.createSvgFragment(ctxt);\n\t\n\t        return QuickSvg.createFragment(\"g\", {\n\t          class: \"accentedBrace\"\n\t        }, fragment);\n\t      } else return fragment;\n\t    }\n\t\n\t    // code below inspired by: https://gist.github.com/alexhornbake\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path d string\n\t\n\t  }, {\n\t    key: \"generatePathString\",\n\t    value: function generatePathString() {\n\t      var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\t\n\t      var x1 = this.bounds.x;\n\t      var x2 = this.bounds.right();\n\t      var width = this.bounds.width;\n\t      var y, h;\n\t\n\t      if (this.isAbove) {\n\t        y = this.bounds.bottom();\n\t        h = -this.braceHeight;\n\t      } else {\n\t        y = this.bounds.y;\n\t        h = this.braceHeight;\n\t      }\n\t\n\t      // calculate Control Points of path\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * width;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * width;\n\t      var ty1 = y + h;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * width;\n\t      var qy4 = y + (1 - q) * h;\n\t\n\t      // two decimal points should be enough, but if we need more precision, we can\n\t      // up it here.\n\t      var dp = 2;\n\t      return \"M \" + x1.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x1.toFixed(dp) + \" \" + qy1.toFixed(dp) + \" \" + qx2.toFixed(dp) + \" \" + qy2.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp) + \" M \" + x2.toFixed(dp) + \" \" + y.toFixed(dp) + \" Q \" + x2.toFixed(dp) + \" \" + qy3.toFixed(dp) + \" \" + qx4.toFixed(dp) + \" \" + qy4.toFixed(dp) + \" T \" + tx1.toFixed(dp) + \" \" + ty1.toFixed(dp);\n\t    }\n\t  }]);\n\t\n\t  return CurlyBraceVisualizer;\n\t}(ChantLayoutElement);\n\t\n\tvar TextSpan = exports.TextSpan = function () {\n\t  function TextSpan(text, propertyArray, activeTags) {\n\t    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\t    var extraProps = arguments[4];\n\t\n\t    _classCallCheck(this, TextSpan);\n\t\n\t    if (typeof propertyArray === \"undefined\" || propertyArray === null) propertyArray = [];\n\t\n\t    this.text = text;\n\t    this.propertyArray = propertyArray;\n\t    this.activeTags = activeTags || [];\n\t    this.index = index;\n\t    if (extraProps) {\n\t      if ('xOffset' in extraProps) this.xOffset = extraProps.xOffset;\n\t      if ('newLine' in extraProps) this.newLine = extraProps.newLine;\n\t    }\n\t  }\n\t\n\t  _createClass(TextSpan, [{\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      var result = new TextSpan(this.text, this.propertyArray, this.activeTags, this.index);\n\t      if ('xOffset' in this) result.xOffset = this.xOffset;\n\t      if ('newLine' in this) result.newLine = this.newLine;\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"properties\",\n\t    get: function get() {\n\t      var result = Object.assign.apply(null, [{}].concat(this.propertyArray).concat());\n\t      if ('xOffset' in this) result.xOffset = this.xOffset;\n\t      if ('newLine' in this) result.newLine = this.newLine;\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return TextSpan;\n\t}();\n\t\n\tvar MarkupStackFrame = function () {\n\t  function MarkupStackFrame(tagName, startIndex) {\n\t    var propertyArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\t    var symbol = arguments[3];\n\t\n\t    _classCallCheck(this, MarkupStackFrame);\n\t\n\t    this.tagName = tagName;\n\t    this.startIndex = startIndex;\n\t    this.propertyArray = propertyArray;\n\t    if (symbol) this.symbol = symbol;\n\t  }\n\t\n\t  _createClass(MarkupStackFrame, [{\n\t    key: \"properties\",\n\t    get: function get() {\n\t      return Object.assign.apply(null, [{}].concat(this.propertyArray));\n\t    }\n\t  }], [{\n\t    key: \"createStackFrame\",\n\t    value: function createStackFrame(ctxt, tagName, startIndex) {\n\t      var extraProperties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\t      var symbol = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n\t\n\t      return new MarkupStackFrame(tagName, startIndex, [ctxt.fontStyleDictionary[tagName], extraProperties], symbol);\n\t    }\n\t  }]);\n\t\n\t  return MarkupStackFrame;\n\t}();\n\t\n\t// for escaping html strings before they go into the svgs\n\t// adapted from http://stackoverflow.com/a/12034334/5720160\n\t\n\t\n\tvar __subsForTspans = {\n\t  \"&\": \"&amp;\",\n\t  \"<\": \"&lt;\",\n\t  \">\": \"&gt;\"\n\t};\n\t\n\tvar TextElement = exports.TextElement = function (_ChantLayoutElement8) {\n\t  _inherits(TextElement, _ChantLayoutElement8);\n\t\n\t  function TextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TextElement);\n\t\n\t    // set these to some sane values for now...\n\t    var _this12 = _possibleConstructorReturn(this, (TextElement.__proto__ || Object.getPrototypeOf(TextElement)).call(this));\n\t\n\t    _this12.bounds.x = 0;\n\t    _this12.bounds.y = 0;\n\t    _this12.bounds.width = 0;\n\t    _this12.bounds.height = 0;\n\t    _this12.origin.x = 0;\n\t    _this12.origin.y = 0;\n\t\n\t    _this12.fontFamily = fontFamily;\n\t    _this12.fontSize = fontSize;\n\t    _this12.textAnchor = textAnchor;\n\t    _this12.sourceIndex = sourceIndex;\n\t    _this12.sourceGabc = sourceGabc;\n\t    _this12.dominantBaseline = \"baseline\"; // default placement\n\t\n\t    _this12.generateSpansFromText(ctxt, text);\n\t\n\t    _this12.recalculateMetrics(ctxt);\n\t    return _this12;\n\t  }\n\t\n\t  _createClass(TextElement, [{\n\t    key: \"getFromScore\",\n\t    value: function getFromScore(score) {\n\t      return this.textType.getFromScore(score, this);\n\t    }\n\t  }, {\n\t    key: \"generateSpansFromText\",\n\t    value: function generateSpansFromText(ctxt, text) {\n\t      var _this13 = this;\n\t\n\t      text = text.replace(/\\s+/g, \" \");\n\t      this.text = \"\";\n\t      this.spans = [];\n\t\n\t      // save ourselves a lot of grief for a very common text:\n\t      if (text === \"*\" || text === \"+\" || text === \"†\") {\n\t        var properties = text === \"*\" ? [ctxt.asteriskProperties] : text === \"+\" ? [ctxt.plusProperties] : null;\n\t        text = ctxt.specialCharText(text) || text;\n\t        this.spans.push(new TextSpan(text, properties));\n\t        return;\n\t      }\n\t\n\t      var markupStack = [];\n\t      var spanStartIndex = 0;\n\t      var newLineInNextSpan = 0;\n\t\n\t      var filterFrames = function filterFrames(frame, symbol) {\n\t        return frame.Symbol === symbol;\n\t      };\n\t\n\t      var closeSpan = function closeSpan(spanText, index, extraProperties) {\n\t        if (spanText === \"\" && !_this13.dropCap) return;\n\t\n\t        _this13.text += spanText;\n\t\n\t        var properties = [];\n\t        for (var i = 0; i < markupStack.length; i++) {\n\t          properties.push.apply(properties, markupStack[i].propertyArray);\n\t        }\n\t\n\t        if (extraProperties) properties.push(extraProperties);\n\t        var span = new TextSpan(spanText, properties, markupStack.map(function (frame) {\n\t          return frame.tagName;\n\t        }), index);\n\t        _this13.spans.push(span);\n\t        if (newLineInNextSpan) {\n\t          span.newLine = newLineInNextSpan;\n\t          newLineInNextSpan = 0;\n\t        }\n\t      };\n\t\n\t      var markupRegex = /(<br\\/?>)|<v>([\\s\\S]*?)(?:<\\/v>|$)|(\\*)(?=\\s*\\*|[^*]*(?:$|<v>))|(\\+)|<sp>(?:(~)|(')?([ao]e|[æœaeiouy])|([arv])\\/)<\\/sp>|([arv])\\/\\.|([℣℟])\\.?|(?:([*_^%])|<(\\/)?([bceiuv]|ul|sc|font)(?:\\s+(?:family=\"([^\"]+)\"|fill=\"([^\"]+)\"|class=\"([^\"]+)\"))*>)(?=(?:(.+?)(?:\\11|<\\/\\13>))?)/gi;\n\t      var vTagRegex = /(\\\\grecross)|\\{greextra\\}\\{([^}]*)\\}/g;\n\t      var match = null;\n\t      var openedAsterisk = false;\n\t      var closeCurrentSpan = function closeCurrentSpan() {\n\t        return closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n\t      };\n\t      while (match = markupRegex.exec(text)) {\n\t        var _match = match,\n\t            _match2 = _slicedToArray(_match, 18),\n\t            newLine = _match2[1],\n\t            vTag = _match2[2],\n\t            asterisk = _match2[3],\n\t            plus = _match2[4],\n\t            tilde = _match2[5],\n\t            accent = _match2[6],\n\t            vowelLigature = _match2[7],\n\t            specialChar = _match2[8],\n\t            specialChar2 = _match2[9],\n\t            specialChar3 = _match2[10],\n\t            markupSymbol = _match2[11],\n\t            closingTag = _match2[12],\n\t            tagName = _match2[13],\n\t            family = _match2[14],\n\t            fill = _match2[15],\n\t            cssClass = _match2[16],\n\t            enclosedText = _match2[17];\n\t\n\t        specialChar = specialChar || specialChar2 || specialChar3;\n\t        // non-matching symbols first\n\t        if (newLine) {\n\t          // close the current span, if any:\n\t          if (match.index > spanStartIndex) {\n\t            closeCurrentSpan();\n\t          }\n\t          // add the newline span:\n\t          newLineInNextSpan++;\n\t        } else if (vTag) {\n\t          closeCurrentSpan();\n\t          var vMatch = void 0;\n\t          var lastIndex = 0;\n\t          var iOffset = 0;\n\t          while (vMatch = vTagRegex.exec(vTag)) {\n\t            if (lastIndex < vMatch.index) {\n\t              closeSpan(vTag.slice(lastIndex, vMatch.index), match.index + lastIndex + iOffset);\n\t              iOffset = 3; // length of '<v>'\n\t            }\n\t\n\t            var _vMatch = vMatch,\n\t                _vMatch2 = _slicedToArray(_vMatch, 3),\n\t                grecross = _vMatch2[1],\n\t                greextra = _vMatch2[2];\n\t\n\t            if (grecross) {\n\t              // grecross is just the command for the Cross:\n\t              // set up greextra so it will get handled with it below:\n\t              greextra = 'Cross';\n\t            }\n\t            var char = _greextraGlyphs.greextraGlyphs[greextra];\n\t            if (char) {\n\t              closeSpan(char, match.index + vMatch.index + iOffset, { 'font-family': 'greextra' });\n\t            }\n\t            lastIndex = vTagRegex.lastIndex;\n\t            iOffset = 3; // length of '<v>'\n\t          }\n\t          if (lastIndex < vTag.length) {\n\t            closeSpan(vTag.slice(lastIndex), match.index + lastIndex + iOffset);\n\t          }\n\t        } else if (asterisk) {\n\t          closeCurrentSpan();\n\t          // first check if it is just a symbol to close:\n\t          if (markupStack.length > 0 && markupStack[markupStack.length - 1].symbol === asterisk) {\n\t            // close asterisk tag\n\t            markupStack.pop();\n\t          } else {\n\t            // add special asterisk:\n\t            closeSpan(ctxt.specialCharText(asterisk) || '*', match.index, ctxt.asteriskProperties);\n\t          }\n\t        } else if (plus) {\n\t          closeCurrentSpan();\n\t          closeSpan(ctxt.specialCharText(plus) || '+', match.index, ctxt.plusProperties);\n\t        } else if (tilde) {\n\t          closeCurrentSpan();\n\t          closeSpan('∼', match.index);\n\t        } else if (vowelLigature) {\n\t          var vowel = (0, _makeLigature.makeLigature)(vowelLigature);\n\t          if (accent) vowel = (0, _addAccent.addAccent)(vowel);\n\t          closeCurrentSpan();\n\t          closeSpan(vowel, match.index);\n\t        } else if (specialChar) {\n\t          closeCurrentSpan();\n\t          closeSpan(ctxt.textBeforeSpecialChar + ctxt.specialCharText(specialChar) + ctxt.textAfterSpecialChar, match.index, ctxt.specialCharProperties);\n\t        } else {\n\t          // otherwise we're dealing with matching markup delimeters\n\t          if (markupSymbol === \"*\") {\n\t            // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n\t            if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n\t              openedAsterisk = true;\n\t            } else if (openedAsterisk) {\n\t              openedAsterisk = false;\n\t            } else {\n\t              // actually use the asterisk, since it doesn't have a matching closing asterisk\n\t              continue;\n\t            }\n\t          }\n\t          if (markupSymbol) {\n\t            tagName = ctxt.markupSymbolDictionary[markupSymbol];\n\t            if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName && markupStack[markupStack.length - 1].symbol === markupSymbol) {\n\t              closingTag = true;\n\t            }\n\t          }\n\t          if (markupStack.length > 0 && markupStack[markupStack.length - 1].tagName === tagName) {\n\t            if (closingTag) {\n\t              // group close\n\t              closeCurrentSpan();\n\t              markupStack.pop();\n\t            }\n\t          } else if (markupStack.filter(filterFrames).length > 0) {\n\t            // trying to open a recursive group (or forgot to close a previous group)\n\t            // in either case, we just unwind to the previous stack frame\n\t            spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n\t            markupStack.pop();\n\t            continue;\n\t          } else {\n\t            closeCurrentSpan();\n\t            if (closingTag) {\n\t              // out of order group close:\n\t              var index = markupStack.findIndex(function (frame) {\n\t                return frame.tagName === tagName;\n\t              });\n\t              if (index >= 0) {\n\t                markupStack.splice(index, 1);\n\t              }\n\t            } else {\n\t              // group open\n\t              var extraProperties = {};\n\t              if (family) extraProperties['font-family'] = family;\n\t              if (fill) extraProperties.fill = fill;\n\t              if (cssClass) extraProperties.class = cssClass;\n\t              markupStack.push(MarkupStackFrame.createStackFrame(ctxt, tagName, match.index, extraProperties, markupSymbol));\n\t            }\n\t          }\n\t        }\n\t\n\t        // advance the start index past the current markup\n\t        spanStartIndex = match.index + match[0].length;\n\t      }\n\t\n\t      // if we finished matches, and there is still some text left,\n\t      // or if we haven't generated any spans yet, create one final run\n\t      if (spanStartIndex < text.length || this.spans.length === 0) closeSpan(text.slice(spanStartIndex), spanStartIndex);\n\t    }\n\t  }, {\n\t    key: \"getCanvasFontForProperties\",\n\t    value: function getCanvasFontForProperties(ctxt) {\n\t      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var font = \"\";\n\t      if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n\t      if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n\t      if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n\t      var fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n\t      if (/%$/.test(properties[\"font-size\"])) {\n\t        fontSize *= this.fontSize(ctxt) / 100;\n\t      }\n\t      font += fontSize * (this.resize || 1) + \"px \";\n\t      font += properties[\"font-family\"] || this.fontFamily(ctxt);\n\t      return font;\n\t    }\n\t  }, {\n\t    key: \"measureSubstringBBox\",\n\t    value: function measureSubstringBBox(ctxt, length) {\n\t      return this.measureSubstring(ctxt, length, true);\n\t    }\n\t\n\t    /**\n\t     * if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n\t     * \n\t     * @param {ChantContext} ctxt \n\t     * @param {number} length \n\t     * @param {boolean} returnBBox \n\t     * @returns measured substring, as a simple width unless returnBBox == true\n\t     */\n\t\n\t  }, {\n\t    key: \"measureSubstring\",\n\t    value: function measureSubstring(ctxt, length) {\n\t      var returnBBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      if (length === 0) return 0;\n\t      if (!length) length = Infinity;\n\t      if (length < 0) {\n\t        var lines = -length;\n\t        length = Infinity;\n\t      }\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      var width = 0;\n\t      var widths = [];\n\t      var newLineSpans = [this.spans[0]];\n\t      var subStringLength = 0;\n\t      var numLines = 1;\n\t      var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n\t      var bbox = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i],\n\t            myText = span.text.slice(0, length - subStringLength);\n\t        if (span.newLine) {\n\t          numLines += parseInt(span.newLine) || 1;\n\t          if (!lines && this.rightAligned === true && length === Infinity) {\n\t            newLineSpans[newLineSpans.length - 1].xOffset = this.firstLineMaxWidth - width;\n\t            newLineSpans.push(span);\n\t          } else if (--lines === 0) break;\n\t          widths.push(width);\n\t          width = 0;\n\t        }\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n\t          canvasCtxt.font = this.getCanvasFontForProperties(ctxt, span.properties);\n\t          var metrics = canvasCtxt.measureText(myText, width, fontSize * (numLines - 1));\n\t          if (\"actualBoundingBoxAscent\" in metrics) {\n\t            var left = metrics.actualBoundingBoxLeft;\n\t            bbox.union(new _ExsurgeCore.Rect(width - left, fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent, metrics.width + left, metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent));\n\t            if (this instanceof DropCap) {\n\t              width += Math.max(0, left);\n\t            }\n\t          } else {\n\t            bbox.union(new _ExsurgeCore.Rect(width, fontSize * (numLines - 2), metrics.width, fontSize));\n\t          }\n\t          width += metrics.width;\n\t        } else if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS && ctxt.fontDictionary) {\n\t          // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n\t          var font = ctxt.getFontForProperties(span.properties, span.properties[\"font-family\"] || this.fontFamily(ctxt));\n\t          /**\n\t           * @type {{ features: { liga: boolean; smcp?: boolean; } }}\n\t           */\n\t          var options = { features: { liga: true } };\n\t          if (span.properties[\"font-variant\"] === \"small-caps\") {\n\t            options.features.smcp = true;\n\t          }\n\t          var spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n\t          if (/%$/.test(span.properties[\"font-size\"])) {\n\t            spanFontSize *= fontSize / 100;\n\t          }\n\t          var subBbox = font.getPath(myText, width, fontSize * (numLines - 1), spanFontSize, options).getBoundingBox();\n\t          var subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\t\n\t          bbox.union(new _ExsurgeCore.Rect(width + subBbox.x1, subBbox.y1, subWidth - subBbox.x1, subBbox.y2 - subBbox.y1));\n\t          width += subWidth;\n\t          if (this instanceof DropCap) {\n\t            width -= subBbox.x1;\n\t          }\n\t        }\n\t        subStringLength += myText.length;\n\t        if (subStringLength === length) break;\n\t      }\n\t      if (!lines && width && newLineSpans.length && this.rightAligned === true && length === Infinity) {\n\t        newLineSpans[newLineSpans.length - 1].xOffset = this.firstLineMaxWidth - width;\n\t      }\n\t      width = Math.max.apply(Math, [width].concat(widths));\n\t      if (returnBBox === true) {\n\t        var height = bbox.height;\n\t        var y = bbox.y,\n\t            x = bbox.x;\n\t        return { width: width, height: height, x: x, y: y };\n\t      } else {\n\t        return width;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      if (resetNewLines) {\n\t        delete this.maxWidth;\n\t        delete this.firstLineMaxWidth;\n\t        delete this.rightAligned;\n\t        delete this.resize;\n\t        delete this.numLines;\n\t        // replace newlines with spaces\n\t        this.spans.forEach(function (span) {\n\t          delete span.xOffset;\n\t          if (span.newLine === true) {\n\t            delete span.newLine;\n\t            span.text = \" \" + span.text;\n\t          }\n\t        });\n\t      }\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = 0;\n\t\n\t      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t        while (ctxt.svgTextMeasurer.firstChild) {\n\t          ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n\t        }ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n\t        ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\t\n\t        var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n\t        this.bounds.width = bbox.width;\n\t        this.bounds.height = bbox.height;\n\t        this.origin.y = -bbox.y; // offset to baseline from top\n\t        this.origin.x = -bbox.x;\n\t      } else {\n\t        var _bbox = this.measureSubstringBBox(ctxt);\n\t        this.bounds.width = _bbox.width;\n\t        this.bounds.height = _bbox.height;\n\t        this.origin.y = -_bbox.y;\n\t        this.origin.x = -_bbox.x;\n\t      }\n\t      this.numLines = this.spans.reduce(function (result, span) {\n\t        return result + (span.newLine ? parseInt(span.newLine) || 1 : 0);\n\t      }, 1);\n\t    }\n\t  }, {\n\t    key: \"setMaxWidth\",\n\t    value: function setMaxWidth(ctxt, maxWidth) {\n\t      var firstLineMaxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxWidth;\n\t\n\t      if (this.spans.filter(function (s) {\n\t        return s.newLine === true;\n\t      }).length) {\n\t        // first get rid of any new lines set from a previous maxWidth\n\t        this.recalculateMetrics(ctxt);\n\t      }\n\t      if (this.bounds.width > maxWidth) {\n\t        this.maxWidth = maxWidth;\n\t        var percentage = maxWidth / this.bounds.width;\n\t        if (this instanceof Lyric && percentage >= 0.85) {\n\t          this.resize = percentage;\n\t        } else {\n\t          if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n\t          this.firstLineMaxWidth = firstLineMaxWidth;\n\t          var lastWidth = 0,\n\t              lastMatch = null,\n\t              regex = /\\s+|$/g,\n\t              max = firstLineMaxWidth,\n\t              match;\n\t          while ((match = regex.exec(this.text)) && (!lastMatch || match.index > lastMatch.index)) {\n\t            var width = this.measureSubstring(ctxt, match.index);\n\t            if (width > max && lastMatch) {\n\t              var _spans;\n\t\n\t              var spanIndex = 0,\n\t                  length = 0;\n\t              while (length < lastMatch.index && spanIndex < this.spans.length) {\n\t                var span = this.spans[spanIndex++];\n\t                length += span.text.length + (span.newLine ? 1 : 0);\n\t              }\n\t              if (length > lastMatch.index || spanIndex >= this.spans.length) {\n\t                var _span = this.spans[--spanIndex];\n\t                length -= _span.text.length;\n\t              }\n\t              var splitSpan = this.spans[spanIndex],\n\t                  textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n\t                  textRight = splitSpan.text.slice(lastMatch.index + lastMatch[0].length - length),\n\t                  newSpans = [];\n\t              this.rightAligned = max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n\t              if (textLeft) newSpans.push(new TextSpan(textLeft, splitSpan.propertyArray, splitSpan.activeTags));\n\t              if (textRight) {\n\t                newSpans.push(new TextSpan(textRight, splitSpan.propertyArray, splitSpan.activeTags, undefined, { newLine: true }));\n\t              } else if (this.spans[spanIndex + 1]) {\n\t                this.spans[spanIndex + 1].newLine = true;\n\t              }\n\t              (_spans = this.spans).splice.apply(_spans, [spanIndex, 1].concat(newSpans));\n\t              this.needsLayout = true;\n\t              max = maxWidth;\n\t              if (match.index === this.text.length || this.measureSubstring(ctxt) <= maxWidth) break;\n\t              width = 0;\n\t              match = lastMatch = null;\n\t            }\n\t            lastWidth = width;\n\t            lastMatch = match;\n\t          }\n\t        }\n\t        this.recalculateMetrics(ctxt, false);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.textType && this.textType.cssClass || \"\";\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      return ctxt.baseTextStyle || {};\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";else canvasCtxt.textAlign = \"start\";\n\t\n\t      var translateWidth = 0,\n\t          translateHeight = 0;\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var xOffset = span.xOffset || 0;\n\t        if (span.newLine) {\n\t          var count = parseInt(span.newLine) || 1;\n\t          canvasCtxt.translate(translateWidth + xOffset, this.fontSize(ctxt) * count);\n\t          translateWidth = -xOffset;\n\t          translateHeight -= this.fontSize(ctxt);\n\t        } else if (xOffset) {\n\t          canvasCtxt.translate(translateWidth + xOffset, 0);\n\t          translateWidth = -xOffset;\n\t        }\n\t        var properties = Object.assign({}, this.getExtraStyleProperties(ctxt), span.properties);\n\t        canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n\t        canvasCtxt.fillStyle = properties.fill || \"#000\";\n\t        canvasCtxt.fillText(span.text, this.bounds.x, this.bounds.y, span.textLength || undefined);\n\t        var metrics = canvasCtxt.measureText(span.text, this.bounds.x, this.bounds.y);\n\t        translateWidth -= metrics.width;\n\t        canvasCtxt.translate(metrics.width, 0);\n\t      }\n\t      canvasCtxt.translate(translateWidth, translateHeight);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        \"source-index\": this.sourceIndex,\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        class: this.getCssClasses().trim(),\n\t        \"text-anchor\": this.textAnchor\n\t        //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n\t      };\n\t    }\n\t  }, {\n\t    key: \"getSpanOptions\",\n\t    value: function getSpanOptions(span, ctxt) {\n\t      var useStyleObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\n\t      var options = {\n\t        \"source-index\": span.index,\n\t        class: span.properties.class,\n\t        style: useStyleObject ? Object.assign({}, span.properties) : (0, _ExsurgeCore.getCssForProperties)(span.properties)\n\t      };\n\t\n\t      if (span.newLine) {\n\t        var xOffset = span.xOffset || 0;\n\t        options.dy = 1.1 * (parseInt(span.newLine) || 1) + \"em\";\n\t        options.x = this.bounds.x + xOffset;\n\t      } else if (span.xOffset) {\n\t        options.x = this.bounds.x + span.xOffset;\n\t      }\n\t      if (span.textLength) {\n\t        options.textLength = span.textLength;\n\t        options.lengthAdjust = \"spacingAndGlyphs\";\n\t        options.y = this.bounds.y;\n\t      }\n\t      if (this.resize) {\n\t        options[\"font-size\"] = span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n\t      }\n\t      // if (ctxt.setFontFamilyAttributes) {\n\t      //   options[\"font-family\"] =\n\t      //     span.properties[\"font-family\"] ||\n\t      //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n\t      //   let properties = Object.assign({}, span.properties);\n\t      //   delete properties[\"font-weight\"];\n\t      //   delete properties[\"font-style\"];\n\t      //   options[\"style\"] = getCssForProperties(properties);\n\t      // } else {\n\t      //   options[\"style\"] = getCssForProperties(span.properties);\n\t      // }\n\t\n\t      return options;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options = this.getSpanOptions(span, ctxt);\n\t\n\t        spans.push(QuickSvg.createNode(\"tspan\", _options, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      var extraStyleProperties = this.getExtraStyleProperties(ctxt);\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(extraStyleProperties);\n\t      if (extraStyleProperties.class) {\n\t        options.class = extraStyleProperties.class + ' ' + options.class;\n\t      }\n\t      options.source = this;\n\t\n\t      return this.svgNode = QuickSvg.createNode(\"text\", options, spans);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var spans = [];\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options2 = this.getSpanOptions(span, ctxt, true);\n\t\n\t        spans.push(QuickSvg.createSvgTree(\"tspan\", _options2, span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      options.style = this.getExtraStyleProperties(ctxt);\n\t      if (options.style.class) {\n\t        options.class = options.style.class + ' ' + options.class;\n\t      }\n\t      options.source = this;\n\t\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"text\", options].concat(spans));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var spans = \"\";\n\t\n\t      for (var i = 0; i < this.spans.length; i++) {\n\t        var span = this.spans[i];\n\t        var _options3 = this.getSpanOptions(span, ctxt);\n\t\n\t        spans += QuickSvg.createFragment(\"tspan\", _options3, TextElement.escapeForTspan(span.text));\n\t      }\n\t\n\t      var options = this.getSvgProps();\n\t      var extraStyleProperties = this.getExtraStyleProperties(ctxt);\n\t      options.style = (0, _ExsurgeCore.getCssForProperties)(extraStyleProperties);\n\t      if (extraStyleProperties.class) {\n\t        options.class = extraStyleProperties.class + ' ' + options.class;\n\t      }\n\t      if (ctxt.setFontFamilyAttributes) {\n\t        options[\"font-size\"] = this.fontSize(ctxt);\n\t      }\n\t\n\t      return QuickSvg.createFragment(\"text\", options, spans);\n\t    }\n\t  }], [{\n\t    key: \"escapeForTspan\",\n\t    value: function escapeForTspan(string) {\n\t      return String(string).replace(/[&<>]/g, function (s) {\n\t        return __subsForTspans[s];\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return TextElement;\n\t}(ChantLayoutElement);\n\t\n\tvar LyricType = exports.LyricType = {\n\t  SingleSyllable: 0,\n\t  BeginningSyllable: 1,\n\t  MiddleSyllable: 2,\n\t  EndingSyllable: 3,\n\t\n\t  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n\t};\n\t\n\tvar LyricArray = exports.LyricArray = {\n\t  getLeft: function getLeft(lyricArray) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MAX_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      if (lyricArray[i]) x = Math.min(x, lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x);\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  getRight: function getRight(lyricArray, presumeConnectorNeeded) {\n\t    if (lyricArray.length === 0) return NaN;\n\t\n\t    var x = Number.MIN_VALUE;\n\t    for (var i = 0; i < lyricArray.length; i++) {\n\t      var l = lyricArray[i];\n\t      if (l) x = Math.max(x, l.notation.bounds.x + l.bounds.x + l.bounds.width + (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector ? l.getConnectorWidth() : 0));\n\t    }\n\t\n\t    return x;\n\t  },\n\t\n\t  hasOnlyOneLyric: function hasOnlyOneLyric(lyricArray) {\n\t    return lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    }).length === 1;\n\t  },\n\t\n\t  indexOfLyric: function indexOfLyric(lyricArray) {\n\t    return lyricArray.indexOf(lyricArray.filter(function (l) {\n\t      return l.originalText;\n\t    })[0]);\n\t  },\n\t\n\t  mergeIn: function mergeIn(lyricArray, newLyrics) {\n\t    for (var i = 0; i < newLyrics.length; ++i) {\n\t      if (newLyrics[i].originalText || !lyricArray[i]) lyricArray[i] = newLyrics[i];\n\t    }\n\t  },\n\t\n\t  mergeInArray: function mergeInArray(lyricArray, notations) {\n\t    for (var i = 0; i < notations.length; ++i) {\n\t      this.mergeIn(lyricArray, notations[i].lyrics);\n\t    }\n\t  },\n\t\n\t  setNotation: function setNotation(lyricArray, notation) {\n\t    notation.lyrics = lyricArray;\n\t    for (var i = 0; i < lyricArray.length; ++i) {\n\t      lyricArray[i].notation = notation;\n\t    }\n\t  }\n\t};\n\t\n\tvar Lyric = exports.Lyric = function (_TextElement) {\n\t  _inherits(Lyric, _TextElement);\n\t\n\t  function Lyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t    _classCallCheck(this, Lyric);\n\t\n\t    var _this14 = _possibleConstructorReturn(this, (Lyric.__proto__ || Object.getPrototypeOf(Lyric)).call(this, ctxt, (ctxt.textStyles.lyric.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.lyric.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.lyric.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this14.textType = TextTypes.lyric;\n\t\n\t    // save the original text in case we need to later use the lyric\n\t    // in a dropcap...\n\t    _this14.originalText = text;\n\t\n\t    _this14.notation = notation;\n\t    _this14.notations = notations;\n\t\n\t    if (typeof lyricType === \"undefined\" || lyricType === null || lyricType === \"\") _this14.lyricType = LyricType.SingleSyllable;else _this14.lyricType = lyricType;\n\t\n\t    // Lyrics keep track of how to center them on notation elements.\n\t    // centerTextIndex is the index in this.text where the centering starts,\n\t    // centerLength is how many characters comprise the center point.\n\t    // performLayout will do the processing\n\t    _this14.centerStartIndex = -1;\n\t    _this14.centerLength = text.length;\n\t\n\t    _this14.needsConnector = false;\n\t\n\t    // Lyrics can have their own language defined, which affects the alignment\n\t    // of the text with the notation element\n\t    _this14.language = null;\n\t\n\t    if (_this14.allowsConnector) _this14.connectorSpan = new TextSpan(ctxt.syllableConnector);\n\t    return _this14;\n\t  }\n\t\n\t  _createClass(Lyric, [{\n\t    key: \"allowsConnector\",\n\t    value: function allowsConnector() {\n\t      return this.lyricType === LyricType.BeginningSyllable || this.lyricType === LyricType.MiddleSyllable;\n\t    }\n\t  }, {\n\t    key: \"setForceConnector\",\n\t    value: function setForceConnector(force) {\n\t      this.forceConnector = force && this.allowsConnector();\n\t    }\n\t  }, {\n\t    key: \"setNeedsConnector\",\n\t    value: function setNeedsConnector(needs, width) {\n\t      if (needs === true || this.forceConnector) {\n\t        this.needsConnector = true;\n\t        if (typeof width !== \"undefined\") {\n\t          this.setConnectorWidth(width);\n\t        } else {\n\t          this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t        }\n\t\n\t        if (this.spans.length > 0 && this.spans[this.spans.length - 1] !== this.connectorSpan) this.spans.push(this.connectorSpan);\n\t      } else {\n\t        this.connectorWidth = 0;\n\t        this.needsConnector = false;\n\t        this.bounds.width = this.widthWithoutConnector;\n\t\n\t        var span = this.spans.pop();\n\t        if (span && span !== this.connectorSpan) this.spans.push(span);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"setConnectorWidth\",\n\t    value: function setConnectorWidth(width) {\n\t      this.connectorWidth = width;\n\t      this.connectorSpan.textLength = width;\n\t      if (this.needsConnector) this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n\t    }\n\t  }, {\n\t    key: \"getConnectorWidth\",\n\t    value: function getConnectorWidth() {\n\t      return this.connectorWidth || this.defaultConnectorWidth;\n\t    }\n\t  }, {\n\t    key: \"getLeft\",\n\t    value: function getLeft() {\n\t      return this.notation.bounds.x + this.bounds.x;\n\t    }\n\t  }, {\n\t    key: \"getRight\",\n\t    value: function getRight() {\n\t      return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      var resetNewLines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      this.setNeedsConnector();\n\t\n\t      _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"recalculateMetrics\", this).call(this, ctxt, resetNewLines);\n\t\n\t      this.widthWithoutConnector = this.bounds.width;\n\t\n\t      this.connectorWidth = 0;\n\t      this.defaultConnectorWidth = ctxt.hyphenWidth;\n\t\n\t      var activeLanguage = this.language || ctxt.defaultLanguage;\n\t\n\t      // calculate the point where the text lines up to the staff notation\n\t      // and offset the rect that much. By default we just center the text,\n\t      // but the logic below allows for smarter lyric alignment based\n\t      // on manual override or language control.\n\t      var offset = this.widthWithoutConnector / 2,\n\t          x1,\n\t          x2,\n\t          vowelSegmentWidth = this.widthWithoutConnector;\n\t\n\t      // some simple checks for sanity, and disable manual centering if the numbers are bad\n\t      if (this.centerStartIndex >= 0 && (this.centerStartIndex >= this.text.length || this.centerLength < 0 || this.centerStartIndex + this.centerLength > this.text.length)) this.centerStartIndex = -1;\n\t\n\t      if (this.text.length === 0) {\n\t        // if we have no text to work with, then there's nothing to do!\n\t        // Unless it's a drop cap, in which case we center the connector:\n\t        if (this.dropCap && this.originalText) {\n\t          offset = ctxt.hyphenWidth / 2;\n\t          vowelSegmentWidth = ctxt.hyphenWidth;\n\t        }\n\t      } else if (this.centerStartIndex >= 0) {\n\t        // if we have manually overriden the centering logic for this lyric,\n\t        // then always use that.\n\t        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t          // svgTextMeasurer still has the current lyric in it...\n\t          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex);\n\t          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, this.centerStartIndex + this.centerLength);\n\t        } else {\n\t          x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n\t          x2 = this.measureSubstring(ctxt, this.centerStartIndex + this.centerLength);\n\t        }\n\t        offset = (x1 + x2) / 2;\n\t        vowelSegmentWidth = x2 - x1;\n\t      } else {\n\t        // if it's a directive with no manual centering override, then\n\t        // just center the text.\n\t        if (this.lyricType !== LyricType.Directive) {\n\t          // only consider text content after the last space (if any)\n\t          var startIndex = this.text.lastIndexOf(\" \") + 1;\n\t\n\t          // unless there are no text characters following the space:\n\t          if (startIndex > 0 && !this.text.slice(startIndex).match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)) {\n\t            startIndex = 0;\n\t          }\n\t\n\t          // find indices of e tags to ignore when finding vowel segment:\n\t          var ignore = [];\n\t          var index = 0;\n\t          var indexOffset = startIndex;\n\t          var _iteratorNormalCompletion4 = true;\n\t          var _didIteratorError4 = false;\n\t          var _iteratorError4 = undefined;\n\t\n\t          try {\n\t            for (var _iterator4 = this.spans[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t              var span = _step4.value;\n\t\n\t              var endIndex = index + span.text.length;\n\t              if (span.activeTags.includes('e')) {\n\t                if (index <= startIndex) {\n\t                  startIndex = endIndex;\n\t                } else {\n\t                  ignore.push({ index: index - indexOffset, endIndex: endIndex - indexOffset });\n\t                }\n\t              }\n\t              index = endIndex;\n\t            }\n\t            // Non-directive elements are lined up to the chant notation based on vowel segments,\n\t          } catch (err) {\n\t            _didIteratorError4 = true;\n\t            _iteratorError4 = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t                _iterator4.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError4) {\n\t                throw _iteratorError4;\n\t              }\n\t            }\n\t          }\n\t\n\t          var result = activeLanguage.findVowelSegment(this.text, startIndex, ignore);\n\t\n\t          if (result.found !== true) {\n\t            var match = this.text.slice(startIndex).match(/[a-z]+/i);\n\t            if (match) {\n\t              result.startIndex = startIndex + match.index;\n\t              result.length = match[0].length;\n\t            } else {\n\t              result.startIndex = startIndex;\n\t              result.length = this.text.length - startIndex;\n\t            }\n\t          }\n\t          if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n\t            // svgTextMeasurer still has the current lyric in it...\n\t            x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex);\n\t            x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(0, result.startIndex + result.length);\n\t          } else {\n\t            x1 = this.measureSubstring(ctxt, result.startIndex);\n\t            x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n\t          }\n\t          offset = (x1 + x2) / 2;\n\t          vowelSegmentWidth = x2 - x1;\n\t        }\n\t      }\n\t\n\t      this.vowelSegmentWidth = vowelSegmentWidth;\n\t\n\t      this.bounds.x = -offset;\n\t      this.bounds.y = 0;\n\t\n\t      this.origin.x = offset;\n\t    }\n\t  }, {\n\t    key: \"generateDropCap\",\n\t    value: function generateDropCap(ctxt) {\n\t      if (this.dropCap) return this.dropCap;\n\t      // disallow special characters:\n\t      if (this.spans[0].properties['font-family'] === ctxt.specialCharProperties['font-family']) {\n\t        return null;\n\t      }\n\t      var dropCapSpan = this.spans[0].clone();\n\t      dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n\t      var dropCapLowerCase = dropCapSpan.text.toLowerCase();\n\t      // disallow any characters that do not change from .toUpperCase():\n\t      if (dropCapSpan.text === dropCapLowerCase) return null;\n\t\n\t      if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0) dropCapSpan.text = dropCapLowerCase;\n\t\n\t      var dropCap = this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex);\n\t      dropCap.spans = [dropCapSpan];\n\t      var dropCapSourceGabcLength = this.sourceGabc.match(/^(?:<\\/?[^>]+>)*.?(?:<\\/[^>]+>)*/)[0].length;\n\t      dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n\t      this.sourceIndex += dropCap.sourceGabc.length;\n\t      this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\t\n\t      this.spans[0].text = this.spans[0].text.slice(1);\n\t      this.text = this.text.slice(1);\n\t      this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\t\n\t      return dropCap;\n\t    }\n\t  }, {\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\t\n\t      return classes + _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }, {\n\t    key: \"getExtraStyleProperties\",\n\t    value: function getExtraStyleProperties(ctxt) {\n\t      var props = _get(Lyric.prototype.__proto__ || Object.getPrototypeOf(Lyric.prototype), \"getExtraStyleProperties\", this).call(this, ctxt);\n\t\n\t      if (this.lyricType === LyricType.Directive && ctxt.autoColor === true) props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\t\n\t      return props;\n\t    }\n\t  }]);\n\t\n\t  return Lyric;\n\t}(TextElement);\n\t\n\tvar ChoralSign = exports.ChoralSign = function (_TextElement2) {\n\t  _inherits(ChoralSign, _TextElement2);\n\t\n\t  function ChoralSign(ctxt, text, note, sourceIndex) {\n\t    _classCallCheck(this, ChoralSign);\n\t\n\t    var _this15 = _possibleConstructorReturn(this, (ChoralSign.__proto__ || Object.getPrototypeOf(ChoralSign)).call(this, ctxt, (ctxt.textStyles.choralSign.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.choralSign.font;\n\t    }, TextTypes.choralSign.size, \"start\", sourceIndex, text));\n\t\n\t    _this15.positionHint = MarkingPositionHint.Default;\n\t    _this15.note = note;\n\t    _this15.textType = TextTypes.choralSign;\n\t    return _this15;\n\t  }\n\t\n\t  _createClass(ChoralSign, [{\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      _get(ChoralSign.prototype.__proto__ || Object.getPrototypeOf(ChoralSign.prototype), \"recalculateMetrics\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.recalculateMetrics(ctxt);\n\t      this.bounds.x = this.note.bounds.x + Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\t\n\t      var offset = void 0,\n\t          staffPosition = void 0;\n\t      if (this.positionHint === MarkingPositionHint.Below) {\n\t        offset = -1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n\t      } else {\n\t        offset = 1;\n\t        staffPosition = this.note.staffPosition + 2 * offset;\n\t        staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n\t      }\n\t      // if (staffPosition % 2 === 0) staffPosition += offset;\n\t      this.bounds.y = ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n\t    }\n\t  }]);\n\t\n\t  return ChoralSign;\n\t}(TextElement);\n\t\n\tvar AboveLinesText = exports.AboveLinesText = function (_TextElement3) {\n\t  _inherits(AboveLinesText, _TextElement3);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function AboveLinesText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, AboveLinesText);\n\t\n\t    var _this16 = _possibleConstructorReturn(this, (AboveLinesText.__proto__ || Object.getPrototypeOf(AboveLinesText)).call(this, ctxt, (ctxt.textStyles.al.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.al.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.al.size;\n\t    }, \"start\", sourceIndex, text));\n\t\n\t    _this16.notation = notation;\n\t    _this16.textType = TextTypes.al;\n\t\n\t    _this16.padding = ctxt.staffInterval / 2;\n\t    return _this16;\n\t  }\n\t\n\t  return AboveLinesText;\n\t}(TextElement);\n\t\n\tvar TranslationText = exports.TranslationText = function (_TextElement4) {\n\t  _inherits(TranslationText, _TextElement4);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function TranslationText(ctxt, text, notation, sourceIndex) {\n\t    _classCallCheck(this, TranslationText);\n\t\n\t    var gabcSource = text;\n\t    var anchor = \"start\";\n\t    if (text === \"/\") {\n\t      text = \"\";\n\t      anchor = \"end\";\n\t    } else {\n\t      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n\t    }\n\t\n\t    var _this17 = _possibleConstructorReturn(this, (TranslationText.__proto__ || Object.getPrototypeOf(TranslationText)).call(this, ctxt, text, function (ctxt) {\n\t      return ctxt.textStyles.translation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.translation.size;\n\t    }, anchor, sourceIndex, gabcSource));\n\t\n\t    _this17.notation = notation;\n\t    _this17.textType = TextTypes.translation;\n\t\n\t    _this17.padding = ctxt.staffInterval / 2;\n\t    return _this17;\n\t  }\n\t\n\t  return TranslationText;\n\t}(TextElement);\n\t\n\tvar DropCap = exports.DropCap = function (_TextElement5) {\n\t  _inherits(DropCap, _TextElement5);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function DropCap(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, DropCap);\n\t\n\t    var _this18 = _possibleConstructorReturn(this, (DropCap.__proto__ || Object.getPrototypeOf(DropCap)).call(this, ctxt, (ctxt.textStyles.dropCap.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.dropCap.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this18.textType = TextTypes.dropCap;\n\t\n\t    _this18.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n\t    return _this18;\n\t  }\n\t\n\t  return DropCap;\n\t}(TextElement);\n\t\n\tvar TitleTextElement = exports.TitleTextElement = function (_TextElement6) {\n\t  _inherits(TitleTextElement, _TextElement6);\n\t\n\t  function TitleTextElement(ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc) {\n\t    _classCallCheck(this, TitleTextElement);\n\t\n\t    return _possibleConstructorReturn(this, (TitleTextElement.__proto__ || Object.getPrototypeOf(TitleTextElement)).call(this, ctxt, text, fontFamily, fontSize, textAnchor, sourceIndex, sourceGabc));\n\t  }\n\t\n\t  return TitleTextElement;\n\t}(TextElement);\n\t\n\tvar Supertitle = exports.Supertitle = function (_TitleTextElement) {\n\t  _inherits(Supertitle, _TitleTextElement);\n\t\n\t  function Supertitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Supertitle);\n\t\n\t    var _this20 = _possibleConstructorReturn(this, (Supertitle.__proto__ || Object.getPrototypeOf(Supertitle)).call(this, ctxt, (ctxt.textStyles.supertitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.supertitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this20.textType = TextTypes.supertitle;\n\t\n\t    _this20.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.supertitle.padding) || 1) * ctxt.textStyles.supertitle.size / 3;\n\t    };\n\t    return _this20;\n\t  }\n\t\n\t  return Supertitle;\n\t}(TitleTextElement);\n\t\n\tvar Title = exports.Title = function (_TitleTextElement2) {\n\t  _inherits(Title, _TitleTextElement2);\n\t\n\t  function Title(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Title);\n\t\n\t    var _this21 = _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).call(this, ctxt, (ctxt.textStyles.title.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.title.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.title.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this21.textType = TextTypes.title;\n\t\n\t    _this21.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.title.padding) || 1) * ctxt.textStyles.title.size / 3;\n\t    };\n\t    return _this21;\n\t  }\n\t\n\t  return Title;\n\t}(TitleTextElement);\n\t\n\tvar Subtitle = exports.Subtitle = function (_TitleTextElement3) {\n\t  _inherits(Subtitle, _TitleTextElement3);\n\t\n\t  function Subtitle(ctxt, text, sourceIndex) {\n\t    _classCallCheck(this, Subtitle);\n\t\n\t    var _this22 = _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).call(this, ctxt, (ctxt.textStyles.subtitle.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.subtitle.size;\n\t    }, \"middle\", sourceIndex, text));\n\t\n\t    _this22.textType = TextTypes.subtitle;\n\t\n\t    _this22.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.subtitle.padding) || 1) * ctxt.textStyles.subtitle.size / 3;\n\t    };\n\t    return _this22;\n\t  }\n\t\n\t  return Subtitle;\n\t}(TitleTextElement);\n\t\n\tvar TextLeftRight = exports.TextLeftRight = function (_TitleTextElement4) {\n\t  _inherits(TextLeftRight, _TitleTextElement4);\n\t\n\t  function TextLeftRight(ctxt, text, type, sourceIndex) {\n\t    _classCallCheck(this, TextLeftRight);\n\t\n\t    var _this23 = _possibleConstructorReturn(this, (TextLeftRight.__proto__ || Object.getPrototypeOf(TextLeftRight)).call(this, ctxt, (ctxt.textStyles.leftRight.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.leftRight.size;\n\t    }, type === \"textLeft\" ? \"start\" : \"end\", sourceIndex, text));\n\t\n\t    _this23.textType = TextTypes.leftRight;\n\t    _this23.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n\t    _this23.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n\t    _this23.padding = function (ctxt) {\n\t      return (Number(ctxt.textStyles.leftRight.padding) || 1) * ctxt.textStyles.leftRight.size / 5;\n\t    };\n\t    return _this23;\n\t  }\n\t\n\t  _createClass(TextLeftRight, [{\n\t    key: \"getCssClasses\",\n\t    value: function getCssClasses() {\n\t      return this.extraClass + \" \" + _get(TextLeftRight.prototype.__proto__ || Object.getPrototypeOf(TextLeftRight.prototype), \"getCssClasses\", this).call(this);\n\t    }\n\t  }]);\n\t\n\t  return TextLeftRight;\n\t}(TitleTextElement);\n\t\n\tvar Annotation = exports.Annotation = function (_TextElement7) {\n\t  _inherits(Annotation, _TextElement7);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotation(ctxt, text, elementIndex) {\n\t    _classCallCheck(this, Annotation);\n\t\n\t    var _this24 = _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).call(this, ctxt, (ctxt.textStyles.annotation.prefix || \"\") + text, function (ctxt) {\n\t      return ctxt.textStyles.annotation.font;\n\t    }, function (ctxt) {\n\t      return ctxt.textStyles.annotation.size;\n\t    }, \"middle\"));\n\t\n\t    _this24.sourceGabc = text;\n\t    if (typeof elementIndex === 'number') _this24.elementIndex = elementIndex;\n\t    _this24.textType = TextTypes.annotation;\n\t    _this24.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n\t    _this24.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n\t    return _this24;\n\t  }\n\t\n\t  return Annotation;\n\t}(TextElement);\n\t\n\tvar Annotations = exports.Annotations = function (_ChantLayoutElement9) {\n\t  _inherits(Annotations, _ChantLayoutElement9);\n\t\n\t  /**\n\t   * @param {String} text\n\t   */\n\t  function Annotations(ctxt) {\n\t    _classCallCheck(this, Annotations);\n\t\n\t    var _this25 = _possibleConstructorReturn(this, (Annotations.__proto__ || Object.getPrototypeOf(Annotations)).call(this));\n\t\n\t    _this25.lineHeight = 1.1;\n\t\n\t    for (var _len2 = arguments.length, texts = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t      texts[_key2 - 1] = arguments[_key2];\n\t    }\n\t\n\t    _this25.annotations = texts.map(function (text, i) {\n\t      return new Annotation(ctxt, text, i);\n\t    });\n\t    _this25.padding = Math.max.apply(null, _this25.annotations.map(function (annotation) {\n\t      return annotation.padding;\n\t    }));\n\t    return _this25;\n\t  }\n\t\n\t  _createClass(Annotations, [{\n\t    key: \"updateBounds\",\n\t    value: function updateBounds(multiplier) {\n\t      if (!multiplier) multiplier = 1;\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.bounds.x += this.bounds.x * multiplier;\n\t        annotation.bounds.y += this.bounds.y * multiplier;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"recalculateMetrics\",\n\t    value: function recalculateMetrics(ctxt) {\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t\n\t      var y = 0;\n\t      for (var i = 0; i < this.annotations.length; ++i) {\n\t        var annotation = this.annotations[i];\n\t        annotation.recalculateMetrics(ctxt);\n\t        this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n\t        annotation.bounds.y += y;\n\t        this.bounds.height = annotation.bounds.bottom();\n\t        this.origin.y = this.origin.y || annotation.origin.y;\n\t        y += annotation.fontSize(ctxt) * (annotation.resize || 1) * this.lineHeight;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.updateBounds();\n\t      this.annotations.forEach(function (annotation) {\n\t        annotation.draw(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgNode(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgTree(ctxt);\n\t      });\n\t      this.updateBounds(-1);\n\t      return { children: result };\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.updateBounds();\n\t      var result = this.annotations.map(function (annotation) {\n\t        return annotation.createSvgFragment(ctxt);\n\t      }).join(\"\");\n\t      this.updateBounds(-1);\n\t      return result;\n\t    }\n\t  }]);\n\t\n\t  return Annotations;\n\t}(ChantLayoutElement);\n\t\n\tvar ChantNotationElement = exports.ChantNotationElement = function (_ChantLayoutElement10) {\n\t  _inherits(ChantNotationElement, _ChantLayoutElement10);\n\t\n\t  function ChantNotationElement() {\n\t    _classCallCheck(this, ChantNotationElement);\n\t\n\t    //double\n\t    var _this26 = _possibleConstructorReturn(this, (ChantNotationElement.__proto__ || Object.getPrototypeOf(ChantNotationElement)).call(this));\n\t\n\t    _this26.leadingSpace = 0.0;\n\t    _this26.trailingSpace = DefaultTrailingSpace;\n\t    _this26.keepWithNext = false;\n\t    _this26.needsLayout = true;\n\t\n\t    _this26.lyrics = [];\n\t\n\t    /**\n\t     * @type {ChantScore}\n\t     */\n\t    _this26.score = null; // the ChantScore\n\t\n\t    /**\n\t     * @type {ChantLine}\n\t     */\n\t    _this26.line = null; // the ChantLine\n\t\n\t    _this26.visualizers = [];\n\t    return _this26;\n\t  }\n\t\n\t  _createClass(ChantNotationElement, [{\n\t    key: \"hasLyrics\",\n\t    value: function hasLyrics() {\n\t      return this.lyrics.length !== 0;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsLeft\",\n\t    value: function getAllLyricsLeft() {\n\t      if (this.lyrics.length === 0) return this.bounds.right();\n\t\n\t      var x = Number.MAX_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t  }, {\n\t    key: \"getAllLyricsRight\",\n\t    value: function getAllLyricsRight() {\n\t      if (this.lyrics.length === 0) return this.bounds.x;\n\t\n\t      var x = Number.MIN_VALUE;\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        if (this.lyrics[i]) x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n\t      }\n\t\n\t      return this.bounds.x + x;\n\t    }\n\t\n\t    // used by subclasses while building up the chant notations.\n\t\n\t  }, {\n\t    key: \"addVisualizer\",\n\t    value: function addVisualizer(chantLayoutElement) {\n\t      if (!chantLayoutElement.ignoreBounds) {\n\t        if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t      }\n\t\n\t      this.visualizers.push(chantLayoutElement);\n\t    }\n\t\n\t    // same as addVisualizer, except the element is unshifted to the front\n\t    // of the visualizer array rather than the end. This way, some\n\t    // visualizers can be placed behind the others...ledger lines for example.\n\t\n\t  }, {\n\t    key: \"prependVisualizer\",\n\t    value: function prependVisualizer(chantLayoutElement) {\n\t      if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();else this.bounds.union(chantLayoutElement.bounds);\n\t\n\t      this.visualizers.unshift(chantLayoutElement);\n\t    }\n\t\n\t    // chant notation elements are given an opportunity to perform their layout via this function.\n\t    // subclasses should call this function first in overrides of this function.\n\t    // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n\t    // all valid and prepared for higher level layout.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      if (typeof this.trailingSpace === \"function\") this.calculatedTrailingSpace = this.trailingSpace(ctxt);else this.calculatedTrailingSpace = this.trailingSpace;\n\t\n\t      // reset the bounds and the staff notations before doing a layout\n\t      this.visualizers = [];\n\t      this.bounds = new _ExsurgeCore.Rect(Infinity, Infinity, -Infinity, -Infinity);\n\t\n\t      for (var i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].recalculateMetrics(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].recalculateMetrics(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].recalculateMetrics(ctxt);\n\t      }\n\t    }\n\t\n\t    // some subclasses have internal dependencies on other notations (for example,\n\t    // a custos can depend on a later neume which it uses to set its height).\n\t    // subclasses can override this function so that when the notations are\n\t    // altered, the subclass can correctly invalidate (and later restore) its own\n\t    // depedencies\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t\n\t    // a helper function for subclasses to call after they are done performing layout...\n\t\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this27 = this;\n\t\n\t      this.bounds.x = 0;\n\t\n\t      var language = this.lyrics[0] && this.lyrics[0].language || ctxt.defaultLanguage;\n\t      // center the neume itself over the syllable, or just the first punctum\n\t      // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n\t      var calculateLyricX = language.centerNeume ? function (lyric) {\n\t        return lyric.bounds.x = _this27.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth ? _this27.bounds.width / 2 - lyric.origin.x : _this27.origin.x - lyric.origin.x;\n\t      } : function (lyric) {\n\t        return lyric.bounds.x = _this27.origin.x - lyric.origin.x;\n\t      };\n\t      this.lyrics.forEach(calculateLyricX);\n\t\n\t      this.needsLayout = false;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, 0);\n\t\n\t      for (var i = 0; i < this.visualizers.length; i++) {\n\t        this.visualizers[i].draw(ctxt);\n\t      }for (i = 0; i < this.lyrics.length; i++) {\n\t        this.lyrics[i].draw(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        this.translationText[i].draw(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        this.alText[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, 0);\n\t    }\n\t  }, {\n\t    key: \"getInnerSvgNodes\",\n\t    value: function getInnerSvgNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var inner = [];\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner.push(this.lyrics[i][functionName](ctxt));\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner.push(this.translationText[i][functionName](ctxt));\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner.push(this.alText[i][functionName](ctxt));\n\t      }if (this.visualizers.length) {\n\t        var visualizers = [];\n\t        for (var i = 0; i < this.visualizers.length; i++) {\n\t          visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\t        }if (functionName === \"createSvgTree\") {\n\t          inner.push(QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", { class: \"Notations\" }].concat(visualizers)));\n\t        } else {\n\t          inner.push(QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers));\n\t        }\n\t      }\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps() {\n\t      return {\n\t        // this.constructor.name will not be the same after being mangled by UglifyJS\n\t        class: \"ChantNotationElement \" + (this.cssClass || this.constructor.name),\n\t        transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createNode(\"g\", svgProps, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n\t      var svgProps = this.getSvgProps();\n\t      svgProps.source = this;\n\t      return QuickSvg.createSvgTree.apply(QuickSvg, [\"g\", svgProps].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var inner = \"\";\n\t\n\t      for (i = 0; i < this.lyrics.length; i++) {\n\t        inner += this.lyrics[i].createSvgFragment(ctxt);\n\t      }if (this.translationText) for (i = 0; i < this.translationText.length; i++) {\n\t        inner += this.translationText[i].createSvgFragment(ctxt);\n\t      }if (this.alText) for (i = 0; i < this.alText.length; i++) {\n\t        inner += this.alText[i].createSvgFragment(ctxt);\n\t      }for (var i = 0; i < this.visualizers.length; i++) {\n\t        inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\t      }return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n\t    }\n\t  }]);\n\t\n\t  return ChantNotationElement;\n\t}(ChantLayoutElement);\n\t\n\tvar __connectorSpan = new TextSpan(\" • \");\n\tvar __mergeAnnotationWithTextLeft = function __mergeAnnotationWithTextLeft() {\n\t  for (var _len3 = arguments.length, annotationSpans = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n\t    annotationSpans[_key3] = arguments[_key3];\n\t  }\n\t\n\t  return annotationSpans.reduce(function (result, spans) {\n\t    if (result && result.length) {\n\t      if (spans && spans.length) return result.concat(__connectorSpan, spans);else return result;\n\t    } else if (spans && spans.length) {\n\t      return spans;\n\t    }\n\t    return [];\n\t  });\n\t};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar addAccent = exports.addAccent = function addAccent(vowel) {\n\t  return {\n\t    \"Æ\": \"Ǽ\",\n\t    \"Œ\": \"Œ́\",\n\t    \"A\": \"Á\",\n\t    \"E\": \"É\",\n\t    \"I\": \"Í\",\n\t    \"O\": \"Ó\",\n\t    \"U\": \"Ú\",\n\t    \"Y\": \"Ý\",\n\t    \"æ\": \"ǽ\",\n\t    \"œ\": \"œ́\",\n\t    \"a\": \"á\",\n\t    \"e\": \"é\",\n\t    \"i\": \"í\",\n\t    \"o\": \"ó\",\n\t    \"u\": \"ú\",\n\t    \"y\": \"ý\"\n\t  }[vowel] || vowel;\n\t};\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar makeLigature = exports.makeLigature = function makeLigature(vowels) {\n\t  return {\n\t    AE: \"Æ\",\n\t    Ae: \"Æ\",\n\t    ae: \"æ\",\n\t    OE: \"Œ\",\n\t    Oe: \"Œ\",\n\t    oe: \"œ\"\n\t  }[vowels] || vowels;\n\t};\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar greextraGlyphs = exports.greextraGlyphs = {\n\t  MedicaeaFlat: \"\",\n\t  HufnagelCustosUpShort: \"\",\n\t  HufnagelCustosUpLong: \"\",\n\t  HufnagelCustosUpMedium: \"\",\n\t  HufnagelCustosDownShort: \"\",\n\t  HufnagelCustosDownLong: \"\",\n\t  HufnagelCustosDownMedium: \"\",\n\t  MedicaeaCustosUpShort: \"\",\n\t  MedicaeaCustosUpLong: \"\",\n\t  MedicaeaCustosUpMedium: \"\",\n\t  MedicaeaCustosDownShort: \"\",\n\t  MedicaeaCustosDownLong: \"\",\n\t  MedicaeaCustosDownMedium: \"\",\n\t  MensuralCustosUpShort: \"\",\n\t  MensuralCustosUpLong: \"\",\n\t  MensuralCustosUpMedium: \"\",\n\t  MensuralCustosDownShort: \"\",\n\t  MensuralCustosDownLong: \"\",\n\t  MensuralCustosDownMedium: \"\",\n\t  MensuralFlat: \"\",\n\t  HufnagelFlat: \"\",\n\t  MedicaeaCClef: \"\",\n\t  MedicaeaCClefChange: \"\",\n\t  MedicaeaFClef: \"\",\n\t  MedicaeaFClefChange: \"\",\n\t  HufnagelCClef: \"\",\n\t  HufnagelCClefChange: \"\",\n\t  HufnagelFClef: \"\",\n\t  HufnagelFClefChange: \"\",\n\t  HugnagelCFClef: \"\",\n\t  HufnagelCFClefChange: \"\",\n\t  MensuralFlatHole: \"\",\n\t  HufnagelFlatHole: \"\",\n\t  MedicaeaFlatHole: \"\",\n\t  StarSix: \"\",\n\t  Dagger: \"\",\n\t  \"Bar.alt\": \"\",\n\t  StarHeight: \"\",\n\t  Cross: \"\",\n\t  \"RBar.alt\": \"\",\n\t  \"VBar.alt\": \"\",\n\t  Drawing1: \"\",\n\t  Drawing2: \"\",\n\t  RWithBarGoth: \"\",\n\t  VWithBarGoth: \"\",\n\t  Line1: \"\",\n\t  Line2: \"\",\n\t  Line3: \"\",\n\t  Line4: \"\",\n\t  Line5: \"\",\n\t  \"Cross.alt\": \"\",\n\t  ABarCaption: \"\",\n\t  RBarCaption: \"\",\n\t  VBarCaption: \"\",\n\t  ABarCaptionSC: \"\",\n\t  RBarCaptionSC: \"\",\n\t  VBarCaptionSC: \"\",\n\t  ABar: \"\",\n\t  RBar: \"\",\n\t  VBar: \"\",\n\t  ABarSC: \"\",\n\t  RBarSC: \"\",\n\t  VBarSC: \"\",\n\t  ABarSmall: \"\",\n\t  RBarSmall: \"\",\n\t  VBarSmall: \"\",\n\t  ABarSmallSC: \"\",\n\t  RBarSmallSC: \"\",\n\t  VBarSmallSC: \"\",\n\t  \"RBar.alt2\": \"\",\n\t  \"VBar.alt2\": \"\",\n\t  ABarCaptionSlant: \"\",\n\t  RBarCaptionSlant: \"\",\n\t  VBarCaptionSlant: \"\",\n\t  ABarSlant: \"\",\n\t  RBarSlant: \"\",\n\t  VBarSlant: \"\",\n\t  ABarSmallSlant: \"\",\n\t  RBarSmallSlant: \"\",\n\t  VBarSmallSlant: \"\"\n\t};\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantDocument = exports.ChantScore = exports.ChantMapping = exports.ChantLineBreak = exports.TextOnly = exports.FaClef = exports.DoClef = exports.Clef = exports.Note = exports.NoteShapeModifiers = exports.NoteShape = exports.LiquescentType = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChantChantLine = __webpack_require__(9);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGabc = __webpack_require__(12);\n\t\n\tvar _ExsurgeTitles = __webpack_require__(14);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar LiquescentType = exports.LiquescentType = {\n\t  None: 0,\n\t\n\t  // flags that can be combined, though of course it\n\t  // it doesn't make sense to combine some!\n\t  Large: 1 << 0,\n\t  Small: 1 << 1,\n\t  Ascending: 1 << 2,\n\t  Descending: 1 << 3,\n\t  InitioDebilis: 1 << 4,\n\t\n\t  // handy liquescent types\n\t  LargeAscending: 1 << 0 | 1 << 2,\n\t  LargeDescending: 1 << 0 | 1 << 3,\n\t  SmallAscending: 1 << 1 | 1 << 2,\n\t  SmallDescending: 1 << 1 | 1 << 3\n\t};\n\t\n\tvar NoteShape = exports.NoteShape = {\n\t  // shapes\n\t  Default: 0,\n\t  Virga: 1,\n\t  Inclinatum: 2,\n\t  Quilisma: 3,\n\t  Stropha: 4,\n\t  Oriscus: 5\n\t};\n\t\n\tvar NoteShapeModifiers = exports.NoteShapeModifiers = {\n\t  // flags which modify the shape\n\t  // not all of them apply to every shape of course\n\t  None: 0,\n\t  Ascending: 1 << 0,\n\t  Descending: 1 << 1,\n\t  Cavum: 1 << 2,\n\t  Stemmed: 1 << 3,\n\t  Linea: 1 << 4,\n\t  Reverse: 1 << 5\n\t};\n\t\n\t/**\n\t * @class\n\t */\n\t\n\tvar Note = exports.Note = function (_ChantLayoutElement) {\n\t  _inherits(Note, _ChantLayoutElement);\n\t\n\t  /**\n\t   * @para {Pitch} pitch\n\t   */\n\t  function Note(pitch) {\n\t    _classCallCheck(this, Note);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this));\n\t\n\t    if (typeof pitch !== \"undefined\") _this.pitch = pitch;else _this.pitch = null;\n\t\n\t    _this.glyphVisualizer = null;\n\t\n\t    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n\t    // 0 is the space just below the lowest line on the staff (equivalent to gabc 'c'). Positive numbers go up\n\t    // the staff, and negative numbers go down, i.e., 1 is gabc 'd', 2 is gabc 'e', -1 is gabc 'b', etc.\n\t    _this.staffPosition = 4;\n\t    _this.liquescent = LiquescentType.None;\n\t    _this.shape = NoteShape.Default;\n\t    _this.shapeModifiers = NoteShapeModifiers.None;\n\t\n\t    // notes keep track of the neume they belong to in order to facilitate layout\n\t    // this.neume gets set when a note is added to a neume via Neume.addNote()\n\t    _this.neume = null;\n\t\n\t    // various markings that can exist on a note, organized by type\n\t    // for faster access and simpler code logic\n\t    _this.episemata = [];\n\t    _this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\t\n\t    // these are set on the note when they are needed, otherwise, they're undefined\n\t    // this.ictus\n\t    // this.accuteAccent\n\t    // this.braceStart\n\t    // this.braceEnd\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Note, [{\n\t    key: \"setGlyph\",\n\t    value: function setGlyph(ctxt, glyphCode) {\n\t      if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);else this.glyphVisualizer = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t\n\t      this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      // assign glyphvisualizer metrics to this note\n\t      this.bounds.x = this.glyphVisualizer.bounds.x;\n\t      this.bounds.y = this.glyphVisualizer.bounds.y;\n\t      this.bounds.width = this.glyphVisualizer.bounds.width;\n\t      this.bounds.height = this.glyphVisualizer.bounds.height;\n\t\n\t      this.origin.x = this.glyphVisualizer.origin.x;\n\t      this.origin.y = this.glyphVisualizer.origin.y;\n\t    }\n\t\n\t    // a utility function for modifiers\n\t\n\t  }, {\n\t    key: \"shapeModifierMatches\",\n\t    value: function shapeModifierMatches(shapeModifier) {\n\t      if (shapeModifier === NoteShapeModifiers.None) return this.shapeModifier === NoteShapeModifiers.None;else return this.shapeModifier & shapeModifier !== 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t\n\t      this.glyphVisualizer.draw(ctxt);\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n\t      return this.svgNode;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgTree(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      this.glyphVisualizer.bounds.x = this.bounds.x;\n\t      this.glyphVisualizer.bounds.y = this.bounds.y;\n\t      return this.glyphVisualizer.createSvgFragment(ctxt, this);\n\t    }\n\t  }]);\n\t\n\t  return Note;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\tvar Clef = exports.Clef = function (_ChantNotationElement) {\n\t  _inherits(Clef, _ChantNotationElement);\n\t\n\t  function Clef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, Clef);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Clef.__proto__ || Object.getPrototypeOf(Clef)).call(this));\n\t\n\t    _this2.isClef = true;\n\t    _this2.staffPosition = staffPosition;\n\t    _this2.octave = octave;\n\t    _this2.defaultAccidental = defaultAccidental;\n\t    _this2.activeAccidental = defaultAccidental;\n\t    _this2.keepWithNext = true;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(Clef, [{\n\t    key: \"resetAccidentals\",\n\t    value: function resetAccidentals() {\n\t      this.activeAccidental = this.defaultAccidental;\n\t    }\n\t  }, {\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {}\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      ctxt.activeClef = this;\n\t\n\t      if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      // if we have a default accidental, then add a glyph for it now\n\t      if (this.defaultAccidental) {\n\t        var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n\t        accidentalGlyph.bounds.x += this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n\t        this.addVisualizer(accidentalGlyph);\n\t      }\n\t\n\t      _get(Clef.prototype.__proto__ || Object.getPrototypeOf(Clef.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      if (this.model) return this.model.clone();\n\t      var clone = new this.constructor(this.staffPosition, this.octave, this.defaultAccidental);\n\t      clone.sourceGabc = this.sourceGabc;\n\t      clone.sourceIndex = this.sourceIndex;\n\t      clone.elementIndex = this.elementIndex;\n\t      clone.model = this;\n\t      return clone;\n\t    }\n\t  }], [{\n\t    key: \"default\",\n\t    value: function _default() {\n\t      return __defaultDoClef;\n\t    }\n\t  }]);\n\t\n\t  return Clef;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar DoClef = exports.DoClef = function (_Clef) {\n\t  _inherits(DoClef, _Clef);\n\t\n\t  function DoClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, DoClef);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (DoClef.__proto__ || Object.getPrototypeOf(DoClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this3.leadingSpace = 0.0;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(DoClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Do);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition;\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoClef.prototype.__proto__ || Object.getPrototypeOf(DoClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.DoClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoClef;\n\t}(Clef);\n\t\n\tvar __defaultDoClef = new DoClef(7, 2);\n\t\n\tvar FaClef = exports.FaClef = function (_Clef2) {\n\t  _inherits(FaClef, _Clef2);\n\t\n\t  function FaClef(staffPosition, octave) {\n\t    var defaultAccidental = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\t\n\t    _classCallCheck(this, FaClef);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (FaClef.__proto__ || Object.getPrototypeOf(FaClef)).call(this, staffPosition, octave, defaultAccidental));\n\t\n\t    _this4.octave = octave;\n\t\n\t    _this4.leadingSpace = 0;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(FaClef, [{\n\t    key: \"pitchToStaffPosition\",\n\t    value: function pitchToStaffPosition(pitch) {\n\t      return (pitch.octave - this.octave) * 7 + this.staffPosition + _ExsurgeCore.Pitch.stepToStaffOffset(pitch.step) - _ExsurgeCore.Pitch.stepToStaffOffset(_ExsurgeCore.Step.Fa);\n\t    }\n\t  }, {\n\t    key: \"staffPositionToPitch\",\n\t    value: function staffPositionToPitch(staffPosition) {\n\t      var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n\t      var octaveOffset = Math.floor(offset / 7);\n\t\n\t      var step = _ExsurgeCore.Pitch.staffOffsetToStep(offset);\n\t\n\t      if (this.activeAccidental && this.activeAccidental.staffPosition === staffPosition) step += this.activeAccidental.accidentalType;\n\t\n\t      return new _ExsurgeCore.Pitch(step, this.octave + octaveOffset);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FaClef.prototype.__proto__ || Object.getPrototypeOf(FaClef.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.FaClef);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FaClef;\n\t}(Clef);\n\t\n\t/*\n\t * TextOnly\n\t */\n\t\n\t\n\tvar TextOnly = exports.TextOnly = function (_ChantNotationElement2) {\n\t  _inherits(TextOnly, _ChantNotationElement2);\n\t\n\t  function TextOnly(sourceIndex, sourceLength) {\n\t    _classCallCheck(this, TextOnly);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (TextOnly.__proto__ || Object.getPrototypeOf(TextOnly)).call(this));\n\t\n\t    _this5.sourceIndex = sourceIndex;\n\t    _this5.sourceLength = sourceLength;\n\t    _this5.sourceGabc = \"\";\n\t    _this5.trailingSpace = 0;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(TextOnly, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TextOnly.prototype.__proto__ || Object.getPrototypeOf(TextOnly.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // add an empty glyph as a placeholder\n\t      this.addVisualizer(new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.None));\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = -ctxt.staffInterval;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TextOnly;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\tvar ChantLineBreak = exports.ChantLineBreak = function (_ChantNotationElement3) {\n\t  _inherits(ChantLineBreak, _ChantNotationElement3);\n\t\n\t  function ChantLineBreak(justify) {\n\t    _classCallCheck(this, ChantLineBreak);\n\t\n\t    var _this6 = _possibleConstructorReturn(this, (ChantLineBreak.__proto__ || Object.getPrototypeOf(ChantLineBreak)).call(this));\n\t\n\t    _this6.calculatedTrailingSpace = _this6.trailingSpace = 0;\n\t    _this6.justify = justify;\n\t    return _this6;\n\t  }\n\t\n\t  _createClass(ChantLineBreak, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // reset the bounds before doing a layout\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t    }\n\t  }, {\n\t    key: \"clone\",\n\t    value: function clone() {\n\t      var lb = new ChantLineBreak();\n\t      lb.justify = this.justify;\n\t\n\t      return lb;\n\t    }\n\t  }]);\n\t\n\t  return ChantLineBreak;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t// a chant mapping is a lightweight format independent way of\n\t// tracking how a chant language (e.g., gabc) has been\n\t// mapped to exsurge notations.\n\t\n\t\n\tvar ChantMapping =\n\t// source can be any object type. in the case of gabc, source is a text\n\t// string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n\t// notations is an array of ChantNotationElements\n\texports.ChantMapping = function ChantMapping(source, notations, sourceIndex) {\n\t  _classCallCheck(this, ChantMapping);\n\t\n\t  this.source = source;\n\t  this.notations = notations;\n\t  this.sourceIndex = sourceIndex;\n\t};\n\t\n\t/*\n\t * Score, document\n\t */\n\t\n\t\n\tvar ChantScore = exports.ChantScore = function () {\n\t  // mappings is an array of ChantMappings.\n\t  function ChantScore(ctxt) {\n\t    var mappings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t    var useDropCap = arguments[2];\n\t\n\t    _classCallCheck(this, ChantScore);\n\t\n\t    this.mappings = mappings;\n\t\n\t    this.lines = [];\n\t    this.notes = [];\n\t    this.staffLineCount = 4;\n\t    if (ctxt) this.titles = new _ExsurgeTitles.Titles(ctxt, this);\n\t\n\t    this.startingClef = null;\n\t\n\t    this.useDropCap = useDropCap;\n\t    this.dropCap = null;\n\t\n\t    this.annotation = null;\n\t\n\t    this.compiled = false;\n\t\n\t    this.autoColoring = true;\n\t    this.needsLayout = true;\n\t\n\t    // valid after chant lines are created...\n\t    this.bounds = new _ExsurgeCore.Rect();\n\t\n\t    if (ctxt) this.updateNotations(ctxt);\n\t  }\n\t\n\t  /**\n\t   * Make a copy of the score, only including the specified lines\n\t   * @param  {number} startLine starting index\n\t   * @param  {number} endLine   ending index\n\t   * @return {ChantScore}           the partial score\n\t   */\n\t\n\t\n\t  _createClass(ChantScore, [{\n\t    key: \"copyLines\",\n\t    value: function copyLines(startLine, endLine) {\n\t      var result = new ChantScore();\n\t      result.lines = this.lines.slice(startLine, endLine);\n\t      result.bounds = this.bounds.clone();\n\t      var lastLine = result.lines.slice(-1)[0];\n\t      result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n\t      if (startLine === 0) {\n\t        result.titles = this.titles;\n\t        result.dropCap = this.dropCap;\n\t        result.annotation = this.annotation;\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"updateSelection\",\n\t    value: function updateSelection(selection) {\n\t      this.selection = selection;\n\t      var elementSelection = selection && selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var insertion = elementSelection.insertion;\n\t      if (!insertion && selectedIndices.length === 1 && this.notes[selectedIndices[0]] instanceof TextOnly) {\n\t        // if there is only one selection, and its a text only, it should display as an insertion cursor:\n\t        insertion = { afterElementIndex: selectedIndices[0] };\n\t      }\n\t      // update the selected elements so that they can be given a .selected class when rendered\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var element = this.notes[i];\n\t        element.selected = selectedIndices.includes(i);\n\t      }\n\t      (this.startingClef.model || this.startingClef).selected = selectedIndices.includes(-1);\n\t      for (var _i = 0; _i < this.lines.length; ++_i) {\n\t        this.lines[_i].insertionCursor = null;\n\t      }\n\t      // update the insertion cursor, so it can be drawn on the correct system\n\t      this.insertionElement = null;\n\t      var insertionLine = null;\n\t      if (insertion) {\n\t        if (typeof insertion.chantLine === \"number\") {\n\t          insertionLine = this.lines[insertion.chantLine];\n\t          this.insertionElement = insertionLine.startingClef;\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        } else if (typeof insertion.afterElementIndex === \"number\") {\n\t          this.insertionElement = this.notes[insertion.afterElementIndex];\n\t          if (!this.insertionElement) {\n\t            insertionLine = this.lines[0];\n\t            this.insertionElement = insertionLine.startingClef;\n\t          } else if (this.insertionElement.neume) {\n\t            this.insertionElement = this.insertionElement.neume;\n\t          }\n\t          if (!insertionLine) {\n\t            insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n\t          }\n\t          insertionLine.insertionCursor = new _ExsurgeChantSigns.InsertionCursor();\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"updateNotations\",\n\t    value: function updateNotations(ctxt) {\n\t      var i, j, mapping, notation;\n\t\n\t      // flatten all mappings into one array for N(0) access to notations\n\t      this.notations = [];\n\t      this.notes = [];\n\t      this.hasLyrics = false;\n\t      this.hasAboveLinesText = false;\n\t      this.hasTranslations = false;\n\t      var elementSelection = this.selection && this.selection.element || {\n\t        indices: []\n\t      };\n\t      var selectedIndices = elementSelection.indices;\n\t      var nonNoteElementCount = 0;\n\t\n\t      // find the starting clef...\n\t      // start with a default clef in case the notations don't provide one.\n\t      this.startingClef = null;\n\t\n\t      for (i = 0; i < this.mappings.length; i++) {\n\t        mapping = this.mappings[i];\n\t        for (j = 0; j < mapping.notations.length; j++) {\n\t          notation = mapping.notations[j];\n\t          notation.score = this;\n\t          notation.mapping = mapping;\n\t\n\t          if (!this.startingClef) {\n\t            if (notation.isNeume) {\n\t              this.startingClef = Clef.default();\n\t            } else if (notation.isClef) {\n\t              this.startingClef = notation;\n\t              continue;\n\t            }\n\t          }\n\t\n\t          notation.notationIndex = this.notations.push(notation) - 1;\n\t          if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n\t          if (!this.hasAboveLinesText && notation.alText) this.hasAboveLinesText = true;\n\t          if (!this.hasTranslations && notation.translationText) this.hasTranslations = true;\n\t\n\t          // Update this.notes and find element indices:\n\t          var elements = notation.notes || [notation];\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = elements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var element = _step.value;\n\t\n\t              var elementIndex = element.elementIndex = this.notes.push(element) - 1;\n\t              if (element instanceof Note) {\n\t                element.noteIndex = elementIndex - nonNoteElementCount;\n\t              } else {\n\t                ++nonNoteElementCount;\n\t              }\n\t\n\t              element.selected = selectedIndices.includes(elementIndex);\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we've reached this far and we *still* don't have a clef, then there aren't even\n\t      // any neumes in the score. still, set the default clef just for good measure\n\t      if (!this.startingClef) this.startingClef = Clef.default();\n\t      this.startingClef.elementIndex = -1;\n\t\n\t      // update drop cap\n\t      if (this.useDropCap) this.recreateDropCap(ctxt);else this.dropCap = null;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }, {\n\t    key: \"recreateDropCap\",\n\t    value: function recreateDropCap(ctxt) {\n\t      this.dropCap = null;\n\t\n\t      // find the first notation with lyrics to use\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        if (this.notations[i].hasLyrics() && this.notations[i].lyrics[0] !== null && this.notations[i].lyrics[0].spans && this.notations[i].lyrics[0].spans.length) {\n\t          var notation = this.notations[i],\n\t              lyrics = notation.lyrics[0];\n\t          if (this.useDropCap) {\n\t            this.dropCap = lyrics.generateDropCap(ctxt);\n\t          } else {\n\t            lyrics.dropCap = null;\n\t            lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n\t          }\n\t          notation.needsLayout = true;\n\t          return;\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Shared layout initialization method for performLayout() and performLayoutAsync()\n\t     * @param  {ChantContext} ctxt\n\t     */\n\t\n\t  }, {\n\t    key: \"initializeLayout\",\n\t    value: function initializeLayout(ctxt) {\n\t      // setup the context\n\t      ctxt.activeClef = this.startingClef;\n\t      ctxt.notations = this.notations;\n\t      ctxt.currNotationIndex = 0;\n\t      ctxt.staffLineCount = this.staffLineCount;\n\t\n\t      if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\t\n\t      if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n\t    }\n\t\n\t    // this is the the synchronous version of performLayout that\n\t    // process everything without yielding to any other workers/threads.\n\t    // good for server side processing or very small chant pieces.\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt, force) {\n\t      if (!force && this.needsLayout === false) return; // nothing to do here!\n\t\n\t      ctxt.updateHyphenWidth();\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      for (var i = 0; i < this.notations.length; i++) {\n\t        var notation = this.notations[i];\n\t        if (force || notation.needsLayout) {\n\t          ctxt.currNotationIndex = i;\n\t          notation.performLayout(ctxt);\n\t        }\n\t      }\n\t\n\t      this.needsLayout = false;\n\t    }\n\t\n\t    // for web applications, probably performLayoutAsync would be more\n\t    // apppropriate that the above performLayout, since it will process\n\t    // the notations without locking up the UI thread.\n\t\n\t  }, {\n\t    key: \"performLayoutAsync\",\n\t    value: function performLayoutAsync(ctxt, finishedCallback) {\n\t      var _this7 = this;\n\t\n\t      if (this.needsLayout === false) {\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return; // nothing to do here!\n\t      }\n\t\n\t      if (ctxt.onFontLoaded) {\n\t        ctxt.onFontLoaded.push(function () {\n\t          return _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        });\n\t        return;\n\t      }\n\t\n\t      // check for sane value of hyphen width:\n\t      ctxt.updateHyphenWidth();\n\t      if (!ctxt.hyphenWidth || ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6) {\n\t        setTimeout(function () {\n\t          _this7.performLayoutAsync(ctxt, finishedCallback);\n\t        }, 100);\n\t        return;\n\t      }\n\t\n\t      this.initializeLayout(ctxt);\n\t\n\t      setTimeout(function () {\n\t        return _this7.layoutElementsAsync(ctxt, 0, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutElementsAsync\",\n\t    value: function layoutElementsAsync(ctxt, index, finishedCallback) {\n\t      var _this8 = this;\n\t\n\t      if (index >= this.notations.length) {\n\t        this.needsLayout = false;\n\t\n\t        if (finishedCallback) setTimeout(function () {\n\t          return finishedCallback();\n\t        }, 0);\n\t\n\t        return;\n\t      }\n\t\n\t      if (index === 0) ctxt.activeClef = this.startingClef;\n\t\n\t      var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n\t      do {\n\t        var notation = this.notations[index];\n\t        if (notation.needsLayout) {\n\t          ctxt.currNotationIndex = index;\n\t          notation.performLayout(ctxt);\n\t        }\n\t\n\t        index++;\n\t      } while (index < this.notations.length && new Date().getTime() < timeout);\n\t\n\t      // schedule the next block of processing\n\t      setTimeout(function () {\n\t        return _this8.layoutElementsAsync(ctxt, index, finishedCallback);\n\t      }, 0);\n\t    }\n\t  }, {\n\t    key: \"layoutChantLines\",\n\t    value: function layoutChantLines(ctxt, width, finishedCallback) {\n\t      this.lines = [];\n\t\n\t      if (ctxt.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n\t        var annotation = this.annotation,\n\t            annotationSpans = annotation.annotations ? annotation.annotations.map(function (annotation) {\n\t          return annotation.spans;\n\t        }) : [annotation.spans];\n\t        this.overrideTextLeft = new _ExsurgeDrawing.TextLeftRight(ctxt, \"\", \"textLeft\");\n\t        if (ctxt.mapAnnotationSpansToTextLeft) {\n\t          annotationSpans = annotationSpans.map(ctxt.mapAnnotationSpansToTextLeft);\n\t        }\n\t        this.overrideTextLeft.spans = ctxt.mergeAnnotationWithTextLeft.apply(ctxt, _toConsumableArray(annotationSpans).concat([this.titles.textLeft && this.titles.textLeft.spans]));\n\t      } else {\n\t        this.overrideTextLeft = null;\n\t      }\n\t\n\t      var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n\t      var currIndex = 0;\n\t\n\t      ctxt.activeClef = this.startingClef;\n\t\n\t      var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\t\n\t      do {\n\t        var line = new _ExsurgeChantChantLine.ChantLine(this);\n\t\n\t        line.buildFromChantNotationIndex(ctxt, currIndex, width);\n\t        currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n\t        line.performLayout(ctxt);\n\t        line.elementIndex = this.lines.length;\n\t        this.lines.push(line);\n\t\n\t        line.bounds.y = -line.bounds.y + y;\n\t        y += line.bounds.height + spaceBetweenSystems;\n\t      } while (currIndex < this.notations.length);\n\t\n\t      var lastLine = this.lines[this.lines.length - 1];\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = 0;\n\t      this.bounds.width = lastLine.bounds.width;\n\t      this.bounds.height = y - spaceBetweenSystems;\n\t\n\t      this.pages = [this];\n\t\n\t      if (this.selection) {\n\t        this.updateSelection(this.selection);\n\t      }\n\t\n\t      if (finishedCallback) finishedCallback(this);\n\t    }\n\t  }, {\n\t    key: \"paginate\",\n\t    value: function paginate(height) {\n\t      if (!height) return;\n\t      this.pages = [];\n\t      var pageHeightOffset = 0,\n\t          startLineIndex = 0;\n\t      for (var i = 1; i < this.lines.length; ++i) {\n\t        var line = this.lines[i];\n\t        var pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\t\n\t        if (pageHeight > height) {\n\t          // this line will be the first on the new page\n\t          this.pages.push(this.copyLines(startLineIndex, i));\n\t          startLineIndex = i;\n\t          pageHeightOffset = line.bounds.y - line.origin.y;\n\t          line.bounds.y = line.origin.y;\n\t        } else {\n\t          // not a new page yet...update the bounds:\n\t          line.bounds.y -= pageHeightOffset;\n\t        }\n\t      }\n\t      this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      if (this.titles) this.titles.draw(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        this.lines[i].draw(ctxt);\n\t      }canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt, zoom) {\n\t      var width = typeof zoom === \"number\" ? zoom * this.bounds.width : zoom ? undefined : this.bounds.width,\n\t          height = zoom ? undefined : this.bounds.height;\n\t\n\t      return {\n\t        xmlns: _ExsurgeDrawing.QuickSvg.ns,\n\t        \"xmlns:xlink\": _ExsurgeDrawing.QuickSvg.xlink,\n\t        version: \"1.1\",\n\t        class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n\t        width: width,\n\t        height: height,\n\t        viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      // create defs section\n\t      var node = [ctxt.defsNode.cloneNode(true)];\n\t      node[0].appendChild(ctxt.createStyleNode());\n\t\n\t      if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgNode(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, node);\n\t\n\t      node = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt, zoom) {\n\t      // create defs section\n\t      var node = [_ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"defs\", {}].concat(_toConsumableArray(ctxt.makeDefs.map(function (makeDef) {\n\t        return makeDef.makeSvgTree();\n\t      })), [ctxt.createStyleTree()]))];\n\t\n\t      if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        node.push(this.lines[i].createSvgTree(ctxt));\n\t      }node = _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {}].concat(_toConsumableArray(node)));\n\t      var svgProps = this.getSvgProps(ctxt, zoom);\n\t      svgProps.source = this;\n\t      node = _ExsurgeDrawing.QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvg\",\n\t    value: function createSvg(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n\t      }fragment += ctxt.createStyle();\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragment);\n\t\n\t      if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\t\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        fragment += this.lines[i].createSvgFragment(ctxt);\n\t      }fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, fragment);\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\t\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"createSvgNodeForEachLine\",\n\t    value: function createSvgNodeForEachLine(ctxt) {\n\t      var node = [];\n\t\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = [ctxt.defsNode.cloneNode(true), this.lines[i].createSvgNode(ctxt, top)];\n\t        lineFragment[0].appendChild(ctxt.createStyleNode());\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createNode(\"svg\", {\n\t          xmlns: _ExsurgeDrawing.QuickSvg.ns,\n\t          version: \"1.1\",\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height,\n\t          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n\t        }, lineFragment);\n\t        node.push(lineFragment);\n\t        top += height;\n\t      }\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgForEachLine\",\n\t    value: function createSvgForEachLine(ctxt) {\n\t      var fragment = \"\",\n\t          fragmentDefs = \"\";\n\t\n\t      // create defs section\n\t      for (var def in ctxt.defs) {\n\t        if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n\t      }fragmentDefs += ctxt.createStyle();\n\t\n\t      fragmentDefs = _ExsurgeDrawing.QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n\t      var top = 0;\n\t      for (var i = 0; i < this.lines.length; i++) {\n\t        var lineFragment = fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n\t        var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {}, lineFragment);\n\t        lineFragment = _ExsurgeDrawing.QuickSvg.createFragment(\"svg\", {\n\t          xmlns: _ExsurgeDrawing.QuickSvg.ns,\n\t          version: \"1.1\",\n\t          \"xmlns:xlink\": _ExsurgeDrawing.QuickSvg.xlink,\n\t          class: \"Exsurge ChantScore\",\n\t          width: this.bounds.width,\n\t          height: height\n\t        }, lineFragment);\n\t        fragment += lineFragment;\n\t        top += height;\n\t      }\n\t      return fragment;\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data, ctxt) {\n\t      this.autoColoring = data[\"auto-coloring\"];\n\t\n\t      if (data.annotation !== null && data.annotation !== \"\") {\n\t        // create the annotation\n\t        this.annotation = new _ExsurgeDrawing.Annotation(ctxt, data.annotation);\n\t      } else this.annotation = null;\n\t\n\t      var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\t\n\t      _ExsurgeGabc.Gabc.parseChantNotations(data.notations, this, createDropCap);\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      data[\"type\"] = \"score\";\n\t      data[\"auto-coloring\"] = true;\n\t\n\t      if (this.annotation !== null) data.annotation = this.annotation.unsanitizedText;else data.annotation = \"\";\n\t\n\t      return data;\n\t    }\n\t  }]);\n\t\n\t  return ChantScore;\n\t}();\n\t\n\tvar ChantDocument = exports.ChantDocument = function () {\n\t  function ChantDocument() {\n\t    _classCallCheck(this, ChantDocument);\n\t\n\t    var defaults = {\n\t      layout: {\n\t        units: \"mm\",\n\t        \"default-font\": {\n\t          \"font-family\": \"Crimson\",\n\t          \"font-size\": 14\n\t        },\n\t        page: {\n\t          width: 8.5,\n\t          height: 11,\n\t          \"margin-left\": 0,\n\t          \"margin-top\": 0,\n\t          \"margin-right\": 0,\n\t          \"margin-bottom\": 0\n\t        }\n\t      },\n\t      scores: []\n\t    };\n\t\n\t    // default layout\n\t    this.copyLayout(this, defaults);\n\t\n\t    this.scores = defaults.scores;\n\t  }\n\t\n\t  _createClass(ChantDocument, [{\n\t    key: \"copyLayout\",\n\t    value: function copyLayout(to, from) {\n\t      to.layout = {\n\t        units: from.layout.units,\n\t        \"default-font\": {\n\t          \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n\t          \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n\t        },\n\t        page: {\n\t          width: from.layout.page.width,\n\t          height: from.layout.page.height,\n\t          \"margin-left\": from.layout.page[\"margin-left\"],\n\t          \"margin-top\": from.layout.page[\"margin-top\"],\n\t          \"margin-right\": from.layout.page[\"margin-right\"],\n\t          \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n\t        }\n\t      };\n\t    }\n\t  }, {\n\t    key: \"unserializeFromJson\",\n\t    value: function unserializeFromJson(data) {\n\t      this.copyLayout(this, data);\n\t\n\t      this.scores = [];\n\t\n\t      // read in the scores\n\t      for (var i = 0; i < data.scores.length; i++) {\n\t        var score = new ChantScore();\n\t\n\t        score.unserializeFromJson(data.scores[i]);\n\t        this.scores.push(score);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"serializeToJson\",\n\t    value: function serializeToJson() {\n\t      var data = {};\n\t\n\t      this.copyLayout(data, this);\n\t\n\t      data.scores = [];\n\t\n\t      // save scores...\n\t      for (var i = 0; i < this.scores.length; i++) {\n\t        data.scores.push(this.scores[i].serializeToJson());\n\t      }return data;\n\t    }\n\t  }]);\n\n\t  return ChantDocument;\n\t}();\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ChantLine = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(10);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t// a chant line represents one staff line on the page. ChantLines are created by the score\n\t// and laid out by the page\n\tvar ChantLine = exports.ChantLine = function (_ChantLayoutElement) {\n\t  _inherits(ChantLine, _ChantLayoutElement);\n\t\n\t  function ChantLine(score) {\n\t    _classCallCheck(this, ChantLine);\n\t\n\t    var _this = _possibleConstructorReturn(this, (ChantLine.__proto__ || Object.getPrototypeOf(ChantLine)).call(this));\n\t\n\t    _this.score = score;\n\t\n\t    _this.notationsStartIndex = 0;\n\t    _this.numNotationsOnLine = 0;\n\t    _this.notationBounds = null; // Rect\n\t\n\t    _this.staffLeft = 0;\n\t    _this.staffRight = 0;\n\t\n\t    _this.startingClef = null; // necessary for the layout process\n\t    _this.custos = null;\n\t\n\t    _this.justify = true;\n\t\n\t    // these are markings that exist at the chant line level rather than at the neume level.\n\t    _this.ledgerLines = [];\n\t    _this.braces = [];\n\t\n\t    _this.nextLine = null;\n\t    _this.previousLine = null; // for layout assistance\n\t\n\t    _this.lyricLineHeight = 0; // height of each text line\n\t    _this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n\t    _this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\t\n\t    // fixme: make these configurable values from the score\n\t    _this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n\t    _this.spaceBetweenTextTracks = 0; // spacing between each text track\n\t\n\t    _this.lastLyrics = [];\n\t    return _this;\n\t  }\n\t\n\t  _createClass(ChantLine, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // start off with a rectangle that holds at least the four staff lines\n\t      var staffSpaces = this.staffSpaces;\n\t      var staffLineCount = this.score.staffLineCount;\n\t      this.notationBounds = new _ExsurgeCore.Rect(this.staffLeft, -(ctxt.staffLineWeight / 2 + staffLineCount * 2 - 1 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval, this.staffRight - this.staffLeft, (ctxt.staffLineWeight + staffSpaces * 2 + ctxt.minSpaceAboveStaff) * ctxt.staffInterval);\n\t\n\t      // run through all the elements of the line and calculate the bounds of the notations,\n\t      // as well as the bounds of each text track we will use\n\t      var i;\n\t      var notations = this.score.notations;\n\t      var lastNeumeIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var notation = null;\n\t\n\t      this.notationBounds.union(this.startingClef.bounds);\n\t\n\t      // reset the lyric line offsets before we [re]calculate them now\n\t      this.lyricLineHeight = ctxt.textStyles.lyric.size * (ctxt.textStyles.lyric.lineHeight || 1.1);\n\t      this.lyricLineBaseline = 0;\n\t      this.numLyricLines = 0;\n\t\n\t      this.altLineHeight = 0;\n\t      this.altLineBaseline = 0;\n\t      this.numAltLines = 0;\n\t\n\t      this.translationLineHeight = ctxt.textStyles.translation.size * (ctxt.textStyles.translation.lineHeight || 1.1);\n\t      this.translationLineBaseline = 0;\n\t      this.numTranslationLines = 0;\n\t\n\t      var aboveLinesLineHeight = ctxt.textStyles.al.size * (ctxt.textStyles.al.lineHeight || 1.1);\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t\n\t        if (notation.bounds.height || notation.bounds.width) this.notationBounds.union(notation.bounds);\n\t\n\t        // keep track of lyric line offsets\n\t        if (notation.lyrics.length && notation.lyrics[0].text) {\n\t          // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n\t          //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n\t          if (notation.lyrics[0].origin.y > this.lyricLineBaseline) this.lyricLineBaseline = notation.lyrics[0].origin.y;\n\t          if (notation.lyrics.length > this.numLyricLines) this.numLyricLines = notation.lyrics.length;\n\t        }\n\t\n\t        if (notation.alText && this.numAltLines < notation.alText.length) {\n\t          if (notation.alText[0].bounds.height > this.altLineHeight) this.altLineHeight = notation.alText[0].bounds.height;\n\t          if (notation.alText[0].origin.y > this.altLineBaseline) this.altLineBaseline = notation.alText[0].origin.y;\n\t          if (notation.alText.length > this.numAltLines) this.numAltLines = notation.alText.length;\n\t        }\n\t\n\t        if (notation.translationText && notation.translationText[0] && notation.translationText[0].text) {\n\t          // if (\n\t          //   notation.translationText[0].bounds.height > this.translationLineHeight\n\t          // )\n\t          //   this.translationLineHeight =\n\t          //     notation.translationText[0].bounds.height;\n\t          if (notation.translationText[0].origin.y > this.translationLineBaseline) this.translationLineBaseline = notation.translationText[0].origin.y;\n\t          if (notation.translationText.length > this.numTranslationLines) this.numTranslationLines = notation.translationText.length;\n\t        }\n\t      }\n\t\n\t      if (this.custos) this.notationBounds.union(this.custos.bounds);\n\t\n\t      // add any braces to the notationBounds as well\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        this.notationBounds.union(this.braces[i].bounds);\n\t      } // finalize the lyrics placement\n\t      var notationBoundsOffset = this.notationBounds.bottom() + ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n\t      this.lyricLineBaseline += notationBoundsOffset;\n\t      this.translationLineBaseline += notationBoundsOffset;\n\t      this.altLineBaseline += this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\t\n\t      for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n\t        notation = notations[i];\n\t        var offset = 0;\n\t        for (var j = 0; j < notation.lyrics.length; j++) {\n\t          notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t\n\t        if (notation.translationText) {\n\t          for (j = 0; j < notation.translationText.length; j++) {\n\t            notation.translationText[j].bounds.y = offset + this.translationLineBaseline;\n\t            offset += this.translationLineHeight;\n\t          }\n\t        }\n\t\n\t        if (notation.alText) {\n\t          offset = 0;\n\t          for (j = 0; j < notation.alText.length; j++) {\n\t            notation.alText[j].bounds.y = offset + this.altLineBaseline;\n\t            offset -= aboveLinesLineHeight;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.extraTextOnlyHeight = 0;\n\t      // handle placement of extra TextOnly elements:\n\t      if (ctxt.useExtraTextOnly) {\n\t        var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t        if (this.extraTextOnlyIndex === null) {\n\t          // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n\t          var lastNotation = notations[lastNeumeIndex - 1] || {};\n\t          if (lastNotation.constructor === _ExsurgeChant.ChantLineBreak) lastNotation = notations[lastNeumeIndex - 2];\n\t          if (lastNotation.constructor === _ExsurgeChant.TextOnly && lastNotation.lyrics.length === 1 && lastNotation.lyrics[0].bounds.height > this.lyricLineHeight) {\n\t            this.extraTextOnlyHeight = this.lyricLineHeight;\n\t          }\n\t        } else {\n\t          var lastLyrics = null;\n\t          var xOffset = 0;\n\t          offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n\t          offset += this.numTranslationLines * this.translationLineHeight;\n\t          var extraLines = 0;\n\t          for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n\t            notation = notations[i];\n\t            if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n\t            lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n\t            if (lastLyrics.lineWidth) {\n\t              xOffset = this.staffRight - lastLyrics.lineWidth;\n\t              offset += this.lyricLineHeight;\n\t              extraLines++;\n\t            }\n\t            extraLines += lastLyrics.numLines - 1;\n\t            lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n\t            notation.bounds.x += xOffset;\n\t          }\n\t          this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n\t        }\n\t      }\n\t\n\t      if (this.startingClef.hasLyrics()) {\n\t        offset = 0;\n\t        for (j = 0; j < this.startingClef.lyrics.length; j++) {\n\t          this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n\t          offset += this.lyricLineHeight;\n\t        }\n\t      }\n\t\n\t      // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.annotation !== null) {\n\t          // annotations use dominant-baseline to align text to the top\n\t          this.score.annotation.bounds.x = this.staffLeft / 2;\n\t          this.score.annotation.bounds.y = -ctxt.staffInterval * (staffLineCount * 2 - 1);\n\t          if (this.score.dropCap !== null) {\n\t            var lowestPossibleAnnotationY = this.lyricLineBaseline - this.score.annotation.bounds.height - ctxt.staffInterval * ctxt.textStyles.annotation.padding - this.score.dropCap.origin.y;\n\t            // if the annotation would overlap with the drop cap, move the annotation higher.\n\t            // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n\t            if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n\t              this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n\t            } else {\n\t              this.score.annotation.bounds.y = (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n\t            }\n\t            if (this.score.annotation.bounds.y < this.notationBounds.y) {\n\t              this.notationBounds.y = this.score.annotation.bounds.y;\n\t              this.notationBounds.height += this.notationBounds.y - this.score.annotation.bounds.y;\n\t            }\n\t          }\n\t          this.score.annotation.bounds.y += this.score.annotation.origin.y;\n\t        }\n\t\n\t        if (this.score.dropCap !== null) {\n\t          // drop caps and annotations are drawn from their center, so aligning them\n\t          // horizontally is as easy as this.staffLeft / 2\n\t          this.score.dropCap.bounds.x = this.staffLeft / 2;\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline - this.score.dropCap.origin.y;\n\t          this.notationBounds.union(this.score.dropCap.bounds);\n\t          this.score.dropCap.bounds.y = this.lyricLineBaseline;\n\t        }\n\t      }\n\t\n\t      if (this.numLyricLines > 0) {\n\t        // add up the lyric line heights to get the total height of the chant line\n\t        var lyricAndTextRect = new _ExsurgeCore.Rect(0, notationBoundsOffset, 0, this.lyricLineHeight * this.numLyricLines + this.extraTextOnlyHeight + this.translationLineHeight * this.numTranslationLines);\n\t        this.notationBounds.union(lyricAndTextRect);\n\t      }\n\t      if (this.numAltLines > 0) {\n\t        var altLineTextRect = new _ExsurgeCore.Rect(0, this.notationBounds.y - this.altLineHeight - 0.5 * ctxt.staffInterval - aboveLinesLineHeight * (this.numAltLines - 1), 0, aboveLinesLineHeight * this.numAltLines);\n\t        this.notationBounds.union(altLineTextRect);\n\t      }\n\t      // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n\t      this.notationBounds.union(new _ExsurgeCore.Rect(0, -ctxt.staffInterval, // lowest staff line\n\t      0, (ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) * ctxt.staffInterval));\n\t      var totalHeight = this.notationBounds.height;\n\t\n\t      this.bounds.x = 0;\n\t      this.bounds.y = this.notationBounds.y;\n\t      this.bounds.width = this.notationBounds.right();\n\t      this.bounds.height = totalHeight;\n\t\n\t      // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n\t      this.origin = new _ExsurgeCore.Point(this.staffLeft, -this.notationBounds.y);\n\t    }\n\t\n\t    // TODO: remove if not necsessary\n\t\n\t  }, {\n\t    key: \"layoutInsertionCursor\",\n\t    value: function layoutInsertionCursor(ctxt) {\n\t      if (this.insertionCursor) {\n\t        // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n\t        this.insertionCursor.performLayout(ctxt);\n\t        this.insertionCursor.bounds.x = this.score.insertionElement.bounds.right() + (this.score.insertionElement.trailingSpace && this.score.insertionElement.calculatedTrailingSpace || 0) / 2 - this.insertionCursor.origin.x;\n\t      }\n\t      return this.insertionCursor;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      // draw the staff lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight,\n\t          y;\n\t      canvasCtxt.lineWidth = ctxt.staffLineWeight;\n\t      canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\t\n\t      for (i = this.score.staffLineCount * -2 + 1; i < 0; i += 2) {\n\t        y = ctxt.staffInterval * i;\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(x1, y);\n\t        canvasCtxt.lineTo(x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        this.insertionCursor.draw(ctxt);\n\t      }\n\t\n\t      // draw the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        canvasCtxt.beginPath();\n\t        canvasCtxt.moveTo(ledgerLine.x1, y);\n\t        canvasCtxt.lineTo(ledgerLine.x2, y);\n\t        canvasCtxt.stroke();\n\t      }\n\t\n\t      // fixme: draw the braces\n\t\n\t      // draw the dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          this.score.annotation.draw(ctxt);\n\t      }\n\t\n\t      // draw the notations\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        notations[i].draw(ctxt);\n\t      }this.startingClef.draw(ctxt);\n\t\n\t      if (this.custos) this.custos.draw(ctxt);\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t      var functionNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { quickSvg: \"createNode\", elements: \"createSvgNode\" };\n\t\n\t      var inner = [];\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t      var staffSpaces = this.staffSpaces;\n\t      if (ctxt.editable) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"rect\", {\n\t          key: \"insertion\",\n\t          x: x1,\n\t          y: ctxt.staffInterval * this.score.staffLineCount * -2 + 1,\n\t          width: x2 - x1,\n\t          height: ctxt.staffInterval * 2 * staffSpaces,\n\t          fill: \"none\"\n\t        }));\n\t      }\n\t\n\t      // create the staff lines\n\t      for (i = this.score.staffLineCount * -2 + 1; i < 0; i += 2) {\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          key: i,\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        }));\n\t      }\n\t\n\t      inner = [_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)];\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner.push(this.insertionCursor[functionNames.elements](ctxt));\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner.push(_ExsurgeDrawing.QuickSvg[functionNames.quickSvg](\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        }));\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner.push(this.braces[i][functionNames.elements](ctxt));\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\t\n\t        if (this.score.annotation !== null && (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner = inner.concat(this.score.annotation[functionNames.elements](ctxt));\n\t      }\n\t\n\t      inner.push(this.startingClef[functionNames.elements](ctxt));\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner.push(notations[i][functionNames.elements](ctxt));\n\t      }if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n\t      return inner;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createNode\",\n\t        elements: \"createSvgNode\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex,\n\t        source: this\n\t      }, inner);\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = this.getInnerNodes(ctxt, top, {\n\t        quickSvg: \"createSvgTree\",\n\t        elements: \"createSvgTree\"\n\t      });\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }].concat(_toConsumableArray(inner)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\t\n\t      var inner = \"\";\n\t\n\t      // add the chant lines\n\t      var i,\n\t          x1 = this.staffLeft,\n\t          x2 = this.staffRight;\n\t\n\t      // create the staff lines\n\t      for (i = this.score.staffLineCount * -2 + 1; i < 0; i += 2) {\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: x1,\n\t          y1: ctxt.staffInterval * i,\n\t          x2: x2,\n\t          y2: ctxt.staffInterval * i,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"staffLine\"\n\t        });\n\t      }\n\t\n\t      inner = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\t\n\t      if (this.layoutInsertionCursor(ctxt)) {\n\t        inner += this.insertionCursor.createSvgFragment(ctxt);\n\t      }\n\t\n\t      // create the ledger lines\n\t      for (i = 0; i < this.ledgerLines.length; i++) {\n\t        var ledgerLine = this.ledgerLines[i];\n\t        var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\t\n\t        inner += _ExsurgeDrawing.QuickSvg.createFragment(\"line\", {\n\t          x1: ledgerLine.x1,\n\t          y1: y,\n\t          x2: ledgerLine.x2,\n\t          y2: y,\n\t          stroke: ctxt.staffLineColor,\n\t          \"stroke-width\": ctxt.staffLineWeight,\n\t          class: \"ledgerLine\"\n\t        });\n\t      }\n\t\n\t      // add any braces\n\t      for (i = 0; i < this.braces.length; i++) {\n\t        inner += this.braces[i].createSvgFragment(ctxt);\n\t      } // dropCap and the annotations\n\t      if (this.notationsStartIndex === 0) {\n\t        if (this.score.dropCap !== null) inner += this.score.dropCap.createSvgFragment(ctxt);\n\t\n\t        if (this.score.annotation !== null && (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap))\n\t          // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n\t          inner += this.score.annotation.createSvgFragment(ctxt);\n\t      }\n\t\n\t      inner += this.startingClef.createSvgFragment(ctxt);\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // add all of the notations\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        inner += notations[i].createSvgFragment(ctxt);\n\t      }if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"g\", {\n\t        class: \"chantLine\",\n\t        transform: \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n\t        \"element-index\": this.elementIndex\n\t      }, inner);\n\t    }\n\t\n\t    // code below based on code by: https://gist.github.com/alexhornbake\n\t    //\n\t    // optimized for braces that are only drawn horizontally.\n\t    // returns svg path string ready to insert into svg doc\n\t\n\t  }, {\n\t    key: \"generateCurlyBraceDrawable\",\n\t    value: function generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n\t      var h;\n\t\n\t      if (isAbove) h = -ctxt.staffInterval / 2;else h = ctxt.staffInterval / 2;\n\t\n\t      // and q factor, .5 is normal, higher q = more expressive bracket\n\t      var q = 0.6;\n\t\n\t      var len = x2 - x1;\n\t\n\t      //Calculate Control Points of path,\n\t      var qx1 = x1;\n\t      var qy1 = y + q * h;\n\t      var qx2 = x1 + 0.25 * len;\n\t      var qy2 = y + (1 - q) * h;\n\t      var tx1 = x1 + 0.5 * len;\n\t      var ty1 = y + h;\n\t      var qx3 = x2;\n\t      var qy3 = y + q * h;\n\t      var qx4 = x1 + 0.75 * len;\n\t      var qy4 = y + (1 - q) * h;\n\t      var d = \"M \" + x1 + \" \" + y + \" Q \" + qx1 + \" \" + qy1 + \" \" + qx2 + \" \" + qy2 + \" T \" + tx1 + \" \" + ty1 + \" M \" + x2 + \" \" + y + \" Q \" + qx3 + \" \" + qy3 + \" \" + qx4 + \" \" + qy4 + \" T \" + tx1 + \" \" + ty1;\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"path\", {\n\t        d: d,\n\t        stroke: ctxt.neumeLineColor,\n\t        \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n\t        fill: \"none\"\n\t      });\n\t    }\n\t  }, {\n\t    key: \"buildFromChantNotationIndex\",\n\t    value: function buildFromChantNotationIndex(ctxt, newElementStart, width) {\n\t      // todo: reset / clear the children we have in case they have data\n\t      var notations = this.score.notations,\n\t          beginningLyrics = null,\n\t          prev = null,\n\t          prevNeume = null,\n\t          prevLyrics = [];\n\t      var condensableSpaces = [];\n\t      this.notationsStartIndex = newElementStart;\n\t      this.numNotationsOnLine = 0;\n\t\n\t      this.staffLeft = 0;\n\t      this.paddingLeft = 0;\n\t\n\t      this.extraTextOnlyIndex = null;\n\t      this.extraTextOnlyLyricIndex = 0;\n\t\n\t      if (width > 0) this.staffRight = width;else this.staffRight = Infinity; // no limit to staff size\n\t\n\t      // If this is the first chant line, then we have to make room for a\n\t      // drop cap and/or annotation, if present\n\t      if (this.notationsStartIndex === 0) {\n\t        var padding = 0;\n\t\n\t        if (this.score.dropCap !== null) padding = this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\t\n\t        if (this.score.annotation !== null && (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap)) padding = Math.max(padding, this.score.annotation.bounds.width + this.score.annotation.padding * 2);\n\t\n\t        this.staffLeft += padding;\n\t        if (this.score.dropCap !== null) this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n\t      } else {\n\t        prev = notations[newElementStart - 1];\n\t        if (prev.constructor === _ExsurgeChantSigns.DoubleBar && prev.hasLyrics() && (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))) {\n\t          beginningLyrics = prev.lyrics.map(function (lyric) {\n\t            var newLyric = new _ExsurgeDrawing.Lyric(ctxt, lyric.originalText, lyric.lyricType, lyric.notation, lyric.notations, lyric.sourceIndex);\n\t            newLyric.elidesToNext = lyric.elidesToNext;\n\t            // Hide the original lyric by setting its bounds.y to an extremely high number.\n\t            // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n\t            lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n\t            return newLyric;\n\t          });\n\t          var minX = beginningLyrics.map(function (l) {\n\t            return l.bounds.x;\n\t          }).reduce(function (a, b) {\n\t            return a < b ? a : b;\n\t          });\n\t          beginningLyrics.forEach(function (l) {\n\t            l.bounds.x -= minX;\n\t          });\n\t        }\n\t      }\n\t\n\t      // set up the clef...\n\t      // if the first notation on the line is a starting clef, then we treat it a little differently...\n\t      // the clef becomes this line's starting clef and we skip over the clef in the notations array\n\t      if (notations.length && notations[newElementStart].isClef) {\n\t        ctxt.activeClef = notations[newElementStart];\n\t        newElementStart++;\n\t        this.notationsStartIndex++;\n\t      }\n\t\n\t      // make a copy for this line to use at the beginning\n\t      this.startingClef = ctxt.activeClef.clone();\n\t      this.startingClef.performLayout(ctxt);\n\t      this.startingClef.bounds.x = this.staffLeft;\n\t\n\t      var curr = this.startingClef;\n\t\n\t      if (beginningLyrics) {\n\t        _ExsurgeDrawing.LyricArray.setNotation(beginningLyrics, curr);\n\t      }\n\t\n\t      // estimate how much space we have available to us\n\t      var rightNotationBoundary = this.staffRight - _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n\t      var lastTranslationTextWithEndNeume = null;\n\t\n\t      // iterate through the notations, fittng what we can on this line\n\t      var i,\n\t          j,\n\t          lastNotationIndex = notations.length - 1;\n\t\n\t      if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t      // if we already have a start brace on the context, we must be continuing it from the previous system.\n\t      if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n\t        ctxt.lastStartBrace.note = this.startingClef;\n\t      }\n\t      var lastLyricsBeforeTextOnly;\n\t      var textOnlyStartIndex;\n\t\n\t      for (i = newElementStart; i <= lastNotationIndex; i++) {\n\t        prev = curr;\n\t        if (curr.constructor !== _ExsurgeChant.TextOnly) prevNeume = curr;\n\t\n\t        curr = notations[i];\n\t\n\t        var actualRightBoundary;\n\t        if (i === lastNotationIndex || curr.constructor === _ExsurgeChantSigns.Custos || prev.constructor === _ExsurgeChantSigns.Custos && curr.isDivider || curr.constructor === _ExsurgeChant.ChantLineBreak && prevNeume.constructor === _ExsurgeChantSigns.Custos) {\n\t          // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n\t          // right boundary.\n\t          // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n\t          // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n\t          // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n\t          actualRightBoundary = this.staffRight;\n\t        } else if (i === lastNotationIndex - 1) {\n\t          // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n\t          // between the final notation and a custos:\n\t          actualRightBoundary = Math.max(rightNotationBoundary, this.staffRight - notations[lastNotationIndex].bounds.width);\n\t        } else {\n\t          // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n\t          actualRightBoundary = rightNotationBoundary;\n\t        }\n\t\n\t        // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n\t        // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n\t        var forceBreak = !curr.isDivider && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && !(curr.constructor === _ExsurgeChant.TextOnly && curr.hasLyrics() && /^(?:[*†]|i+j\\.?)$/.test(curr.lyrics[0].text)) && lastNotationIndex - i > 1 && !prevNeume.keepWithNext && prevNeume.bounds.right() >= rightNotationBoundary;\n\t\n\t        // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n\t        forceBreak = forceBreak || this.extraTextOnlyIndex !== null && curr.constructor !== _ExsurgeChant.TextOnly && curr.constructor !== _ExsurgeChant.ChantLineBreak && curr.constructor !== _ExsurgeChantSigns.Custos && curr.hasLyrics();\n\t\n\t        if (curr instanceof _ExsurgeChant.TextOnly && prev === prevNeume) {\n\t          lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n\t          textOnlyStartIndex = i;\n\t        }\n\t        if (curr instanceof _ExsurgeChant.TextOnly && notations[textOnlyStartIndex] && !notations[textOnlyStartIndex].hasLyrics()) {\n\t          // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n\t          // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n\t          // that does have lyrics, we will use it instead\n\t          textOnlyStartIndex = i;\n\t        }\n\t\n\t        if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n\t          curr.lyrics[0].recalculateMetrics(ctxt);\n\t        }\n\t\n\t        // try to fit the curr element on this line.\n\t        // if it doesn't fit, we finish up here.\n\t        var fitsOnLine = !forceBreak && this.positionNotationElement(ctxt, this.lastLyrics, prevNeume, curr, actualRightBoundary, this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n\t        );\n\t        var candidateForExtraTextOnlyLine = ctxt.useExtraTextOnly && curr.constructor === _ExsurgeChant.TextOnly && _ExsurgeDrawing.LyricArray.hasOnlyOneLyric(curr.lyrics) && (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n\t        var extraTextOnlyLyricIndex;\n\t        if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n\t          // check to make sure there is enough text to put on the text only line:\n\t          extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t          if (textOnlyStartIndex === i) {\n\t            var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n\t            if (currentLyric.length <= 1) {\n\t              var nextNotation = notations[i + 1];\n\t              candidateForExtraTextOnlyLine = nextNotation && nextNotation.constructor === _ExsurgeChant.TextOnly && nextNotation.lyrics[extraTextOnlyLyricIndex] && nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n\t            }\n\t          }\n\t        }\n\t        if (candidateForExtraTextOnlyLine) {\n\t          // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n\t          // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n\t          // line of lyrics associated with them.\n\t          var firstOnLine;\n\t          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n\t          if (this.extraTextOnlyIndex === null && notations[textOnlyStartIndex].lyrics.length) {\n\t            if (textOnlyStartIndex === this.notationsStartIndex || !ctxt.startExtraTextOnlyFromFirst) {\n\t              textOnlyStartIndex = i;\n\t              var lastNotationWithLyrics = notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return notation.hasLyrics();\n\t              });\n\t              lastLyricsBeforeTextOnly = lastNotationWithLyrics && lastNotationWithLyrics.lyrics.slice() || [];\n\t            }\n\t            // go back to the first in this string of consecutive TextOnly elements.\n\t            this.extraTextOnlyIndex = textOnlyStartIndex;\n\t            extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = _ExsurgeDrawing.LyricArray.indexOfLyric(curr.lyrics);\n\t            this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n\t            this.lastLyrics = [];\n\t            i = textOnlyStartIndex - 1;\n\t            this.numNotationsOnLine = textOnlyStartIndex - this.notationsStartIndex;\n\t            continue;\n\t          }\n\t          delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n\t          if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n\t            curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n\t            var lastLyricRight = ctxt.startExtraTextOnlyFromFirst ? _ExsurgeDrawing.LyricArray.getRight(this.lastLyrics) + (ctxt.minLyricWordSpacing || 0) : 0;\n\t            curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(ctxt, this.staffRight, this.staffRight - lastLyricRight);\n\t            firstOnLine = curr;\n\t          }\n\t          if (firstOnLine) firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[extraTextOnlyLyricIndex].getRight();\n\t        } else if (fitsOnLine === false) {\n\t          var isTextOnlyBeforeDivider = function isTextOnlyBeforeDivider(i) {\n\t            var curr = notations[i];\n\t            if (curr.constructor !== _ExsurgeChant.TextOnly) return false;\n\t            var firstDivider = notations.slice(i + 1).findIndex(function (notation) {\n\t              return notation.isDivider;\n\t            });\n\t            if (firstDivider < 0) return false;\n\t            return notations.slice(i + 1, i + 1 + firstDivider).every(function (notation) {\n\t              return notation.constructor === _ExsurgeChant.TextOnly;\n\t            });\n\t          };\n\t          // first check for elements that cannot begin a system: dividers and custodes\n\t          while (this.numNotationsOnLine > 1 && (curr.isDivider || curr.constructor === _ExsurgeChantSigns.Custos || isTextOnlyBeforeDivider(i))) {\n\t            curr = notations[--i];\n\t            this.numNotationsOnLine--;\n\t            if (this.lastLyricsBeforeTextOnly && isTextOnlyBeforeDivider(i)) {\n\t              delete this.lastLyricsBeforeTextOnly;\n\t            }\n\t          }\n\t\n\t          if (lastTranslationTextWithEndNeume) {}\n\t          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n\t          // TODO?: need to go back to before the last translation text start:\n\t\n\t\n\t          // count syllables and notes\n\t          var notationsAfterBreak = notations.slice(i + 1);\n\t          var countSyllables = 0;\n\t          var countNotes = 0;\n\t          if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n\t            countSyllables = notationsAfterBreak.filter(function (notation) {\n\t              return notation.hasLyrics();\n\t            }).length;\n\t            countNotes = notationsAfterBreak.flatMap(function (notation) {\n\t              return notation.notes;\n\t            }).filter(function (note) {\n\t              return !!note;\n\t            }).length;\n\t          }\n\t\n\t          // check if the prev elements want to be kept with this one\n\t          for (j = i - 1; j > this.notationsStartIndex; j--) {\n\t            var cne = notations[j];\n\t            curr = notations[j + 1];\n\t\n\t            // curr is the first notation on the next line\n\t            // cne is the last notation on this line\n\t            if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n\t              countSyllables += curr.hasLyrics() ? 1 : 0;\n\t              countNotes += (curr.notes || []).length;\n\t            }\n\t\n\t            if (cne.firstWithNoWidth) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // don't let a line break occur in the middle of a translation\n\t            if (lastTranslationTextWithEndNeume) {\n\t              this.numNotationsOnLine--;\n\t              if (cne === lastTranslationTextWithEndNeume) {\n\t                lastTranslationTextWithEndNeume = null;\n\t              }\n\t              continue;\n\t            }\n\t\n\t            // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n\t            if (curr && curr.notes && (curr.notes[0].shape === _ExsurgeChant.NoteShape.Quilisma || curr.notes[0].shape === _ExsurgeChant.NoteShape.Inclinatum)) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            if (countSyllables < ctxt.minSyllablesLastLine && countNotes < ctxt.minNotesLastLine) {\n\t              this.numNotationsOnLine--;\n\t              continue;\n\t            }\n\t\n\t            // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n\t            // whether there would be too much space introduced between\n\t            if (cne.keepWithNext === true) {\n\t              if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine) this.maxNumNotationsOnLine = this.numNotationsOnLine;\n\t              this.numNotationsOnLine--;\n\t            } else break;\n\t          }\n\t          if (this.extraTextOnlyIndex && this.notationsStartIndex + this.numNotationsOnLine <= this.extraTextOnlyIndex) {\n\t            // we've cut back to before the extra text only index, so we have to remove it:\n\t            this.extraTextOnlyIndex = null;\n\t          }\n\t\n\t          // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n\t          if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\t\n\t          // determine the neumes we can space apart, if we do end up justifying\n\t          curr = this.findNeumesToJustify(prevLyrics);\n\t\n\t          this.lastLyrics = prevLyrics;\n\t          if (this.maxNumNotationsOnLine) {\n\t            // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n\t            // Check how much space we would have without the extra notations\n\t            var extraSpace = this.getWhitespaceOnRight(ctxt);\n\t            if (extraSpace / this.toJustify.length > ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals) {\n\t              _ExsurgeDrawing.LyricArray.mergeInArray(prevLyrics, notations.slice(this.notationsStartIndex + this.numNotationsOnLine, this.notationsStartIndex + this.maxNumNotationsOnLine));\n\t              this.numNotationsOnLine = this.maxNumNotationsOnLine;\n\t              delete this.maxNumNotationsOnLine;\n\t            }\n\t          }\n\t\n\t          // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n\t          var next = this.score.notations[this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex];\n\t          if (next && next.hasLyrics() && (next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable || next.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable)) {\n\t            this.toJustify.push(this.custos);\n\t          }\n\t\n\t          if (j >= 1 && notations[j].isDivider && notations[j - 1].constructor === _ExsurgeChantSigns.Custos) {\n\t            // reverse the order: put the divider first, and end the line with the custos.\n\t            prevLyrics = [];\n\t            for (i = j - 2; i >= this.notationsStartIndex; i--) {\n\t              if (notations[i].hasLyrics()) {\n\t                _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n\t                break;\n\t              }\n\t            }\n\t            // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            condensableSpaces.sum -= condensableSpaces.pop().condensable;\n\t            this.positionNotationElement(ctxt, prevLyrics, notations[j - 2], notations[j], this.staffRight, condensableSpaces);\n\t            this.custos = notations[j - 1];\n\t            this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t          }\n\t\n\t          // we are at the end of the line!\n\t          break;\n\t        }\n\t\n\t        if (curr.hasLyrics()) _ExsurgeDrawing.LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\t\n\t        if (lastTranslationTextWithEndNeume && curr === lastTranslationTextWithEndNeume.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = null;\n\t        } else if (curr.translationText && curr.translationText.length && curr.translationText[0].endNeume) {\n\t          lastTranslationTextWithEndNeume = curr;\n\t        }\n\t\n\t        curr.line = this;\n\t        this.numNotationsOnLine++;\n\t\n\t        if (curr.isClef) ctxt.activeClef = curr;\n\t\n\t        // line breaks are a special case indicating to stop processing here\n\t        if (curr.constructor === _ExsurgeChant.ChantLineBreak && width > 0) {\n\t          this.justify = curr.justify || this.extraTextOnlyIndex !== null || this.getWhitespaceOnRight(ctxt) < 0;\n\t          if (this.justify) this.findNeumesToJustify(prevLyrics);\n\t          break;\n\t        }\n\t\n\t        if (curr.constructor === _ExsurgeChantSigns.Custos) {\n\t          this.custos = curr;\n\t        } else if (curr.isNeume) {\n\t          this.custos = null;\n\t        }\n\t      }\n\t\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n\t      var last = notations[lastIndex] || {};\n\t      while (lastIndex > 0 && (last.constructor === _ExsurgeChant.ChantLineBreak || last.constructor === _ExsurgeChantSigns.Custos || last.constructor === _ExsurgeChant.TextOnly)) {\n\t        last = notations[--lastIndex];\n\t      }\n\t      var isLastLine = this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n\t      if (this.justify && this.extraTextOnlyIndex !== null || width > 0 && isLastLine) {\n\t        // this is the last chant line, or it has extra TextOnly elements at the end\n\t        if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n\t        this.justify = (!isLastLine || last.isDivider) && this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <= ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n\t      }\n\t\n\t      if (!this.custos) {\n\t        // create the automatic custos at the end of the line if there are neumes left in the notations\n\t        for (i = this.notationsStartIndex + this.numNotationsOnLine; i < notations.length; i++) {\n\t          var notation = notations[i];\n\t\n\t          if (notation.isNeume) {\n\t            this.custos = new _ExsurgeChantSigns.Custos(true);\n\t            ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n\t            this.custos.performLayout(ctxt);\n\t\n\t            if (this.justify) {\n\t              // Put the custos at the very end of the line\n\t              this.custos.bounds.x = this.staffRight - this.custos.bounds.width - this.custos.leadingSpace;\n\t            } else {\n\t              this.custos.bounds.x = prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n\t            }\n\t            // nothing more to see here...\n\t            break;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.lastLyricsBeforeTextOnly) {\n\t        this.lastLyrics = this.lastLyricsBeforeTextOnly;\n\t        delete this.lastLyricsBeforeTextOnly;\n\t      }\n\t\n\t      // find the final lyric and mark it as connecting if needed.\n\t      if (width > 0) {\n\t        var whitespace = this.getWhitespaceOnRight();\n\t        var rightEdge = this.staffRight;\n\t        if (whitespace < 0) {\n\t          rightEdge -= whitespace;\n\t        }\n\t      }\n\t      i = 0;\n\t      while (this.lastLyrics && this.lastLyrics[i]) {\n\t        var lyrics = this.lastLyrics[i];\n\t        if (lyrics.allowsConnector()) {\n\t          lyrics.setNeedsConnector(true, 0);\n\t          if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t            whitespace = rightEdge - lyrics.getRight();\n\t            // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n\t            if (whitespace < 0) {\n\t              var minHyphenWidth = Math.max(ctxt.hyphenWidth + whitespace, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t        }\n\t        ++i;\n\t      }\n\t\n\t      // if the provided width is less than zero, then set the width of the line\n\t      // based on the last notation\n\t      if (width <= 0) {\n\t        this.staffRight = notations[this.notationsStartIndex + this.numNotationsOnLine - 1].bounds.right();\n\t        this.justify = false;\n\t      }\n\t\n\t      // Justify the line if we need to\n\t      this.justifyElements(ctxt, this.justify, condensableSpaces);\n\t\n\t      this.centerDividers();\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"centerDividers\",\n\t    value: function centerDividers() {\n\t      var lastIndex = this.extraTextOnlyIndex === null ? this.notationsStartIndex + this.numNotationsOnLine : this.extraTextOnlyIndex,\n\t          curr;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        curr = this.score.notations[i];\n\t\n\t        if (curr && curr.isDivider) {\n\t          var j = 1;\n\t          var prev = this.score.notations[i - 1];\n\t          var next = i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n\t          if (prev === next && next === this.custos) {\n\t            prev = this.score.notations[i - 2];\n\t            // force custos to right edge in this case, since it is a custos that exists\n\t            // regardless of line break, and would normally be before the double bar, but in this case it ends the line:\n\t            next.bounds.x = this.staffRight - next.bounds.width;\n\t          }\n\t          if (prev && next) {\n\t            //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n\t            var oldBoundsX = curr.bounds.x;\n\t            var barWidth = curr.bounds.width;\n\t            var leftPoint = prev instanceof _ExsurgeChant.TextOnly && prev.hasLyrics() ? prev.lyrics[0].getRight() : prev.bounds.right(),\n\t                rightPoint = next instanceof _ExsurgeChant.TextOnly && next.hasLyrics() ? next.lyrics[0].getLeft() : next.bounds.x;\n\t            if (prev instanceof _ExsurgeChant.TextOnly) {\n\t              var _prev = this.score.notations.slice(this.notationsStartIndex, i).reverse().find(function (notation) {\n\t                return !(notation instanceof _ExsurgeChant.TextOnly);\n\t              });\n\t              leftPoint = _prev ? _prev.bounds.right() : 0;\n\t            }\n\t            if (leftPoint) {\n\t              curr.bounds.x = (leftPoint + rightPoint - barWidth) / 2;\n\t            }\n\t            if (curr.hasLyrics()) {\n\t              var offset = oldBoundsX - curr.bounds.x;\n\t              for (j = curr.lyrics.length - 1; j >= 0; j--) {\n\t                curr.lyrics[j].bounds.x += offset;\n\t                curr.lyrics[j].needsLayout = true;\n\t              }\n\t            }\n\t          } else if (i === lastIndex - 1 && this.justify && (curr.constructor === _ExsurgeChantSigns.DoubleBar || curr.constructor === _ExsurgeChantSigns.FullBar)) {\n\t            curr.bounds.x = this.staffRight - curr.bounds.width;\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: \"findNeumesToJustify\",\n\t    value: function findNeumesToJustify(prevLyrics) {\n\t      this.toJustify = [];\n\t      var prev,\n\t          curr = null,\n\t          next = null,\n\t          nextOrCurr = null,\n\t          lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = nextOrCurr;\n\t        curr = this.score.notations[i];\n\t        next = curr.isAccidental && this.score.notations[++i];\n\t        nextOrCurr = next || curr;\n\t        var hasLyrics = nextOrCurr.hasLyrics();\n\t\n\t        if (!curr || !prev) continue;\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) continue;\n\t\n\t        if (prev !== null) {\n\t          _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, prev.lyrics);\n\t          if (prev.keepWithNext === true) continue;\n\t        }\n\t\n\t        if (!curr.isDivider && prevLyrics.length && prevLyrics[0].allowsConnector() && hasLyrics) continue;\n\t\n\t        if (nextOrCurr.constructor === _ExsurgeChant.ChantLineBreak) continue;\n\t\n\t        if (nextOrCurr === this.custos && !hasLyrics) continue;\n\t\n\t        if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\t\n\t        // otherwise, we can add space before this element\n\t        this.toJustify.push(curr);\n\t      }\n\t      if (nextOrCurr !== null) _ExsurgeDrawing.LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n\t      return nextOrCurr;\n\t    }\n\t  }, {\n\t    key: \"getWhitespaceOnRight\",\n\t    value: function getWhitespaceOnRight(ctxt) {\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t      var last = notations[lastIndex - 1];\n\t      if (this.extraTextOnlyIndex !== null && last.constructor === _ExsurgeChant.TextOnly) {\n\t        lastIndex = this.extraTextOnlyIndex;\n\t        last = notations[lastIndex - 1];\n\t      }\n\t      var lastRightNeume = last ? last.bounds.right() + last.calculatedTrailingSpace : 0;\n\t      var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n\t      var lastRightLyric = lastLyrics.length ? _ExsurgeDrawing.LyricArray.getRight(lastLyrics) : 0;\n\t\n\t      if (this.custos) {\n\t        lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n\t        if (this.custos.hasLyrics()) {\n\t          lastRightLyric = _ExsurgeDrawing.LyricArray.getRight(this.custos.lyrics);\n\t        }\n\t      } else if (ctxt && lastIndex < notations.length) {\n\t        lastRightNeume += _ExsurgeGlyphs.Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n\t      }\n\t      return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n\t    }\n\t  }, {\n\t    key: \"justifyElements\",\n\t    value: function justifyElements(ctxt, doJustify, condensableSpaces) {\n\t      var i;\n\t      var toJustify = this.toJustify || [];\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n\t      // move the custos over.\n\t      // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n\t      var lastNotation = notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n\t      var extraSpaceBeforeCustos = this.staffRight < Infinity && this.custos && lastNotation.keepWithNext && this.custos.bounds.x - lastNotation.bounds.right() - lastNotation.calculatedTrailingSpace;\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n\t        i = 0;\n\t        while (this.lastLyrics && this.lastLyrics[i]) {\n\t          var lyrics = this.lastLyrics[i];\n\t          if (lyrics.allowsConnector()) {\n\t            var connectorWidth = lyrics.getConnectorWidth();\n\t            if (ctxt.minLyricWordSpacing < connectorWidth) {\n\t              var minHyphenWidth = Math.max(connectorWidth - extraSpaceBeforeCustos, this.lastLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing);\n\t              // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t              lyrics.setConnectorWidth(minHyphenWidth);\n\t            }\n\t          }\n\t          ++i;\n\t        }\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t\n\t      // first step of justification is to determine how much space we have to use up\n\t      var extraSpace = this.getWhitespaceOnRight();\n\t\n\t      if (Math.abs(extraSpace) < 0.5 || extraSpace > 0 && (doJustify && toJustify.length === 0 || !doJustify)) return;\n\t\n\t      this.condensableSpaces = condensableSpaces;\n\t\n\t      var curr, prev;\n\t      var offset = 0;\n\t      var increment = extraSpace / toJustify.length;\n\t      var multiplier = 0;\n\t      var toJustifyIndex = 0;\n\t      if (extraSpace < 0) {\n\t        toJustify = condensableSpaces.filter(function (s) {\n\t          return s.condensable > 0;\n\t        });\n\t        multiplier = extraSpace / condensableSpaces.sum;\n\t        increment = 0;\n\t      }\n\t      var nextToJustify = toJustify[toJustifyIndex++];\n\t      var incrementOffsetAtNextChance = false;\n\t      for (i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        prev = curr;\n\t        curr = notations[i];\n\t\n\t        if (this.extraTextOnlyIndex !== null && i >= this.extraTextOnlyIndex && curr.constructor === _ExsurgeChant.TextOnly) {\n\t          continue;\n\t        }\n\t\n\t        if (!multiplier && curr === this.custos) {\n\t          if (curr.hasLyrics()) {\n\t            curr.bounds.x = Math.min(curr.bounds.x + (this.staffRight - _ExsurgeDrawing.LyricArray.getRight(curr.lyrics)), this.staffRight - curr.bounds.width);\n\t            offset += increment;\n\t          } else {\n\t            curr.bounds.x = Math.min(curr.bounds.x + offset, this.staffRight - curr.bounds.width);\n\t          }\n\t          continue;\n\t        }\n\t\n\t        if (multiplier) {\n\t          if (nextToJustify && nextToJustify.notation === curr) {\n\t            offset += multiplier * nextToJustify.condensable;\n\t            nextToJustify = toJustify[toJustifyIndex++];\n\t          }\n\t        } else if (nextToJustify === curr) {\n\t          if (prev.hasNoWidth) {\n\t            incrementOffsetAtNextChance = true;\n\t          } else {\n\t            offset += increment;\n\t          }\n\t          nextToJustify = toJustify[toJustifyIndex++];\n\t        } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n\t          incrementOffsetAtNextChance = false;\n\t          offset += increment;\n\t        }\n\t\n\t        curr.bounds.x += offset;\n\t      }\n\t\n\t      if (extraSpaceBeforeCustos > 0) {\n\t        this.custos.bounds.x = lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"handleEndBrace\",\n\t    value: function handleEndBrace(ctxt, note, i) {\n\t      var startBrace = ctxt.lastStartBrace;\n\t      if (!startBrace) return;\n\t      // calculate the y value of the brace by iterating over all notations\n\t      // under/over the brace.\n\t      var y;\n\t      var k = startBrace.notationIndex;\n\t      var notations = this.score.notations;\n\t      var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n\t      var startNote = startBrace.note;\n\t\n\t      if (startBrace.isAbove) {\n\t        y = Math.min.apply(Math, [ctxt.calculateHeightFromStaffPosition(this.score.staffLineCount * 2)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.y - dy;\n\t        }))));\n\t      } else {\n\t        y = Math.max.apply(Math, [ctxt.calculateHeightFromStaffPosition(0)].concat(_toConsumableArray([startNote, note].concat(notations.slice(k, i + 1)).map(function (n) {\n\t          return n.bounds.bottom() + dy;\n\t        }))));\n\t      }\n\t\n\t      var addAcuteAccent = false;\n\t\n\t      if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.RoundBrace) {\n\t        this.braces.push(new _ExsurgeDrawing.RoundBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove));\n\t      } else {\n\t        if (startBrace.shape === _ExsurgeChantMarkings.BraceShape.AccentedCurlyBrace) addAcuteAccent = true;\n\t\n\t        this.braces.push(new _ExsurgeDrawing.CurlyBraceVisualizer(ctxt, startBrace.getAttachmentX(startNote), note.braceEnd.getAttachmentX(note), y, startBrace.isAbove, addAcuteAccent));\n\t      }\n\t\n\t      delete ctxt.lastStartBrace;\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      var _this2 = this;\n\t\n\t      this.ledgerLines = []; // clear any existing ledger lines\n\t\n\t      var notations = this.score.notations;\n\t      var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\t\n\t      // an element needs to have a staffPosition property, as well as the standard\n\t      // bounds property. so it could be a note, or it could be a custos\n\t      // offsetX can be used to add to the position info for the element,\n\t      // useful in the case of notes.\n\t      var processElementForLedgerLine = function processElementForLedgerLine(element) {\n\t        var endElem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : element;\n\t        var staffPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : element.staffPosition;\n\t        var offsetX = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element.neume ? element.neume.bounds.x : 0;\n\t\n\t        // do we need a ledger line for this note?\n\t        var ledgerLinePositionAbove = ctxt.staffLineCount * 2 + 1;\n\t        if (staffPosition >= ledgerLinePositionAbove || staffPosition <= -1) {\n\t          var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n\t          var x2 = offsetX + endElem.bounds.x + endElem.bounds.width + ctxt.intraNeumeSpacing;\n\t\n\t          // round the staffPosition to the nearest line\n\t          if (staffPosition > 0) staffPosition = staffPosition - (staffPosition - 1) % 2;else staffPosition = staffPosition - (staffPosition + 1) % 2;\n\t\n\t          // if we have a ledger line close by, then average out the distance between the two\n\t          var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\t\n\t          if (_this2.ledgerLines.length > 0 && _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 + minLedgerSeparation >= x1) {\n\t            // average out the distance\n\t            var half = (x1 - _this2.ledgerLines[_this2.ledgerLines.length - 1].x2) / 2;\n\t            _this2.ledgerLines[_this2.ledgerLines.length - 1].x2 += half;\n\t            x1 -= half;\n\t          }\n\t\n\t          // never let a ledger line extend past the staff width\n\t          if (x2 > _this2.staffRight) x2 = _this2.staffRight;\n\t\n\t          // finally, add the ledger line\n\t          _this2.ledgerLines.push({\n\t            x1: x1,\n\t            x2: x2,\n\t            staffPosition: staffPosition\n\t          });\n\t        }\n\t      };\n\t\n\t      var episemata = []; // keep track of episemata in case we can connect some\n\t      var startBrace = null;\n\t      var minY = Number.MAX_VALUE,\n\t          maxY = Number.MIN_VALUE; // for braces\n\t\n\t      var positionNonLyricText = function positionNonLyricText(text, neume, rightX) {\n\t        text.setMaxWidth(ctxt, _this2.staffRight);\n\t        //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n\t        text.bounds.x = 0;\n\t        if (rightX) text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n\t        var beyondStaffRight = neume.bounds.x + text.bounds.right() - _this2.staffRight;\n\t        if (beyondStaffRight > 0) {\n\t          text.bounds.x -= beyondStaffRight;\n\t        }\n\t        if (neume.bounds.x + text.bounds.x < 0) {\n\t          text.bounds.x = -neume.bounds.x;\n\t        }\n\t      };\n\t\n\t      // make a final pass over all of the notes to add any necessary\n\t      // ledger lines and to smooth out episemata\n\t      for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n\t        var neume = notations[i];\n\t\n\t        minY = Math.min(minY, neume.bounds.y);\n\t        maxY = Math.max(maxY, neume.bounds.bottom());\n\t\n\t        if (neume.constructor === _ExsurgeChantSigns.Custos) {\n\t          processElementForLedgerLine(neume);\n\t          continue;\n\t        }\n\t\n\t        // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n\t        if (neume.alText) {\n\t          for (var j = 0; j < neume.alText.length; j++) {\n\t            positionNonLyricText(neume.alText[j], neume);\n\t          }\n\t        }\n\t\n\t        // set up horizontal position of translations\n\t        if (neume.translationText) {\n\t          for (j = 0; j < neume.translationText.length; j++) {\n\t            var text = neume.translationText[j];\n\t            if (text.endNeume) {\n\t              var rightX = text.endNeume.hasLyrics() ? text.endNeume.bounds.x + Math.max.apply(Math, _toConsumableArray(text.endNeume.lyrics.map(function (l) {\n\t                return l.bounds.right();\n\t              }))) : text.endNeume.bounds.right();\n\t              rightX -= neume.bounds.x;\n\t              positionNonLyricText(text, neume, rightX);\n\t            } else {\n\t              positionNonLyricText(text, neume);\n\t            }\n\t          }\n\t        }\n\t\n\t        // if it's not a neume then just skip here\n\t        if (!neume.isNeume) continue;\n\t\n\t        for (j = 0; j < neume.ledgerLines.length; j++) {\n\t          var ll = neume.ledgerLines[j];\n\t          processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n\t        }\n\t\n\t        for (j = 0; j < neume.notes.length; j++) {\n\t          var k,\n\t              note = neume.notes[j];\n\t\n\t          // blend episemata as we're able\n\t          if (note.episemata.length === 0) episemata = [];\n\t          for (k = 0; k < note.episemata.length; k++) {\n\t            var episema = note.episemata[k];\n\t\n\t            var spaceBetweenEpisemata = 0;\n\t\n\t            // calculate the distance between the last episemata and this one...\n\t            // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n\t            if (episemata.length > 0) spaceBetweenEpisemata = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.right());\n\t\n\t            // we try to blend the episema if we're able.\n\t            if (episemata.length === 0 || episemata[episemata.length - 1].positionHint !== episema.positionHint || episemata[episemata.length - 1].terminating === true || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Left || episemata[episemata.length - 1].alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Right || episema.alignment === _ExsurgeChantMarkings.HorizontalEpisemaAlignment.Center || spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 && note.glyphVisualizer.glyphCode !== _ExsurgeDrawing.GlyphCode.None) {\n\t              // start a new set of episemata to potentially blend\n\t              episemata = [episema];\n\t            } else {\n\t              // blend all previous with this one\n\t              var newY;\n\t\n\t              if (episema.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) newY = Math.max(episema.bounds.y, episemata[episemata.length - 1].bounds.y);else newY = Math.min(episema.bounds.y, episemata[episemata.length - 1].bounds.y);\n\t\n\t              if (episema.bounds.y !== newY) episema.bounds.y = newY;else {\n\t                for (var l = 0; l < episemata.length; l++) {\n\t                  episemata[l].bounds.y = newY;\n\t                }\n\t              }\n\t\n\t              // extend the last episema to meet the new one\n\t              var newWidth = neume.bounds.x + episema.bounds.x - (episemata[episemata.length - 1].note.neume.bounds.x + episemata[episemata.length - 1].bounds.x);\n\t              if (newWidth < 0) {\n\t                newWidth *= -1;\n\t                episemata[episemata.length - 1].bounds.x -= newWidth;\n\t              }\n\t              episemata[episemata.length - 1].bounds.width = newWidth;\n\t\n\t              episemata.push(episema);\n\t            }\n\t          }\n\t\n\t          if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\t\n\t          if (note.braceStart) {\n\t            ctxt.lastStartBrace = startBrace = note.braceStart;\n\t            startBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // if we still have an active brace, that means it spands two chant lines!\n\t      if (startBrace !== null) {\n\t        if (this.custos) {\n\t          // if the next end brace is on the first note following the line break, simply use it with the custos\n\t          // Do the same if there is only an accidental between\n\t          // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n\t          var nextNotation = notations[lastIndex];\n\t          var nextNote = nextNotation.notes && nextNotation.notes[0];\n\t          var nextNotationButOne = notations[lastIndex + 1];\n\t          var nextNoteButOne = nextNotationButOne && nextNotationButOne.notes && nextNotationButOne.notes[0];\n\t          var braceEnd = nextNote && nextNote.braceEnd || nextNotation.isAccidental && nextNoteButOne && nextNoteButOne.braceEnd;\n\t          if (braceEnd) {\n\t            this.custos.braceEnd = braceEnd;\n\t            this.handleEndBrace(ctxt, this.custos, i);\n\t          } else {\n\t            this.braceStart = startBrace;\n\t            this.custos.braceEnd = new _ExsurgeChantMarkings.BracePoint(this.custos, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Right);\n\t            this.handleEndBrace(ctxt, this.custos, i - 1);\n\t            ctxt.lastStartBrace = new _ExsurgeChantMarkings.BracePoint(null, startBrace.isAbove, startBrace.shape, _ExsurgeChantMarkings.BraceAttachment.Left);\n\t            ctxt.lastStartBrace.notationIndex = i;\n\t          }\n\t        }\n\t      }\n\t\n\t      // don't forget to also include the final custos, which may need a ledger line too\n\t      if (this.custos) processElementForLedgerLine(this.custos);\n\t    }\n\t\n\t    // this is where the real core of positioning neumes takes place\n\t    // returns true if positioning was able to fit the neume before rightNotationBoundary.\n\t    // returns false if cannot fit before given right margin.\n\t    // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n\t\n\t  }, {\n\t    key: \"positionNotationElement\",\n\t    value: function positionNotationElement(ctxt, prevLyrics, prev, curr, rightNotationBoundary) {\n\t      var condensableSpaces = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n\t\n\t      if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n\t      var i,\n\t          space = { notation: curr },\n\t          fixedX = false;\n\t\n\t      // To begin we just place the current notation right after the previous,\n\t      // irrespective of lyrics.\n\t      // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n\t      // we force it to have the same x as the previous group.\n\t      if ((!curr.hasNoWidth || curr.firstWithNoWidth === curr) && prev.firstWithNoWidth) {\n\t        curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n\t        fixedX = true;\n\t      } else {\n\t        curr.bounds.x = prev.bounds.right();\n\t      }\n\t\n\t      if (curr.constructor === _ExsurgeChant.TextOnly && this.extraTextOnlyIndex === null || !curr.hasLyrics() && prev.calculatedTrailingSpace < 0) {\n\t        // We transfer over the trailing space from the previous neume if the current neume is text only,\n\t        // so that the text only neume has a better chance at not needing a connector.\n\t        curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n\t        if (curr.hasLyrics()) curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n\t        if (curr.constructor === _ExsurgeChant.TextOnly && curr.lyrics.length === 1) {\n\t          curr.lyrics[0].setMaxWidth(ctxt, this.staffRight, this.staffRight - _ExsurgeDrawing.LyricArray.getRight(prevLyrics) - ctxt.minLyricWordSpacing);\n\t        }\n\t      } else if (!fixedX) {\n\t        curr.bounds.x += prev.calculatedTrailingSpace;\n\t      }\n\t\n\t      if (curr.hasLyrics() && !prev.isDivider && !prev.isAccidental && this.numNotationsOnLine > 0 && (curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.SingleSyllable || curr.lyrics[0].lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable)) {\n\t        curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n\t      }\n\t      if (curr.hasNoWidth || fixedX) {\n\t        space.total = space.condensable = 0;\n\t      } else if (this.extraTextOnlyIndex !== null && curr.constructor === _ExsurgeChant.TextOnly) {\n\t        curr.bounds.x = 0;\n\t        space.total = space.condensable = 0;\n\t      } else {\n\t        space.total = curr.bounds.x - prev.bounds.right();\n\t        space.condensable = space.total * ctxt.condensingTolerance;\n\t      }\n\t\n\t      // if the previous notation has no lyrics, then we simply make sure the\n\t      // current notation with lyrics is in the bounds of the line\n\t      if (prevLyrics.length === 0) {\n\t        var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\t\n\t        // if the lyric left is negative, then offset the neume appropriately\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          var currLyric = curr.lyrics[i];\n\t          // we hope for the best!\n\t          // but always use a connector if the lyric has original text that was all used up for the drop cap.\n\t          var needsConnector = currLyric.allowsConnector() && currLyric.dropCap && currLyric.originalText && !currLyric.text;\n\t          currLyric.setNeedsConnector(needsConnector);\n\t          var minLeft = this.staffLeft - this.paddingLeft;\n\t\n\t          if (currLyric.getLeft() < minLeft) curr.bounds.x -= currLyric.getLeft() - minLeft;\n\t\n\t          space.condensable = Math.min(space.condensable, currLyric.getLeft() - minLeft);\n\t          maxRight = Math.max(maxRight, currLyric.getRight());\n\t        }\n\t\n\t        if (maxRight > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      } else {\n\t        if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n\t          curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n\t          space.total = curr.bounds.x - prev.bounds.right();\n\t          space.condensable = space.total * ctxt.condensingTolerance;\n\t        }\n\t      }\n\t\n\t      // if the curr notation has no lyrics, then simply check whether there is enough room\n\t      if (curr.hasLyrics() === false) {\n\t        if (curr.bounds.right() + curr.calculatedTrailingSpace > rightNotationBoundary + condensableSpaces.sum + space.condensable) return false;\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we have multiple lyrics on the current or the previous notation,\n\t      // we will have to run several passes over each set of lyrics:\n\t\n\t      // on the first pass, we will check the absolute left-most placement of the new syllables\n\t      // we will make additional passes until everything is stable\n\t      do {\n\t        var hasShifted = false;\n\t        var atLeastOneWithoutConnector = false;\n\t        for (i = 0; i < curr.lyrics.length; i++) {\n\t          if (!curr.lyrics[i].originalText) continue;\n\t          var prevLyricRight = 0;\n\t          var condensableSpacesSincePrevLyric = [];\n\t          var condensableSpaceSincePrevLyric = null;\n\t          if (i < prevLyrics.length && prevLyrics[i]) {\n\t            prevLyricRight = prevLyrics[i].getRight();\n\t            var notationI = condensableSpaces.map(function (s) {\n\t              return s.notation;\n\t            }).lastIndexOf(prevLyrics[i].notation);\n\t            if (notationI >= 0) {\n\t              condensableSpacesSincePrevLyric = condensableSpaces.slice(notationI + 1);\n\t              condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric.map(function (s) {\n\t                return s.condensable;\n\t              }).reduce(function (a, b) {\n\t                return a + b;\n\t              }, 0);\n\t            } else {\n\t              condensableSpacesSincePrevLyric.sum = 0;\n\t            }\n\t          }\n\t\n\t          curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n\t          var currLyricLeft = curr.lyrics[i].getLeft();\n\t          if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n\t            // No connector needed, but include space between words if necessary!\n\t            var extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n\t            if (extraSpace < 0) {\n\t              // push the current element over a bit.\n\t              var shift = prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n\t              curr.bounds.x += shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              hasShifted = shift > 0.5;\n\t            } else {\n\t              condensableSpaceSincePrevLyric = extraSpace;\n\t            }\n\t          } else {\n\t            // we may need a connector yet...\n\t            if (prevLyricRight + 0.1 > currLyricLeft - condensableSpacesSincePrevLyric.sum - space.condensable) {\n\t              // in this case, the lyric elements actually overlap.\n\t              // so nope, no connector needed. instead, we just place the lyrics together\n\t              // fixme: for better text layout, we could actually use the kerning values\n\t              // between the prev and curr lyric elements!\n\t              var _shift = prevLyricRight - currLyricLeft;\n\t              if (_shift < -0.1) {\n\t                (function () {\n\t                  // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n\t                  var multiplier = _shift / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                  var offset = 0;\n\t                  condensableSpacesSincePrevLyric.forEach(function (s) {\n\t                    offset += multiplier * s.condensable;\n\t                    s.notation.bounds.x += offset;\n\t                  });\n\t                })();\n\t              }\n\t              curr.bounds.x += _shift;\n\t              condensableSpaceSincePrevLyric = 0;\n\t              atLeastOneWithoutConnector = true;\n\t              hasShifted = _shift > 0.5;\n\t            } else {\n\t              // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n\t              if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n\t                var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t                if (spaceBetweenSyls < ctxt.hyphenWidth) {\n\t                  var minHyphenWidth = prevLyrics.length > 1 ? ctxt.intraNeumeSpacing : ctxt.minLyricWordSpacing;\n\t                  // we might not need to shift the syllable, but we do want to shrink the hyphen...\n\t                  prevLyrics[i].setConnectorWidth(Math.max(minHyphenWidth, spaceBetweenSyls));\n\t                }\n\t              }\n\t              prevLyrics[i].setNeedsConnector(true);\n\t              prevLyricRight = prevLyrics[i].getRight();\n\t\n\t              if (prevLyricRight + 0.1 > currLyricLeft) {\n\t                var _shift2 = prevLyricRight - currLyricLeft;\n\t                curr.bounds.x += _shift2;\n\t                condensableSpaceSincePrevLyric = 0;\n\t                hasShifted = _shift2 > 0.5;\n\t              } else {\n\t                condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n\t              }\n\t            }\n\t          }\n\t\n\t          if (condensableSpaceSincePrevLyric !== null) {\n\t            if (condensableSpaceSincePrevLyric < condensableSpacesSincePrevLyric.sum + space.condensable) {\n\t              (function () {\n\t                // reduce condensable space so that lyrics retain at least the width of a space character between words:\n\t                var multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n\t                space.condensable *= multiplier;\n\t                if (condensableSpacesSincePrevLyric.sum) {\n\t                  condensableSpacesSincePrevLyric.forEach(function (space) {\n\t                    space.condensable *= multiplier;\n\t                  });\n\t                  condensableSpaces.sum = condensableSpaces.map(function (s) {\n\t                    return s.condensable;\n\t                  }).reduce(function (a, b) {\n\t                    return a + b;\n\t                  }, 0);\n\t                }\n\t              })();\n\t            }\n\t          }\n\t        }\n\t      } while (curr.lyrics.length > 1 && hasShifted && atLeastOneWithoutConnector);\n\t\n\t      for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n\t        var pLyrics = prevLyrics[i];\n\t        if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n\t          currLyricLeft = curr.lyrics[i].getLeft();\n\t          prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n\t          spaceBetweenSyls = currLyricLeft - prevLyricRight;\n\t          if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n\t          pLyrics.setConnectorWidth(spaceBetweenSyls);\n\t        }\n\t      }\n\t\n\t      if (curr.bounds.right() + curr.calculatedTrailingSpace < rightNotationBoundary + condensableSpaces.sum + space.condensable && _ExsurgeDrawing.LyricArray.getRight(curr.lyrics, true) <= this.staffRight + condensableSpaces.sum + space.condensable) {\n\t        if (prev.isAccidental) {\n\t          // move the previous accidental up next to the current note:\n\t          var _shift3 = curr.bounds.x - prev.bounds.width - prev.calculatedTrailingSpace - prev.bounds.x;\n\t          prev.bounds.x += _shift3;\n\t          if (Math.abs(_shift3) > 0.1) {\n\t            var lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n\t            condensableSpaces.sum -= lastCondensable.condensable;\n\t            lastCondensable.condensable = 0;\n\t          }\n\t        }\n\t        condensableSpaces.push(space);\n\t        condensableSpaces.sum += space.condensable;\n\t        return true;\n\t      }\n\t\n\t      // if we made it this far, then the element won't fit on this line.\n\t      return false;\n\t    }\n\t\n\t    /**\n\t     * Find the notation closest to x without going past it\n\t     * @param {number} x\n\t     */\n\t\n\t  }, {\n\t    key: \"bisectNotationAtX\",\n\t    value: function bisectNotationAtX(x) {\n\t      var useMidpoint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      var minIndex = -1,\n\t          maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n\t          curIndex = minIndex + (maxIndex - minIndex >> 1),\n\t          notations = this.score.notations.slice(this.notationsStartIndex, this.notationsStartIndex + this.numNotationsOnLine);\n\t\n\t      while (minIndex < curIndex) {\n\t        var _notation = notations[curIndex];\n\t        var notationX = _notation.bounds.x;\n\t        if (notationX > x) {\n\t          maxIndex = curIndex;\n\t        } else {\n\t          minIndex = curIndex;\n\t        }\n\t        curIndex = minIndex + (maxIndex - minIndex >> 1);\n\t      }\n\t      var notation = notations[curIndex];\n\t      if (useMidpoint && notation && notation.bounds.width === 0 && curIndex + 1 < notations.length) {\n\t        var nextNotation = notations[curIndex + 1],\n\t            closenessToLeft = x - notation.bounds.x,\n\t            closenessToRight = nextNotation.bounds.x - x;\n\t        if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft) ++curIndex;\n\t      }\n\t      return notations[curIndex];\n\t    }\n\t  }, {\n\t    key: \"staffSpaces\",\n\t    get: function get() {\n\t      return this.score.staffLineCount - 1;\n\t    }\n\t  }]);\n\t\n\t  return ChantLine;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.BracePoint = exports.BraceAttachment = exports.BraceShape = exports.Mora = exports.Ictus = exports.HorizontalEpisema = exports.HorizontalEpisemaAlignment = exports.Accent = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Accent = exports.Accent = function (_GlyphVisualizer) {\n\t  _inherits(Accent, _GlyphVisualizer);\n\t\n\t  function Accent(ctxt, note) {\n\t    var glyphCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ExsurgeDrawing.GlyphCode.AcuteAccent;\n\t\n\t    _classCallCheck(this, Accent);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Accent.__proto__ || Object.getPrototypeOf(Accent)).call(this, ctxt, glyphCode));\n\t\n\t    _this.note = note;\n\t    _this.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Accent, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\t\n\t      // this puts the acute accent either over the staff lines, or over the note if the\n\t      // note is above the staff lines\n\t      this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 2 * ctxt.staffLineCount));\n\t    }\n\t  }]);\n\t\n\t  return Accent;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// for positioning markings on notes\n\t\n\t\n\tvar HorizontalEpisemaAlignment = exports.HorizontalEpisemaAlignment = {\n\t  Default: 0,\n\t  Left: 1,\n\t  Center: 2,\n\t  Right: 3\n\t};\n\t\n\t/*\n\t * HorizontalEpisema\n\t *\n\t * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n\t */\n\t\n\tvar HorizontalEpisema = exports.HorizontalEpisema = function (_ChantLayoutElement) {\n\t  _inherits(HorizontalEpisema, _ChantLayoutElement);\n\t\n\t  function HorizontalEpisema(note) {\n\t    _classCallCheck(this, HorizontalEpisema);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (HorizontalEpisema.__proto__ || Object.getPrototypeOf(HorizontalEpisema)).call(this));\n\t\n\t    _this2.note = note;\n\t\n\t    _this2.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this2.terminating = false; // indicates if this episema should terminate itself or not\n\t    _this2.alignment = HorizontalEpisemaAlignment.Default;\n\t    return _this2;\n\t  }\n\t\n\t  _createClass(HorizontalEpisema, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      // following logic helps to keep the episemata away from staff lines if they get too close\n\t\n\t      var y = 0,\n\t          step;\n\t      var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      var ledgerLine = this.note.neume.ledgerLines[0] || {};\n\t      var punctumInclinatumShorten = false;\n\t\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum) {\n\t        var notes = this.note.neume.notes,\n\t            index = notes.indexOf(this.note),\n\t            prevNote = notes[index - 1];\n\t        if (prevNote && prevNote.glyphVisualizer.glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && prevNote.staffPosition - this.note.staffPosition === 1) {\n\t          punctumInclinatumShorten = true;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n\t        // convert y to be based around center Y between top and bottom staff lines so that it is symmetric:\n\t        y += ctxt.staffLineCount * ctxt.staffInterval;\n\t\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.None)\n\t          // correction for episema under the second note of a porrectus\n\t          y += ctxt.staffInterval / 2;\n\t        step = Math.ceil(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.ceil(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // if it's an odd step, that means we're on a staff line,\n\t          // so we shift to between the staff line\n\t          if (Math.abs(step) % 2 === 1) {\n\t            if (Math.abs(step) < ctxt.staffLineCount || ctxt.convertStaffPositionToSymmetric(ledgerLine.staffPosition) === -step) {\n\t              step += 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step += 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      } else {\n\t        y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n\t        // convert y to be based around center Y between top and bottom staff lines so that it is symmetric:\n\t        y += ctxt.staffLineCount * ctxt.staffInterval;\n\t\n\t        step = Math.floor(y / ctxt.staffInterval);\n\t        // if there's enough space, center the episema between the punctum and the next staff line\n\t        if (step % 2 === 0) {\n\t          step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n\t        } else {\n\t          // otherwise, find nearest acceptable third between staff lines (or staff line)\n\t          step = (Math.floor(1.5 * y / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\t\n\t          // find nearest acceptable third between staff lines (or staff line)\n\t          if (Math.abs(step) % 2 === 1) {\n\t            // if it was a staff line, we need to adjust\n\t            if (Math.abs(step) < ctxt.staffLineCount || ctxt.convertStaffPositionToSymmetric(ledgerLine.staffPosition) === -step) {\n\t              step -= 2 / 3;\n\t            } else {\n\t              // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n\t              step -= 1 / 3;\n\t            }\n\t          }\n\t        }\n\t      }\n\t\n\t      y = (step - ctxt.staffLineCount) * ctxt.staffInterval;\n\t\n\t      var width = this.note.bounds.width;\n\t      var x = this.note.bounds.x;\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) width = ctxt.staffInterval;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        width = ctxt.staffInterval;\n\t        x -= width;\n\t      } else if (punctumInclinatumShorten) {\n\t        width *= 2 / 3;\n\t        x += 0.5 * width;\n\t      } else if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent) {\n\t        width *= 2 / 3;\n\t        x += 0.25 * width;\n\t      }\n\t\n\t      // also, the position hint can affect the x/width of the episema\n\t      if (this.alignment === HorizontalEpisemaAlignment.Left) {\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n\t        x += width * 0.1;\n\t        width *= 0.8;\n\t      } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n\t        x += width * 0.2;\n\t        width *= 0.8;\n\t      }\n\t\n\t      this.bounds.x = x;\n\t      this.bounds.y = y - ctxt.episemaLineWeight / 2;\n\t      this.bounds.width = width;\n\t      this.bounds.height = ctxt.episemaLineWeight;\n\t\n\t      this.origin.x = 0;\n\t      this.origin.y = 0;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t\n\t      canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\t\n\t      canvasCtxt.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t    }\n\t  }, {\n\t    key: \"getSvgProps\",\n\t    value: function getSvgProps(ctxt) {\n\t      return {\n\t        x: this.bounds.x,\n\t        y: this.bounds.y,\n\t        width: this.bounds.width,\n\t        height: this.bounds.height,\n\t        fill: ctxt.neumeLineColor,\n\t        class: \"horizontalEpisema\"\n\t      };\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      return _ExsurgeDrawing.QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n\t    }\n\t  }]);\n\t\n\t  return HorizontalEpisema;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\t\n\t/*\n\t * Ictus\n\t */\n\t\n\t\n\tvar Ictus = exports.Ictus = function (_GlyphVisualizer2) {\n\t  _inherits(Ictus, _GlyphVisualizer2);\n\t\n\t  function Ictus(ctxt, note) {\n\t    _classCallCheck(this, Ictus);\n\t\n\t    var _this3 = _possibleConstructorReturn(this, (Ictus.__proto__ || Object.getPrototypeOf(Ictus)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove));\n\t\n\t    _this3.note = note;\n\t    _this3.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    return _this3;\n\t  }\n\t\n\t  _createClass(Ictus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      var glyphCode = this.note.glyphVisualizer.glyphCode;\n\t      // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n\t      var positionHint = this.positionHint || _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      var staffPosition = this.note.staffPosition + (positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? 1 : -1);\n\t      var collisionWithEpisema = this.note.episemata.length > 0 && (this.note.episemata[0].positionHint || _ExsurgeDrawing.MarkingPositionHint.Above) === positionHint;\n\t      var horizontalOffset;\n\t      var verticalOffset = 1;\n\t      var shortOffset = -0.2;\n\t      var extraOffset = 0;\n\t      var collisionWithStaffLine = staffPosition % 2 && (Math.abs(ctxt.convertStaffPositionToSymmetric(staffPosition)) < ctxt.staffLineCount || (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\t\n\t      // The porrectus requires special handling of the note width,\n\t      // otherwise the width is just that of the note itself\n\t      if (glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus1 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus2 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus3 || glyphCode === _ExsurgeDrawing.GlyphCode.Porrectus4) horizontalOffset = ctxt.staffInterval / 2;else if (glyphCode === _ExsurgeDrawing.GlyphCode.None) {\n\t        horizontalOffset = -ctxt.staffInterval / 2;\n\t      } else {\n\t        horizontalOffset = this.note.bounds.width / 2;\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.PunctumInclinatum && !collisionWithStaffLine && !collisionWithEpisema) {\n\t          extraOffset = 0.3;\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaAbove;\n\t        verticalOffset *= -1;\n\t      } else {\n\t        glyphCode = _ExsurgeDrawing.GlyphCode.VerticalEpisemaBelow;\n\t      }\n\t      if (collisionWithEpisema) {\n\t        extraOffset = 0.4;\n\t      }\n\t      verticalOffset *= ctxt.staffInterval * (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\t\n\t      this.setGlyph(ctxt, glyphCode);\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Ictus;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t/*\n\t * Mora\n\t */\n\t\n\t\n\tvar Mora = exports.Mora = function (_GlyphVisualizer3) {\n\t  _inherits(Mora, _GlyphVisualizer3);\n\t\n\t  function Mora(ctxt, note) {\n\t    _classCallCheck(this, Mora);\n\t\n\t    var _this4 = _possibleConstructorReturn(this, (Mora.__proto__ || Object.getPrototypeOf(Mora)).call(this, ctxt, _ExsurgeDrawing.GlyphCode.Mora));\n\t\n\t    _this4.note = note;\n\t    _this4.positionHint = _ExsurgeDrawing.MarkingPositionHint.Default;\n\t    _this4.horizontalOffset = ctxt.staffInterval / 2 + _this4.origin.x;\n\t    return _this4;\n\t  }\n\t\n\t  _createClass(Mora, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      this.setGlyph(ctxt, this.glyphCode);\n\t      this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n\t      var staffPosition = this.note.staffPosition;\n\t\n\t      this.setStaffPosition(ctxt, staffPosition);\n\t\n\t      var verticalOffset = 0;\n\t      // First, we need to find the next note in the neume.\n\t      var noteIndex = this.note.neume.notes.indexOf(this.note);\n\t      var nextNote;\n\t      if (noteIndex >= 0) {\n\t        ++noteIndex;\n\t        if (this.note.neume.notes.length > noteIndex) {\n\t          nextNote = this.note.neume.notes[noteIndex];\n\t          if (nextNote.morae && nextNote.morae.length && this.note.neume.notes.length === noteIndex + 1) {\n\t            // this note is the second to last in its neume, and the last note also has a mora\n\t            this.horizontalOffset += nextNote.bounds.right() - this.note.bounds.right();\n\t          } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n\t            // center the dot over the following note.\n\t            this.horizontalOffset = (nextNote.bounds.right() - this.note.bounds.right() - this.bounds.right()) / 2;\n\t          } else {\n\t            nextNote = null;\n\t          }\n\t        } else if (this.note.neume.notes.length === noteIndex) {\n\t          // this note is the last in its neume:\n\t          if (this.note.neume.trailingSpace === 0) {\n\t            // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n\t            var notationIndex = this.note.neume.score.notations.indexOf(this.note.neume);\n\t            if (notationIndex >= 0) {\n\t              var nextNotation = this.note.neume.score.notations[notationIndex + 1];\n\t              if (nextNotation && nextNotation.notes) {\n\t                nextNote = nextNotation.notes[0];\n\t              }\n\t            }\n\t          } else if (this.note.shape !== _ExsurgeChant.NoteShape.Inclinatum) {\n\t            this.note.neume.calculatedTrailingSpace += this.origin.x;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Above) {\n\t        if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;else verticalOffset -= ctxt.staffInterval * 0.75;\n\t      } else if (this.positionHint === _ExsurgeDrawing.MarkingPositionHint.Below) {\n\t        if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;else verticalOffset += ctxt.staffInterval * 0.75;\n\t      } else {\n\t        if (staffPosition % 2 === 0) {\n\t          // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n\t          // between the top of the note's space and the top of the following note.\n\t          if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n\t            verticalOffset -= ctxt.staffInterval * 0.25;\n\t          }\n\t        } else {\n\t          verticalOffset -= ctxt.staffInterval * 0.75;\n\t        }\n\t      }\n\t      this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n\t      this.bounds.y += verticalOffset;\n\t    }\n\t  }]);\n\t\n\t  return Mora;\n\t}(_ExsurgeDrawing.GlyphVisualizer);\n\t\n\t// indicates the shape of the brace\n\t\n\t\n\tvar BraceShape = exports.BraceShape = {\n\t  RoundBrace: 0,\n\t  CurlyBrace: 1,\n\t  AccentedCurlyBrace: 2\n\t};\n\t\n\t// indicates how the brace is alignerd to the note to which it's connected\n\tvar BraceAttachment = exports.BraceAttachment = {\n\t  Left: 0,\n\t  Right: 1\n\t};\n\t\n\tvar BracePoint = exports.BracePoint = function (_ChantLayoutElement2) {\n\t  _inherits(BracePoint, _ChantLayoutElement2);\n\t\n\t  function BracePoint(note, isAbove, shape, attachment) {\n\t    _classCallCheck(this, BracePoint);\n\t\n\t    var _this5 = _possibleConstructorReturn(this, (BracePoint.__proto__ || Object.getPrototypeOf(BracePoint)).call(this));\n\t\n\t    _this5.note = note;\n\t    _this5.isAbove = isAbove;\n\t    _this5.shape = shape;\n\t    _this5.attachment = attachment;\n\t    return _this5;\n\t  }\n\t\n\t  _createClass(BracePoint, [{\n\t    key: \"getAttachmentX\",\n\t    value: function getAttachmentX(note) {\n\t      if (!note) note = this.note;\n\t      if (this.attachment === BraceAttachment.Left) return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n\t    }\n\t  }]);\n\t\n\t  return BracePoint;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virgula = exports.Accidental = exports.AccidentalType = exports.DoubleBar = exports.DominicanBar = exports.InsertionCursor = exports.FullBar = exports.HalfBar = exports.QuarterBar = exports.Divider = exports.Custos = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\t/*\n\t *\n\t */\n\tvar Custos = exports.Custos = function (_ChantNotationElement) {\n\t  _inherits(Custos, _ChantNotationElement);\n\t\n\t  // if auto is true, then the custos will automatically try to determine it's height based on\n\t  // subsequent notations\n\t  function Custos() {\n\t    var auto = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\t\n\t    _classCallCheck(this, Custos);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Custos.__proto__ || Object.getPrototypeOf(Custos)).call(this));\n\t\n\t    _this.auto = auto;\n\t    _this.staffPosition = 2; // default sane value\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Custos, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Custos.prototype.__proto__ || Object.getPrototypeOf(Custos.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      if (this.auto) {\n\t        var neume = ctxt.findNextNeume();\n\t\n\t        if (neume) this.staffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t        // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n\t        // within reasonable bounds\n\t        while (this.staffPosition < -2) {\n\t          this.staffPosition += 7;\n\t        }while (this.staffPosition > 2 * ctxt.staffLineCount + 2) {\n\t          this.staffPosition -= 7;\n\t        }\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, Custos.getGlyphCode(this.staffPosition, ctxt.staffLineCount));\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t      this.addVisualizer(glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // called when layout has changed and our dependencies are no longer good\n\t\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // we only need to resolve new dependencies if we're an automatic custos\n\t      if (this.auto) this.needsLayout = true;\n\t    }\n\t\n\t    /**\n\t     * \n\t     * @param {number} staffPosition position of custos\n\t     * @param {number} staffLineCount number of lines on staff\n\t     * @returns \n\t     */\n\t\n\t  }], [{\n\t    key: \"getGlyphCode\",\n\t    value: function getGlyphCode(staffPosition) {\n\t      var staffLineCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\t\n\t      if (staffPosition <= staffLineCount * 2 - 2) {\n\t        // ascending custos\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosLong;else return _ExsurgeDrawing.GlyphCode.CustosShort;\n\t      } else {\n\t        // descending custos\n\t        if (Math.abs(staffPosition) % 2 === 1) return _ExsurgeDrawing.GlyphCode.CustosDescLong;else return _ExsurgeDrawing.GlyphCode.CustosDescShort;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Custos;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Divider\n\t */\n\t\n\t\n\tvar Divider = exports.Divider = function (_ChantNotationElement2) {\n\t  _inherits(Divider, _ChantNotationElement2);\n\t\n\t  function Divider() {\n\t    _classCallCheck(this, Divider);\n\t\n\t    var _this2 = _possibleConstructorReturn(this, (Divider.__proto__ || Object.getPrototypeOf(Divider)).call(this));\n\t\n\t    _this2.isDivider = true;\n\t    _this2.resetsAccidentals = true;\n\t    return _this2;\n\t  }\n\t\n\t  return Divider;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * QuarterBar\n\t */\n\t\n\t\n\tvar QuarterBar = exports.QuarterBar = function (_Divider) {\n\t  _inherits(QuarterBar, _Divider);\n\t\n\t  function QuarterBar() {\n\t    _classCallCheck(this, QuarterBar);\n\t\n\t    return _possibleConstructorReturn(this, (QuarterBar.__proto__ || Object.getPrototypeOf(QuarterBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(QuarterBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(QuarterBar.prototype.__proto__ || Object.getPrototypeOf(QuarterBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var top = ctxt.staffLineCount * 2;\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, top - 2, top, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return QuarterBar;\n\t}(Divider);\n\t\n\t/*\n\t * HalfBar\n\t */\n\t\n\t\n\tvar HalfBar = exports.HalfBar = function (_Divider2) {\n\t  _inherits(HalfBar, _Divider2);\n\t\n\t  function HalfBar() {\n\t    _classCallCheck(this, HalfBar);\n\t\n\t    return _possibleConstructorReturn(this, (HalfBar.__proto__ || Object.getPrototypeOf(HalfBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(HalfBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(HalfBar.prototype.__proto__ || Object.getPrototypeOf(HalfBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var offset = ctxt.staffLineCount === 2 ? 1.5 : 2;\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, offset, ctxt.staffLineCount * 2 - offset, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return HalfBar;\n\t}(Divider);\n\t\n\t/*\n\t * FullBar\n\t */\n\t\n\t\n\tvar FullBar = exports.FullBar = function (_Divider3) {\n\t  _inherits(FullBar, _Divider3);\n\t\n\t  function FullBar() {\n\t    _classCallCheck(this, FullBar);\n\t\n\t    return _possibleConstructorReturn(this, (FullBar.__proto__ || Object.getPrototypeOf(FullBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(FullBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(FullBar.prototype.__proto__ || Object.getPrototypeOf(FullBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 1, ctxt.staffLineCount * 2 - 1, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return FullBar;\n\t}(Divider);\n\t\n\t/*\n\t * Insertion Cursor\n\t */\n\t\n\t\n\tvar InsertionCursor = exports.InsertionCursor = function (_Divider4) {\n\t  _inherits(InsertionCursor, _Divider4);\n\t\n\t  function InsertionCursor() {\n\t    _classCallCheck(this, InsertionCursor);\n\t\n\t    return _possibleConstructorReturn(this, (InsertionCursor.__proto__ || Object.getPrototypeOf(InsertionCursor)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(InsertionCursor, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(InsertionCursor.prototype.__proto__ || Object.getPrototypeOf(InsertionCursor.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.cssClass = 'InsertionCursor';\n\t\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 0, ctxt.staffLineCount * 2));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t      this.bounds.width = 0;\n\t      this.bounds.height = 0;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return InsertionCursor;\n\t}(Divider);\n\t\n\t/*\n\t * DominicanBar\n\t */\n\t\n\t\n\tvar DominicanBar = exports.DominicanBar = function (_Divider5) {\n\t  _inherits(DominicanBar, _Divider5);\n\t\n\t  function DominicanBar(staffPosition) {\n\t    _classCallCheck(this, DominicanBar);\n\t\n\t    var _this7 = _possibleConstructorReturn(this, (DominicanBar.__proto__ || Object.getPrototypeOf(DominicanBar)).call(this));\n\t\n\t    var parity = (staffPosition + 1) % 2;\n\t\n\t    _this7.staffPosition = staffPosition - 2 * parity;\n\t    return _this7;\n\t  }\n\t\n\t  _createClass(DominicanBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DominicanBar.prototype.__proto__ || Object.getPrototypeOf(DominicanBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t      this.addVisualizer(new _ExsurgeDrawing.DividerLineVisualizer(ctxt, this.staffPosition, this.staffPosition + 3, this));\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DominicanBar;\n\t}(Divider);\n\t\n\t/*\n\t * DoubleBar\n\t */\n\t\n\t\n\tvar DoubleBar = exports.DoubleBar = function (_Divider6) {\n\t  _inherits(DoubleBar, _Divider6);\n\t\n\t  function DoubleBar() {\n\t    _classCallCheck(this, DoubleBar);\n\t\n\t    return _possibleConstructorReturn(this, (DoubleBar.__proto__ || Object.getPrototypeOf(DoubleBar)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(DoubleBar, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(DoubleBar.prototype.__proto__ || Object.getPrototypeOf(DoubleBar.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var top = ctxt.staffLineCount * 2 - 1;\n\t      var line0 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 1, top, this);\n\t      line0.bounds.x = 0;\n\t      this.addVisualizer(line0);\n\t\n\t      var line1 = new _ExsurgeDrawing.DividerLineVisualizer(ctxt, 1, top, this);\n\t      line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n\t      this.addVisualizer(line1);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return DoubleBar;\n\t}(Divider);\n\t\n\tvar AccidentalType = exports.AccidentalType = {\n\t  Flat: -1,\n\t  Natural: 0,\n\t  Sharp: 1\n\t};\n\t\n\t/*\n\t * Accidental\n\t */\n\t\n\tvar Accidental = exports.Accidental = function (_ChantNotationElement3) {\n\t  _inherits(Accidental, _ChantNotationElement3);\n\t\n\t  function Accidental(staffPosition, accidentalType) {\n\t    _classCallCheck(this, Accidental);\n\t\n\t    var _this9 = _possibleConstructorReturn(this, (Accidental.__proto__ || Object.getPrototypeOf(Accidental)).call(this));\n\t\n\t    _this9.isAccidental = true;\n\t    _this9.keepWithNext = true; // accidentals should always stay connected...\n\t\n\t    _this9.staffPosition = staffPosition;\n\t    _this9.accidentalType = accidentalType;\n\t    return _this9;\n\t  }\n\t\n\t  _createClass(Accidental, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Accidental.prototype.__proto__ || Object.getPrototypeOf(Accidental.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t\n\t    // creation of the glyph visualizer is refactored out or performLayout\n\t    // so that clefs can use the same logic for their accidental glyph\n\t\n\t  }, {\n\t    key: \"createGlyphVisualizer\",\n\t    value: function createGlyphVisualizer(ctxt) {\n\t      var glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Natural:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Natural;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Sharp;\n\t          break;\n\t        default:\n\t          glyphCode = _ExsurgeDrawing.GlyphCode.Flat;\n\t          break;\n\t      }\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, glyphCode);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      return glyph;\n\t    }\n\t  }, {\n\t    key: \"adjustStep\",\n\t    value: function adjustStep(step) {\n\t      switch (this.accidentalType) {\n\t        case AccidentalType.Flat:\n\t          if (step === _ExsurgeCore.Step.Ti) return _ExsurgeCore.Step.Te;\n\t          if (step === _ExsurgeCore.Step.Mi) return _ExsurgeCore.Step.Me;\n\t          break;\n\t        case AccidentalType.Sharp:\n\t          if (step === _ExsurgeCore.Step.Do) return _ExsurgeCore.Step.Du;\n\t          if (step === _ExsurgeCore.Step.Fa) return _ExsurgeCore.Step.Fu;\n\t          break;\n\t        case AccidentalType.Natural:\n\t          if (step === _ExsurgeCore.Step.Te) return _ExsurgeCore.Step.Ti;\n\t          if (step === _ExsurgeCore.Step.Me) return _ExsurgeCore.Step.Mi;\n\t          if (step === _ExsurgeCore.Step.Du) return _ExsurgeCore.Step.Do;\n\t          if (step === _ExsurgeCore.Step.Fu) return _ExsurgeCore.Step.Fa;\n\t          break;\n\t      }\n\t\n\t      // no adjustment needed\n\t      return step;\n\t    }\n\t  }, {\n\t    key: \"applyToPitch\",\n\t    value: function applyToPitch(pitch) {\n\t      // no adjusment needed\n\t      if (this.pitch.octave !== pitch.octave) return;\n\t\n\t      pitch.step = this.adjustStep(pitch.step);\n\t    }\n\t  }]);\n\t\n\t  return Accidental;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Virgula\n\t */\n\t\n\t\n\tvar Virgula = exports.Virgula = function (_Divider7) {\n\t  _inherits(Virgula, _Divider7);\n\t\n\t  function Virgula() {\n\t    _classCallCheck(this, Virgula);\n\t\n\t    // unlike other dividers a virgula does not reset accidentals\n\t    var _this10 = _possibleConstructorReturn(this, (Virgula.__proto__ || Object.getPrototypeOf(Virgula)).call(this));\n\t\n\t    _this10.resetsAccidentals = false;\n\t\n\t    // the staff position of the virgula is customizable, so that it\n\t    // can be placed on different lines (top or bottom) depending on the\n\t    // notation tradition of what is being notated (e.g., Benedictine has it\n\t    //  on top line, Norbertine at the bottom)\n\t    _this10.staffPosition = 3;\n\t    return _this10;\n\t  }\n\t\n\t  _createClass(Virgula, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virgula.prototype.__proto__ || Object.getPrototypeOf(Virgula.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var glyph = new _ExsurgeDrawing.GlyphVisualizer(ctxt, _ExsurgeDrawing.GlyphCode.Virgula);\n\t      glyph.setStaffPosition(ctxt, this.staffPosition);\n\t\n\t      this.addVisualizer(glyph);\n\t\n\t      this.origin.x = this.bounds.width / 2;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virgula;\n\t}(Divider);\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Gabc = exports.GabcHeader = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeChantMarkings = __webpack_require__(10);\n\t\n\tvar Markings = _interopRequireWildcard(_ExsurgeChantMarkings);\n\t\n\tvar _ExsurgeChantSigns = __webpack_require__(11);\n\t\n\tvar Signs = _interopRequireWildcard(_ExsurgeChantSigns);\n\t\n\tvar _ExsurgeChantNeumes = __webpack_require__(13);\n\t\n\tvar Neumes = _interopRequireWildcard(_ExsurgeChantNeumes);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// reusable reg exps\n\tvar __syllablesRegex = /(?=\\S)((?:<v>[\\s\\S]*<\\/v>|[^(])*)(?:\\(?([^)]*)\\)?)?/g;\n\tvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\t\n\tvar __notationsRegex = /z0|z|Z|::|:|[,;][1-8]?|`|[cf][1-5]|cb[1-5]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\n\tvar __notationsRegex_group_insideBraces = 1;\n\t\n\tvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\t\n\t// for the brace string inside of [ and ] in notation data\n\t// the capturing groups are:\n\t//  1. o or u, to indicate over or under\n\t//  2. b, cb, or cba, to indicate the brace type\n\t//  3. 0 or 1 to indicate the attachment point\n\t//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n\t//  5. a float indicating the millimeter length of the brace (not supported yet)\n\tvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\t\n\tvar TrailingSpaceForAccidental = function TrailingSpaceForAccidental(ctxt) {\n\t  return ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\n\t};\n\tvar TrailingSpaceMultiple = function TrailingSpaceMultiple(multiplier) {\n\t  return function (ctxt) {\n\t    return ctxt.intraNeumeSpacing * multiplier;\n\t  };\n\t};\n\t\n\tvar regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\n\tvar regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\n\tvar regexHeaderComment = /^%.*/;\n\t\n\tvar GabcHeader = exports.GabcHeader = function () {\n\t  _createClass(GabcHeader, null, [{\n\t    key: \"getLength\",\n\t    value: function getLength(gabc) {\n\t      var match = gabc.match(regexHeaderEnd);\n\t      return match ? match.index + match[0].length : 0;\n\t    }\n\t  }]);\n\t\n\t  function GabcHeader(text) {\n\t    _classCallCheck(this, GabcHeader);\n\t\n\t    if (typeof text !== \"string\") text = \"\";\n\t    this.comments = [];\n\t    this.cValues = {};\n\t    this.original = \"\";\n\t    var match = text.match(regexHeaderEnd);\n\t    if (match) {\n\t      var txtHeader = this.original = text.slice(0, match.index + match[0].length);\n\t      var lines = txtHeader.split(/\\r?\\n/g);\n\t      for (var i = 0; i < lines.length; ++i) {\n\t        var line = lines[i],\n\t            _match = regexHeaderLine.exec(line);\n\t        if (_match) {\n\t          var key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t            return letter.toUpperCase();\n\t          });\n\t          if (this[_match[1]]) {\n\t            var arrayName = _match[1] + \"Array\";\n\t            if (!this[arrayName]) {\n\t              this[arrayName] = [this[_match[1]]];\n\t            }\n\t            this[arrayName].push(_match[2]);\n\t          } else {\n\t            this[_match[1]] = _match[2];\n\t          }\n\t          if (key !== _match[1]) this[key] = this[_match[1]];\n\t        } else if (_match = regexHeaderComment.exec(line)) {\n\t          if (line !== \"%%\") {\n\t            _match = regexHeaderLine.exec(line.slice(1));\n\t            if (_match) {\n\t              var _key = _match[1].replace(/-([a-z])/g, function (a, letter) {\n\t                return letter.toUpperCase();\n\t              });\n\t              this.cValues[_match[1]] = _match[2];\n\t              if (_key !== _match[1]) this.cValues[_key] = _match[2];\n\t            } else {\n\t              this.comments[i] = line;\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t\n\t  _createClass(GabcHeader, [{\n\t    key: \"toString\",\n\t    value: function toString() {\n\t      var result = [];\n\t      for (var key in this) {\n\t        if (typeof this[key] !== \"string\" || /^(length|original|comments|cValues)$/.test(key)) {\n\t          continue;\n\t        }\n\t        var alternateKey = key.replace(/[A-Z]/g, function (letter) {\n\t          return \"-\" + letter.toLowerCase();\n\t        });\n\t        if (alternateKey !== key && alternateKey in this) continue;\n\t        var array = this[key + \"Array\"];\n\t        if (array) {\n\t          for (var i = 0; i < array.length; ++i) {\n\t            result.push(key + \": \" + array[i] + \";\");\n\t          }\n\t        } else {\n\t          result.push(key + \": \" + this[key] + \";\");\n\t        }\n\t      }\n\t      for (var _key2 in this.cValues) {\n\t        if (_key2.length === 0 || !this.cValues.hasOwnProperty(_key2)) continue;\n\t        result.push(\"%\" + _key2 + \": \" + this.cValues[_key2] + \";\");\n\t      }\n\t      for (var _i in this.comments) {\n\t        if (!this.comments.hasOwnProperty(_i)) continue;\n\t        try {\n\t          result.splice(_i, 0, this.comments[_i]);\n\t        } catch (e) {\n\t          console.warn(e);\n\t        }\n\t      }\n\t      return result.join(\"\\n\") + \"\\n%%\\n\";\n\t    }\n\t  }]);\n\t\n\t  return GabcHeader;\n\t}();\n\t\n\tvar elementCountForNotations = function elementCountForNotations(items) {\n\t  return items.reduce(function (sum, item) {\n\t    return sum + (item.notes ? item.notes.length : 1);\n\t  }, 0);\n\t};\n\t\n\tvar Gabc = exports.Gabc = function () {\n\t  function Gabc() {\n\t    _classCallCheck(this, Gabc);\n\t  }\n\t\n\t  _createClass(Gabc, null, [{\n\t    key: \"createMappingsFromSource\",\n\t\n\t    // takes gabc source code (without the header info) and returns an array\n\t    // of ChantMappings describing the chant. A chant score can then be created\n\t    // fron the chant mappings and later updated via updateMappings() if need\n\t    // be...\n\t    value: function createMappingsFromSource(ctxt, gabcSource) {\n\t      var headerLength = GabcHeader.getLength(gabcSource);\n\t      gabcSource = gabcSource.slice(headerLength);\n\t      var words = this.splitWords(gabcSource);\n\t\n\t      // set the default clef\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      var mappings = this.createMappingsFromWords(ctxt, words, function (clef) {\n\t        return ctxt.activeClef = clef;\n\t      });\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // A simple general purpose diff algorithm adapted here for comparing\n\t    // an array of existing mappings with an updated list of gabc words.\n\t    // note before is an array of mappings, and after is an array of strings\n\t    // (gabc words).\n\t    //\n\t    // This is definitely not the most effecient diff algorithm, but for our\n\t    // limited needs and source size it seems to work just fine...\n\t    //\n\t    // code is adapted from: https://github.com/paulgb/simplediff\n\t    //\n\t    // Returns:\n\t    //   A list of pairs, with the first part of the pair being one of three\n\t    //   strings ('-', '+', '=') and the second part being a list of values from\n\t    //   the original before and/or after lists. The first part of the pair\n\t    //   corresponds to whether the list of values is a deletion, insertion, or\n\t    //   unchanged, respectively.\n\t\n\t  }, {\n\t    key: \"diffDescriptorsAndNewWords\",\n\t    value: function diffDescriptorsAndNewWords(before, after) {\n\t      // Create a map from before values to their indices\n\t      var oldIndexMap = {},\n\t          i;\n\t      for (i = 0; i < before.length; i++) {\n\t        oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n\t        oldIndexMap[before[i].source].push(i);\n\t      }\n\t\n\t      var overlap = [],\n\t          startOld,\n\t          startNew,\n\t          subLength,\n\t          inew;\n\t\n\t      startOld = startNew = subLength = 0;\n\t\n\t      for (inew = 0; inew < after.length; inew++) {\n\t        var _overlap = [];\n\t        oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n\t        for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n\t          var iold = oldIndexMap[after[inew]][i];\n\t          // now we are considering all values of val such that\n\t          // `before[iold] == after[inew]`\n\t          _overlap[iold] = (iold && overlap[iold - 1] || 0) + 1;\n\t          if (_overlap[iold] > subLength) {\n\t            // this is the largest substring seen so far, so store its indices\n\t            subLength = _overlap[iold];\n\t            startOld = iold - subLength + 1;\n\t            startNew = inew - subLength + 1;\n\t          }\n\t        }\n\t        overlap = _overlap;\n\t      }\n\t\n\t      if (subLength === 0) {\n\t        // If no common substring is found, we return an insert and delete...\n\t        var result = [];\n\t\n\t        if (before.length) result.push([\"-\", before]);\n\t\n\t        if (after.length) result.push([\"+\", after]);\n\t\n\t        return result;\n\t      }\n\t\n\t      // ...otherwise, the common substring is unchanged and we recursively\n\t      // diff the text before and after that substring\n\t      return [].concat(this.diffDescriptorsAndNewWords(before.slice(0, startOld), after.slice(0, startNew)), [[\"=\", after.slice(startNew, startNew + subLength)]], this.diffDescriptorsAndNewWords(before.slice(startOld + subLength), after.slice(startNew + subLength)));\n\t    }\n\t\n\t    // this function essentially performs and applies a rudimentary diff between a\n\t    // previously parsed set of mappings and between a new gabc source text.\n\t    // the mappings array passed in is changed in place to be updated from the\n\t    // new source\n\t\n\t  }, {\n\t    key: \"updateMappingsFromSource\",\n\t    value: function updateMappingsFromSource(ctxt, mappings, newGabcSource) {\n\t      var insertionIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\t      var oldInsertionIndex = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\t\n\t      var headerLength = GabcHeader.getLength(newGabcSource);\n\t      newGabcSource = newGabcSource.slice(headerLength);\n\t      // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n\t      mappings.pop();\n\t\n\t      if (insertionIndex === null) {\n\t        insertionIndex = NaN;\n\t      }\n\t      if (oldInsertionIndex === null) {\n\t        oldInsertionIndex = NaN;\n\t      }\n\t\n\t      var newWords = this.splitWords(newGabcSource);\n\t\n\t      var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\t\n\t      var index = 0,\n\t          j,\n\t          k,\n\t          l,\n\t          sourceIndex = 0,\n\t          wordLength = 0,\n\t          mapping,\n\t          elementIndex = 0;\n\t\n\t      ctxt.activeClef = _ExsurgeChant.Clef.default();\n\t\n\t      // apply the results to the mappings, marking notations that need to be processed\n\t      var lastTranslationNeumes = [];\n\t      for (var i = 0; i < results.length; i++) {\n\t        var resultCode = results[i][0];\n\t        var resultValues = results[i][1];\n\t\n\t        if (index > 0) sourceIndex = mappings[index - 1].sourceIndex + mappings[index - 1].source.length + 1;\n\t        if (resultCode === \"=\") {\n\t          var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n\t          // skip over ones that haven't changed, but updating the clef and source\n\t          // index (and pitch in case clef or accidentals have changed) as we go\n\t          for (j = 0; j < resultValues.length; j++, index++) {\n\t            mapping = mappings[index];\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t            }\n\t            if (insertionIndex >= elementIndex || oldInsertionIndex >= elementIndex) {\n\t              // check if the insertion index is within this mapping:\n\t              var elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex >= elementIndex && insertionIndex < elementIndex + elementCount || oldInsertionIndex >= elementIndex && oldInsertionIndex < elementIndex + elementCount) {\n\t                // re-do this mapping:\n\t                // TODO: check sourceIndex\n\t                var _sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], _sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t                mappings.splice(index, 1, mapping);\n\t\n\t                elementIndex += elementCount;\n\t                continue;\n\t              }\n\t              elementIndex += elementCount;\n\t            }\n\t            mapping.sourceIndex += sourceIndexDiff;\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var curNotation = mapping.notations[k];\n\t              var prevIsAccidental = mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n\t              // notify the notation that its dependencies are no longer valid\n\t              curNotation.resetDependencies();\n\t\n\t              if (curNotation.isClef) {\n\t                ctxt.activeClef = mappings[index].notations[k];\n\t              }\n\t\n\t              if (curNotation.isAccidental) {\n\t                ctxt.activeClef.activeAccidental = curNotation;\n\t              } else if (curNotation.resetsAccidentals || !prevIsAccidental && curNotation.hasLyrics() && curNotation.lyrics[0].lyricType <= _ExsurgeDrawing.LyricType.BeginningSyllable) {\n\t                ctxt.activeClef.resetAccidentals();\n\t              }\n\t\n\t              // update source index, pitch, and automatic braces\n\t              if (curNotation.notes) {\n\t                for (l = 0; l < curNotation.notes.length; ++l) {\n\t                  var note = curNotation.notes[l];\n\t                  note.sourceIndex += sourceIndexDiff;\n\t                  note.pitch = ctxt.activeClef.staffPositionToPitch(note.staffPosition);\n\t                  if (note.braceEnd && note.braceEnd.automatic) delete note.braceEnd;\n\t                  if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n\t                    note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t                    note.braceEnd.automatic = true;\n\t                    delete this.needToEndBrace;\n\t                  } else if (note.braceStart && note.braceStart.automatic) {\n\t                    this.needToEndBrace = note.braceStart;\n\t                  }\n\t                }\n\t              }\n\t              if (curNotation.translationText) {\n\t                for (l = 0; l < curNotation.translationText.length; ++l) {\n\t                  var transText = curNotation.translationText[l];\n\t                  delete transText.endNeume;\n\t                  curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n\t                  if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t                    var lastTranslationText = lastTranslationNeumes[0].translationText[l];\n\t                    if (lastTranslationText) lastTranslationText.endNeume = curNotation;\n\t                  }\n\t                }\n\t                lastTranslationNeumes[0] = curNotation;\n\t              }\n\t              if (sourceIndexDiff) {\n\t                if (typeof curNotation.sourceIndex === \"number\") {\n\t                  curNotation.sourceIndex += sourceIndexDiff;\n\t                }\n\t                for (l = 0; l < curNotation.lyrics.length; ++l) {\n\t                  curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n\t                }\n\t                if (curNotation.alText) {\n\t                  for (l = 0; l < curNotation.alText.length; ++l) {\n\t                    curNotation.alText[l].sourceIndex += sourceIndexDiff;\n\t                  }\n\t                }\n\t              }\n\t            }\n\t          }\n\t        } else if (resultCode === \"-\") {\n\t          // delete elements that no longer exist, but first notify all\n\t          // elements of the change\n\t          mappings.splice(index, resultValues.length);\n\t        } else if (resultCode === \"+\") {\n\t          // insert new ones\n\t          for (j = 0; j < resultValues.length; j++) {\n\t            wordLength = resultValues[j].length + 1;\n\t            mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t\n\t            if (elementIndex === 0 && mapping.notations.length && mapping.notations[0].isClef) {\n\t              // the first clef doesn't get kept as a notation:\n\t              elementIndex = -1;\n\t              var _elementCount = elementCountForNotations(mapping.notations);\n\t              if (insertionIndex < _elementCount) {\n\t                // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n\t                mapping = this.createMappingFromWord(ctxt, resultValues[j], sourceIndex, lastTranslationNeumes, insertionIndex - elementIndex);\n\t              }\n\t            }\n\t\n\t            for (k = 0; k < mapping.notations.length; k++) {\n\t              var _curNotation = mapping.notations[k];\n\t              elementIndex += _curNotation.notes ? _curNotation.notes.length : 1;\n\t              if (_curNotation.isClef) {\n\t                ctxt.activeClef = mapping.notations[k];\n\t              }\n\t            }\n\t\n\t            mappings.splice(index++, 0, mapping);\n\t            sourceIndex += wordLength;\n\t          }\n\t        }\n\t      }\n\t\n\t      // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n\t      if (mappings.length > 0 && mappings[mappings.length - 1].notations.length > 0) mappings[mappings.length - 1].notations[mappings[mappings.length - 1].notations.length - 1].trailingSpace = 0;\n\t\n\t      return headerLength;\n\t    }\n\t\n\t    // takes an array of gabc words (like that returned by splitWords below)\n\t    // and returns an array of ChantMapping objects, one for each word.\n\t\n\t  }, {\n\t    key: \"createMappingsFromWords\",\n\t    value: function createMappingsFromWords(ctxt, words) {\n\t      var mappings = [];\n\t      var sourceIndex = 0,\n\t          wordLength = 0,\n\t          lastTranslationNeumes = [];\n\t\n\t      for (var i = 0; i < words.length; i++) {\n\t        sourceIndex += wordLength;\n\t        wordLength = words[i].length + 1;\n\t        var word = words[i].trim();\n\t\n\t        if (word === \"\") continue;\n\t\n\t        var mapping = this.createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes);\n\t\n\t        if (mapping) mappings.push(mapping);\n\t      }\n\t\n\t      return mappings;\n\t    }\n\t\n\t    // takes a gabc word (like those returned by splitWords below) and returns\n\t    // a ChantMapping object that contains the gabc word source text as well\n\t    // as the generated notations.\n\t\n\t  }, {\n\t    key: \"createMappingFromWord\",\n\t    value: function createMappingFromWord(ctxt, word, sourceIndex, lastTranslationNeumes, insertionIndex) {\n\t      var matches = [];\n\t      var notations = [];\n\t      var currSyllable = 0;\n\t\n\t      while (match = __syllablesRegex.exec(word)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyricText = match[1].replace(/(^|<\\/sp>)([\\s\\S]*?)($|<sp>)/g, function (_, pre, main, post) {\n\t          return \"\" + pre + main.replace(/~/g, \" \") + post;\n\t        });\n\t        var alText = [];\n\t        var translationText = [];\n\t        var notationData = match[2];\n\t\n\t        // new words reset the accidentals, per the Solesmes style (see LU xviij)\n\t        // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n\t        if (currSyllable === 0 && /[a-z]/i.test(lyricText) && /[a-m]/i.test(notationData)) ctxt.activeClef.resetAccidentals();\n\t\n\t        var items = this.parseNotations(ctxt, notationData, sourceIndex + match.index + match[1].length + 1, insertionIndex);\n\t\n\t        if (items.length === 0) continue;\n\t\n\t        if (insertionIndex >= 0) insertionIndex -= elementCountForNotations(items);\n\t\n\t        items[0].firstOfSyllable = !!lyricText;\n\t        items[0].firstOfParentheses = true;\n\t        notations.push.apply(notations, _toConsumableArray(items));\n\t\n\t        // add the lyrics and/or alText to the first notation that makes sense...\n\t        var notationWithLyrics = null;\n\t        for (var i = 0; i < items.length; i++) {\n\t          var cne = items[i];\n\t\n\t          if (cne.isAccidental && i + 1 < items.length) continue;\n\t\n\t          notationWithLyrics = cne;\n\t          break;\n\t        }\n\t\n\t        var m = __altTranslationRegex.exec();\n\t        var indexOffset = 0;\n\t        while (m = __altTranslationRegex.exec(lyricText)) {\n\t          var index = m.index;\n\t          lyricText = lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n\t          index += sourceIndex + indexOffset + 1;\n\t          if (typeof m[1] === \"string\") {\n\t            var elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[1], notationWithLyrics, index + 4);\n\t            elem.alIndex = alText.push(elem) - 1;\n\t          } else if (typeof m[2] === \"string\") {\n\t            var _elem = new _ExsurgeDrawing.AboveLinesText(ctxt, m[3], notationWithLyrics, index + m[2].length);\n\t            _elem.alIndex = alText.push(_elem) - 1;\n\t          } else {\n\t            var _elem2 = new _ExsurgeDrawing.TranslationText(ctxt, m[3], notationWithLyrics, index);\n\t            _elem2.translationIndex = translationText.push(_elem2) - 1;\n\t          }\n\t          indexOffset += m[0].length;\n\t          __altTranslationRegex.exec();\n\t        }\n\t        if (lyricText === \"\" && alText.length === 0) continue;\n\t\n\t        if (notationWithLyrics === null) return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t\n\t        if (alText.length) notationWithLyrics.alText = alText;\n\t\n\t        if (translationText.length) {\n\t          notationWithLyrics.translationText = translationText;\n\t          for (i = 0; i < translationText.length; ++i) {\n\t            var transText = translationText[i];\n\t            if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n\t              var lastTranslationText = lastTranslationNeumes[0].translationText[i];\n\t              if (lastTranslationText) lastTranslationText.endNeume = notationWithLyrics;\n\t            }\n\t          }\n\t          lastTranslationNeumes[0] = notationWithLyrics;\n\t        }\n\t\n\t        if (lyricText === \"\") continue;\n\t\n\t        var proposedLyricType;\n\t\n\t        // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n\t        if (!cne.isNeume && cne.constructor !== _ExsurgeChant.TextOnly) proposedLyricType = _ExsurgeDrawing.LyricType.Directive;\n\t        // otherwise trye to guess the lyricType for the first lyric anyway\n\t        else if (currSyllable === 0 && j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.SingleSyllable;else if (currSyllable === 0 && j < matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;else if (j === matches.length - 1) proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t\n\t        currSyllable++;\n\t\n\t        var lyrics = this.createSyllableLyrics(ctxt, lyricText, proposedLyricType, notationWithLyrics, items, sourceIndex + match.index);\n\t\n\t        if (lyrics === null || lyrics.length === 0) continue;\n\t\n\t        notationWithLyrics.lyrics = lyrics;\n\t      }\n\t\n\t      return new _ExsurgeChant.ChantMapping(word, notations, sourceIndex);\n\t    }\n\t\n\t    // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n\t\n\t  }, {\n\t    key: \"createSyllableLyrics\",\n\t    value: function createSyllableLyrics(ctxt, text, proposedLyricType, notation, notations, sourceIndex) {\n\t      var _this = this;\n\t\n\t      var lyrics = [];\n\t\n\t      // an extension to gabc: multiple lyrics per syllable can be separated by a |\n\t      var lyricTexts = text.split(\"|\");\n\t\n\t      var _loop = function _loop() {\n\t        lyricText = lyricTexts[i];\n\t\n\t\n\t        if (i > 0) {\n\t          if (lyricText.match(/\\s$/)) {\n\t            lyricText = lyricText.replace(/s+$/, \"\");\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.EndingSyllable;\n\t          } else {\n\t            proposedLyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;\n\t          }\n\t        }\n\t\n\t        // gabc allows lyrics to indicate the centering part of the text by\n\t        // using braces to indicate how to center the lyric. So a lyric can\n\t        // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n\t        // word, respectively. Here we determine if the lyric should be spaced\n\t        // manually with this method of using braces.\n\t        // however, we don't want to consider any braces inside of v tags, so we\n\t        // do a bit of text processing here:\n\t        lyricTextWithoutVTags = lyricText;\n\t\n\t        var vtagRegex = /<v>[\\s\\S]*?<\\/v>/;\n\t        var match = void 0;\n\t        var vtags = [];\n\t        while (match = vtagRegex.exec(lyricTextWithoutVTags)) {\n\t          var index = match.index;\n\t          var length = match[0].length;\n\t          vtags[index] = length;\n\t          lyricTextWithoutVTags = lyricTextWithoutVTags.slice(0, index) + lyricTextWithoutVTags.slice(index + length);\n\t        }\n\t        centerStartIndex = lyricTextWithoutVTags.indexOf(\"{\");\n\t        centerLength = 0;\n\t\n\t\n\t        if (centerStartIndex >= 0) {\n\t          var indexClosingBracket = lyricTextWithoutVTags.indexOf(\"}\");\n\t\n\t          if (indexClosingBracket >= 0 && indexClosingBracket > centerStartIndex) {\n\t            var getTrueIndex = function getTrueIndex(indexWithoutVTags) {\n\t              // map indices back to the lyricText with the V tags:\n\t              var accum = 0;\n\t              for (var _index in vtags) {\n\t                if (vtags.hasOwnProperty(_index) && indexWithoutVTags >= _index) {\n\t                  accum += vtags[_index];\n\t                } else {\n\t                  break;\n\t                }\n\t              }\n\t              return indexWithoutVTags + accum;\n\t            };\n\t            centerStartIndex = getTrueIndex(centerStartIndex);\n\t            indexClosingBracket = getTrueIndex(indexClosingBracket);\n\t            centerLength = indexClosingBracket - centerStartIndex - 1;\n\t\n\t            // strip out the brackets:\n\t            lyricText = lyricText.substring(0, centerStartIndex) + lyricText.substring(centerStartIndex + 1, indexClosingBracket) + lyricText.substring(indexClosingBracket + 1, lyricText.length);\n\t          } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n\t        }\n\t\n\t        lyric = _this.makeLyric(ctxt, lyricText, proposedLyricType, notation, notations, sourceIndex);\n\t\n\t\n\t        if (centerStartIndex >= 0) {\n\t          // update indices in case there had been any tags, etc.\n\t          var textIndex = 0,\n\t              centerEndIndex = -1;\n\t          var _iteratorNormalCompletion = true;\n\t          var _didIteratorError = false;\n\t          var _iteratorError = undefined;\n\t\n\t          try {\n\t            for (var _iterator = lyric.spans[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t              var span = _step.value;\n\t\n\t              if (centerStartIndex >= span.index && centerStartIndex <= span.index + span.text.length) {\n\t                centerEndIndex = centerStartIndex + centerLength;\n\t                centerStartIndex += textIndex - span.index;\n\t              }\n\t              if (centerEndIndex >= 0 && centerEndIndex >= span.index && centerEndIndex <= span.index + span.text.length) {\n\t                centerEndIndex += textIndex - span.index;\n\t                centerLength = centerEndIndex - centerStartIndex;\n\t                centerEndIndex = -1;\n\t                break;\n\t              }\n\t              textIndex += span.text.length;\n\t            }\n\t          } catch (err) {\n\t            _didIteratorError = true;\n\t            _iteratorError = err;\n\t          } finally {\n\t            try {\n\t              if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t              }\n\t            } finally {\n\t              if (_didIteratorError) {\n\t                throw _iteratorError;\n\t              }\n\t            }\n\t          }\n\t\n\t          if (centerEndIndex >= 0) {\n\t            centerEndIndex = textIndex;\n\t            centerLength = centerEndIndex - centerStartIndex;\n\t          }\n\t        }\n\t\n\t        // if we have manual lyric centering, then set it now\n\t        if (centerStartIndex >= 0) {\n\t          lyric.centerStartIndex = centerStartIndex;\n\t          lyric.centerLength = centerLength;\n\t        }\n\t\n\t        lyric.lyricIndex = lyrics.push(lyric) - 1;\n\t        sourceIndex += lyricText.length + 1;\n\t      };\n\t\n\t      for (var i = 0; i < lyricTexts.length; i++) {\n\t        var lyricText;\n\t        var lyricTextWithoutVTags;\n\t        var centerStartIndex;\n\t        var centerLength;\n\t        var lyric;\n\t\n\t        _loop();\n\t      }\n\t      notation.lyrics = lyrics;\n\t      return lyrics;\n\t    }\n\t  }, {\n\t    key: \"makeLyric\",\n\t    value: function makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n\t      var elides = false;\n\t      var forceConnector = false;\n\t      if (text.length > 1) {\n\t        if (text[text.length - 1] === \"-\") {\n\t          forceConnector = true;\n\t          if (lyricType === _ExsurgeDrawing.LyricType.EndingSyllable) lyricType = _ExsurgeDrawing.LyricType.MiddleSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.SingleSyllable) lyricType = _ExsurgeDrawing.LyricType.BeginningSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (text[text.length - 1] === \" \") {\n\t          if (lyricType === _ExsurgeDrawing.LyricType.MiddleSyllable) lyricType = _ExsurgeDrawing.LyricType.EndingSyllable;else if (lyricType === _ExsurgeDrawing.LyricType.BeginningSyllable) lyricType = _ExsurgeDrawing.LyricType.SingleSyllable;\n\t\n\t          text = text.slice(0, -1);\n\t        } else if (/<\\/i>$/.test(text)) {\n\t          // must be an elision\n\t          elides = true;\n\t        }\n\t      }\n\t\n\t      if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = _ExsurgeDrawing.LyricType.Directive;\n\t\n\t      var lyric = new _ExsurgeDrawing.Lyric(ctxt, text, lyricType, notation, notations, sourceIndex);\n\t      lyric.elidesToNext = elides;\n\t      if (forceConnector) lyric.setForceConnector(true);\n\t\n\t      return lyric;\n\t    }\n\t\n\t    // takes a string of gabc notations and creates exsurge objects out of them.\n\t    // returns an array of notations.\n\t\n\t  }, {\n\t    key: \"parseNotations\",\n\t    value: function parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n\t      var _this2 = this;\n\t\n\t      // if there is no data, then this must be a text only object\n\t      if (!data) return [new _ExsurgeChant.TextOnly(sourceIndex, 0)];\n\t\n\t      var baseSourceIndex = sourceIndex;\n\t      var sourceLength = 0;\n\t      var notations = [];\n\t      var notes = [];\n\t      var trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t      var addToLastSourceGabc = function addToLastSourceGabc(gabc) {\n\t        if (notes.length > 0) {\n\t          notes[notes.length - 1].sourceGabc += gabc;\n\t        }\n\t      };\n\t      var addNotation = function addNotation(notation) {\n\t        // first, if we have any notes left over, we create a neume out of them\n\t        if (notes.length > 0) {\n\t          // create neume(s)\n\t          var neumes = _this2.createNeumesFromNotes(ctxt, notes, trailingSpace);\n\t          for (var i = 0; i < neumes.length; i++) {\n\t            notations.push(neumes[i]);\n\t          }notes = [];\n\t        }\n\t\n\t        // reset the trailing space\n\t        trailingSpace = _ExsurgeDrawing.DefaultTrailingSpace;\n\t\n\t        // then, if we're passed a notation, let's add it\n\t        // also, perform chant logic here\n\t        if (notation !== null) {\n\t          var prevNotation = notations[notations.length - 1];\n\t          notation.sourceIndex = sourceIndex;\n\t          notation.sourceGabc = match[0];\n\t          if (notation.isClef) {\n\t            ctxt.activeClef = notation;\n\t            if (prevNotation && prevNotation.trailingSpace.isDefault && prevNotation.isDivider) {\n\t              prevNotation.trailingSpace = TrailingSpaceForAccidental;\n\t            }\n\t          } else if (notation.isAccidental) {\n\t            ctxt.activeClef.activeAccidental = notation;\n\t          } else if (notation.trailingSpace.isDefault && notation instanceof Signs.Custos) {\n\t            notation.trailingSpace = TrailingSpaceForAccidental;\n\t          } else if (notation.resetsAccidentals) ctxt.activeClef.resetAccidentals();\n\t\n\t          notations.push(notation);\n\t        }\n\t      };\n\t\n\t      var regex = new RegExp(__notationsRegex.source, \"g\");\n\t      var match;\n\t\n\t      while (match = regex.exec(data)) {\n\t        sourceIndex = baseSourceIndex + match.index;\n\t        sourceLength = match[0].length;\n\t        var atom = match[0];\n\t\n\t        // handle the clefs and dividers here\n\t        switch (atom) {\n\t          case \",\":\n\t            addNotation(new Signs.QuarterBar());\n\t            break;\n\t          case \"`\":\n\t            addNotation(new Signs.Virgula());\n\t            break;\n\t          case \";\":\n\t            addNotation(new Signs.HalfBar());\n\t            break;\n\t          case \";1\":\n\t          case \";2\":\n\t          case \";3\":\n\t          case \";4\":\n\t          case \";5\":\n\t          case \";6\":\n\t          case \";7\":\n\t          case \";8\":\n\t          case \",1\":\n\t          case \",2\":\n\t          case \",3\":\n\t          case \",4\":\n\t          case \",5\":\n\t          case \",6\":\n\t          case \",7\":\n\t          case \",8\":\n\t            addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n\t            break;\n\t          case \":\":\n\t            addNotation(new Signs.FullBar());\n\t            break;\n\t          case \"::\":\n\t            addNotation(new Signs.DoubleBar());\n\t            break;\n\t          // other gregorio dividers are not supported yet\n\t\n\t          case \"c1\":\n\t          case \"c2\":\n\t          case \"c3\":\n\t          case \"c4\":\n\t          case \"c5\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(2 * parseInt(atom[1], 10) - 1, 2));\n\t            break;\n\t          case \"f1\":\n\t          case \"f2\":\n\t          case \"f3\":\n\t          case \"f4\":\n\t          case \"f5\":\n\t            addNotation(ctxt.activeClef = new _ExsurgeChant.FaClef(2 * parseInt(atom[1], 10) - 1, 2));\n\t            break;\n\t          case \"cb1\":\n\t          case \"cb2\":\n\t          case \"cb3\":\n\t          case \"cb4\":\n\t          case \"cb5\":\n\t            {\n\t              var line = 2 * parseInt(atom[2], 10) - 1;\n\t              addNotation(ctxt.activeClef = new _ExsurgeChant.DoClef(line, 2, new Signs.Accidental(line - 1, Signs.AccidentalType.Flat)));\n\t            }\n\t            break;\n\t\n\t          case \"z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(true));\n\t            break;\n\t          case \"Z\":\n\t            addNotation(new _ExsurgeChant.ChantLineBreak(false));\n\t            break;\n\t          case \"z0\":\n\t            addNotation(new Signs.Custos(true));\n\t            break;\n\t\n\t          // spacing indicators\n\t          case \"!\":\n\t            trailingSpace = 0;\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t          case \" \":\n\t            // fixme: is this correct? logically what is the difference in gabc\n\t            // between putting a space between notes vs putting '//' between notes?\n\t            trailingSpace = TrailingSpaceMultiple(2);\n\t            addToLastSourceGabc(atom);\n\t            addNotation(null);\n\t            break;\n\t\n\t          default:\n\t            // might be a number of slashes, a custos, might be an accidental, or might be a note\n\t            if (atom[0] === \"/\") {\n\t              trailingSpace = TrailingSpaceMultiple(atom.length);\n\t              addToLastSourceGabc(atom);\n\t              addNotation(null);\n\t            } else if (atom.length > 1 && atom[1] === \"+\") {\n\t              // custos\n\t              var custos = new Signs.Custos();\n\t\n\t              custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\t\n\t              addNotation(custos);\n\t            } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n\t              var accidentalType;\n\t\n\t              switch (atom[1]) {\n\t                case \"y\":\n\t                  accidentalType = Signs.AccidentalType.Natural;\n\t                  break;\n\t                case \"#\":\n\t                  accidentalType = Signs.AccidentalType.Sharp;\n\t                  break;\n\t                default:\n\t                  accidentalType = Signs.AccidentalType.Flat;\n\t                  break;\n\t              }\n\t\n\t              var noteArray = [];\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, noteArray, sourceIndex);\n\t              var accidental = new Signs.Accidental(noteArray[0].staffPosition, accidentalType);\n\t              accidental.pitch = this.gabcHeightToExsurgePitch(ctxt.activeClef, atom[0]);\n\t              accidental.sourceIndex = sourceIndex;\n\t              accidental.sourceLength = sourceLength;\n\t              accidental.trailingSpace = TrailingSpaceForAccidental;\n\t\n\t              ctxt.activeClef.activeAccidental = accidental;\n\t\n\t              addNotation(accidental);\n\t            } else if (atom.length > 1 && atom[0] === \"{\") {\n\t              (function () {\n\t                trailingSpace = 0;\n\t                addNotation(null);\n\t                var bracketedNotations = _this2.parseNotations(ctxt, match[__notationsRegex_group_insideBraces], sourceIndex + 1);\n\t                // Set the width of these notations to 0\n\t                bracketedNotations.forEach(function (neume) {\n\t                  neume.hasNoWidth = true;\n\t                  neume.firstWithNoWidth = bracketedNotations[0];\n\t                });\n\t                notations.push.apply(notations, _toConsumableArray(bracketedNotations));\n\t              })();\n\t            } else {\n\t              // looks like it's a note\n\t              if (insertionIndex === -1) {\n\t                trailingSpace = TrailingSpaceMultiple(1);\n\t                addNotation(null);\n\t              }\n\t              this.createNoteFromData(ctxt, ctxt.activeClef, atom, notes, sourceIndex);\n\t              --insertionIndex;\n\t            }\n\t            break;\n\t        }\n\t      }\n\t\n\t      // finish up any remaining notes we have left\n\t      addNotation(null);\n\t\n\t      return notations;\n\t    }\n\t  }, {\n\t    key: \"createNeumesFromNotes\",\n\t    value: function createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n\t      var neumes = [];\n\t      var firstNoteIndex = 0;\n\t      var currNoteIndex = 0;\n\t\n\t      // here we use a simple finite state machine to create the neumes from the notes\n\t      // createNeume is helper function which returns the next state after a neume is created\n\t      // (unknownState). Each state object has a neume() function and a handle() function.\n\t      // neume() allows us to create the neume of the state in the event that we run out\n\t      // of notes. handle() gives the state an opportunity to examine the currNote and\n\t      // determine what to do...either transition to a different neume/state, or\n\t      // continue building the neume of that state. handle() returns the next state\n\t\n\t      var createNeume = function createNeume(neume, includeCurrNote) {\n\t        var includePrevNote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t        // add the notes to the neume\n\t        var lastNoteIndex;\n\t        if (includeCurrNote) lastNoteIndex = currNoteIndex;else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;else lastNoteIndex = currNoteIndex - 2;\n\t\n\t        if (lastNoteIndex < 0) return;\n\t\n\t        while (firstNoteIndex <= lastNoteIndex) {\n\t          var note = notes[firstNoteIndex++];\n\t          neume.addNote(note);\n\t          if (note.alText) {\n\t            if (!neume.alText) neume.alText = [];\n\t            neume.alText.push(note.alText);\n\t            note.alText.noteIndex = firstNoteIndex - 1;\n\t          }\n\t        }\n\t\n\t        neumes.push(neume);\n\t\n\t        if (includeCurrNote === false) {\n\t          currNoteIndex--;\n\t\n\t          if (includePrevNote === false) currNoteIndex--;\n\t\n\t          neume.keepWithNext = true;\n\t          if (notes[currNoteIndex + 1].shape === _ExsurgeChant.NoteShape.Quilisma) neume.trailingSpace = 0;else {\n\t            neume.trailingSpace = TrailingSpaceMultiple(1);\n\t            neume.allowLineBreakBeforeNext = true;\n\t          }\n\t        }\n\t\n\t        return unknownState;\n\t      };\n\t\n\t      var unknownState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga) return virgaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Stropha) return apostrophaState;else if (currNote.shape === _ExsurgeChant.NoteShape.Oriscus) return oriscusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return punctaInclinataState;else if (currNote.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return createNeume(new Neumes.Punctum(), true);else return punctumState;\n\t        }\n\t      };\n\t\n\t      var punctumState = {\n\t        neume: function neume() {\n\t          return new Neumes.Punctum();\n\t        },\n\t        handle: function handle(currNote, prevNote, notesRemaining) {\n\t          if (currNote.shape || prevNote.liquescent === _ExsurgeChant.LiquescentType.Small) {\n\t            var neume = new Neumes.Punctum();\n\t            var state = createNeume(neume, false);\n\t            // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t            // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t            // Otherwise, we want no trailing space.\n\t            if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t            return state;\n\t          }\n\t\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return podatusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return climacusState;else {\n\t              return clivisState;\n\t            }\n\t          } else if (!prevNote.morae || !prevNote.morae.length) {\n\t            return distrophaState;\n\t          }\n\t          return createNeume(new Neumes.Punctum(), false);\n\t        }\n\t      };\n\t\n\t      var punctaInclinataState = {\n\t        neume: function neume() {\n\t          return new Neumes.PunctaInclinata();\n\t        },\n\t        handle: function handle() {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PunctaInclinata(), false);else return punctaInclinataState;\n\t        }\n\t      };\n\t\n\t      var oriscusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Oriscus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default) {\n\t            if (currNote.staffPosition > prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              return createNeume(new Neumes.PesQuassus(), true);\n\t            } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t              prevNote.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              return createNeume(new Neumes.Clivis(), true);\n\t            }\n\t          }\n\t          // stand alone oriscus\n\t          var neume = new Neumes.Oriscus(),\n\t              state = createNeume(neume, false);\n\t          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n\t          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n\t          // Otherwise, we want no trailing space.\n\t          if (currNote.staffPosition > prevNote.staffPosition && (currNote.staffPosition % 2 === 1 || prevNote.staffPosition !== currNote.staffPosition - 1 || !prevNote.morae || prevNote.morae.length === 0)) neume.trailingSpace = 0;\n\t          return state;\n\t        }\n\t      };\n\t\n\t      var podatusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Podatus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            if (prevNote.ictus) prevNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            if (prevNote.shape === _ExsurgeChant.NoteShape.Oriscus) return salicusState;else return scandicusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition) {\n\t            if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum) return pesSubpunctisState;else return torculusState;\n\t          } else return createNeume(new Neumes.Podatus(), false);\n\t        }\n\t      };\n\t\n\t      var clivisState = {\n\t        neume: function neume() {\n\t          return new Neumes.Clivis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t            return porrectusState;\n\t          } else if (currNote.staffPosition < prevNote.staffPosition && currNote.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t            return createNeume(new Neumes.Ancus(), true);\n\t          } else {\n\t            return createNeume(new Neumes.Clivis(), false);\n\t          }\n\t        }\n\t      };\n\t\n\t      var climacusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Climacus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.Climacus(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var porrectusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Porrectus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.PorrectusFlexus(), true);else return createNeume(new Neumes.Porrectus(), false);\n\t        }\n\t      };\n\t\n\t      var pesSubpunctisState = {\n\t        neume: function neume() {\n\t          return new Neumes.PesSubpunctis();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape !== _ExsurgeChant.NoteShape.Inclinatum) return createNeume(new Neumes.PesSubpunctis(), false);else return state;\n\t        }\n\t      };\n\t\n\t      var salicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Salicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition < prevNote.staffPosition) return salicusFlexusState;else return createNeume(new Neumes.Salicus(), false);\n\t        }\n\t      };\n\t\n\t      var salicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.SalicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.SalicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Scandicus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (prevNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) {\n\t            // if we get here, then it seems we have a podatus, now being followed by a climacus\n\t            // rather than a scandicus. react accordingly\n\t            return createNeume(new Neumes.Podatus(), false, false);\n\t          } else if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return scandicusFlexusState;else return createNeume(new Neumes.Scandicus(), false);\n\t        }\n\t      };\n\t\n\t      var scandicusFlexusState = {\n\t        neume: function neume() {\n\t          return new Neumes.ScandicusFlexus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          return createNeume(new Neumes.ScandicusFlexus(), false);\n\t        }\n\t      };\n\t\n\t      var virgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Virga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Inclinatum && currNote.staffPosition < prevNote.staffPosition) return climacusState;else if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return bivirgaState;else return createNeume(new Neumes.Virga(), false);\n\t        }\n\t      };\n\t\n\t      var bivirgaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Bivirga();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Virga && currNote.staffPosition === prevNote.staffPosition) return createNeume(new Neumes.Trivirga(), true);else return createNeume(new Neumes.Bivirga(), false);\n\t        }\n\t      };\n\t\n\t      var apostrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Apostropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) return distrophaState;else return createNeume(new Neumes.Apostropha(), false);\n\t        }\n\t      };\n\t\n\t      var distrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Distropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.staffPosition === prevNote.staffPosition) {\n\t            if (prevNote.morae && prevNote.morae.length) {\n\t              return createNeume(new Neumes.Distropha(), false);\n\t            } else {\n\t              return tristrophaState;\n\t            }\n\t          } else return createNeume(new Neumes.Apostropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var tristrophaState = {\n\t        neume: function neume() {\n\t          return new Neumes.Tristropha();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          // we only create a tristropha when the note run ends after three\n\t          // and the neume() function of this state is called. Otherwise\n\t          // we always interpret the third note to belong to the next sequence\n\t          // of notes.\n\t          //\n\t          // fixme: gabc allows any number of punctum/stropha in succession...\n\t          // is this a valid neume type? Or is it just multiple *stropha neumes\n\t          // in succession? Should we simplify the apostropha/distropha/\n\t          // tristropha classes to a generic stropha neume that can have 1 or\n\t          // more successive notes?\n\t          return createNeume(new Neumes.Distropha(), false, false);\n\t        }\n\t      };\n\t\n\t      var torculusState = {\n\t        neume: function neume() {\n\t          return new Neumes.Torculus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition > prevNote.staffPosition) {\n\t            var prevNoteButOne = notes[currNoteIndex - 2];\n\t            if (prevNoteButOne && prevNoteButOne.staffPosition - prevNote.staffPosition <= 4) {\n\t              if (currNote.ictus) currNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t              return torculusResupinusState;\n\t            }\n\t          }\n\t          return createNeume(new Neumes.Torculus(), false);\n\t        }\n\t      };\n\t\n\t      var torculusResupinusState = {\n\t        neume: function neume() {\n\t          return new Neumes.TorculusResupinus();\n\t        },\n\t        handle: function handle(currNote, prevNote) {\n\t          if (currNote.shape === _ExsurgeChant.NoteShape.Default && currNote.staffPosition < prevNote.staffPosition) return createNeume(new Neumes.TorculusResupinusFlexus(), true);else return createNeume(new Neumes.TorculusResupinus(), false);\n\t        }\n\t      };\n\t\n\t      var state = unknownState;\n\t\n\t      while (currNoteIndex < notes.length) {\n\t        var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n\t        var currNote = notes[currNoteIndex];\n\t\n\t        state = state.handle(currNote, prevNote, notes.length - 1 - currNoteIndex);\n\t\n\t        // if we are on the last note, then try to create a neume if we need to.\n\t        if (currNoteIndex === notes.length - 1 && state !== unknownState) createNeume(state.neume(), true);\n\t\n\t        currNoteIndex++;\n\t      }\n\t\n\t      if (neumes.length > 0) {\n\t        if (!finalTrailingSpace.isDefault) {\n\t          neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n\t          neumes[neumes.length - 1].keepWithNext = true;\n\t\n\t          if (finalTrailingSpace > 0) neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[neumes.length - 1].keepWithNext = true;\n\t        }\n\t      }\n\t\n\t      return neumes;\n\t    }\n\t\n\t    // appends any notes created to the notes array argument\n\t\n\t  }, {\n\t    key: \"createNoteFromData\",\n\t    value: function createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n\t      var note = new _ExsurgeChant.Note();\n\t      note.sourceIndex = sourceIndex;\n\t      note.sourceGabc = data;\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      if (data[0] === \"-\") {\n\t        // liquescent initio debilis\n\t        note.liquescent = _ExsurgeChant.LiquescentType.InitioDebilis;\n\t        data = data.substring(1);\n\t      }\n\t\n\t      if (data.length < 1) throw \"Invalid note data: \" + data;\n\t\n\t      // the next char is always the pitch\n\t      var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\t\n\t      if (data[0] === data[0].toUpperCase()) note.shape = _ExsurgeChant.NoteShape.Inclinatum;\n\t\n\t      note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n\t      note.pitch = pitch;\n\t\n\t      var mark;\n\t\n\t      var episemaNoteIndex = notes.length;\n\t      var episemaNote = note;\n\t\n\t      // process the modifiers\n\t      for (var i = 1; i < data.length; i++) {\n\t        var c = data[i];\n\t        var lookahead = \"\\0\";\n\t\n\t        var haveLookahead = i + 1 < data.length;\n\t        if (haveLookahead) lookahead = data[i + 1];\n\t\n\t        switch (c) {\n\t          // rhythmic markings\n\t          case \".\":\n\t            mark = null;\n\t\n\t            // gabc supports putting up to two morae on each note, by repeating the\n\t            // period. here, we check to see if we've already created a mora for the\n\t            // note, and if so, we simply force the second one to have an Above\n\t            // position hint. if a user decides to try to put position indicators\n\t            // on the double morae (such as 1 or 2), then really the behavior is\n\t            // not defined by gabc, so it's on the user to figure it out.\n\t            if (note.morae.length > 0 && notes.length) {\n\t              var previousNote = notes.slice(-1)[0];\n\t              var previousMora = note.morae.slice(-1)[0];\n\t              previousMora.note = previousNote;\n\t            }\n\t\n\t            mark = new Markings.Mora(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t\n\t            note.morae.push(mark);\n\t            break;\n\t\n\t          case \"_\":\n\t            var episemaHadModifier = false;\n\t\n\t            mark = new Markings.HorizontalEpisema(episemaNote);\n\t            while (haveLookahead) {\n\t              if (lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (lookahead === \"2\") mark.terminating = true;\n\t              // episema terminates\n\t              else if (lookahead === \"3\") mark.alignment = Markings.HorizontalEpisemaAlignment.Left;else if (lookahead === \"4\") mark.alignment = Markings.HorizontalEpisemaAlignment.Center;else if (lookahead === \"5\") mark.alignment = Markings.HorizontalEpisemaAlignment.Right;else break;\n\t\n\t              // the gabc definition for episemata is so convoluted...\n\t              // - double underscores create episemata over multiple notes.\n\t              // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n\t              //   another underscore puts a second episema on the same note\n\t              // - (when there's a 2 lookahead, then this is treated as an\n\t              //   unmodified underscore, so another underscore would be\n\t              //   added to previous notes\n\t              if (mark.alignment !== Markings.HorizontalEpisemaAlignment.Default && mark.positionHint !== _ExsurgeDrawing.MarkingPositionHint.Below) episemaHadModifier = true;\n\t\n\t              i++;\n\t              haveLookahead = i + 1 < data.length;\n\t\n\t              if (haveLookahead) lookahead = data[i + 1];\n\t            }\n\t\n\t            // since gabc allows consecutive underscores which is a shortcut to\n\t            // apply the episemata to previous notes, we keep track of that here\n\t            // in order to add the new episema to the correct note.\n\t\n\t            if (episemaNote) episemaNote.episemata.push(mark);\n\t\n\t            if (episemaNote === note && episemaHadModifier) episemaNote = note;else if (episemaNoteIndex >= 0 && notes.length > 0) episemaNote = notes[--episemaNoteIndex];\n\t\n\t            break;\n\t\n\t          case \"'\":\n\t            mark = new Markings.Ictus(ctxt, note);\n\t            if (haveLookahead && lookahead === \"1\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;else if (haveLookahead && lookahead === \"0\") mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;else if (note.shape === _ExsurgeChant.NoteShape.Virga)\n\t              // ictus on a virga goes above by default:\n\t              mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t            note.ictus = mark;\n\t            break;\n\t\n\t          //note shapes\n\t          case \"r\":\n\t            if (haveLookahead && /^[0-5]$/.test(lookahead)) {\n\t              switch (lookahead) {\n\t                case \"0\":\n\t                  note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t                  note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Linea;\n\t                  break;\n\t                case \"1\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.AcuteAccent);\n\t                  break;\n\t                case \"2\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.GraveAccent);\n\t                  break;\n\t                case \"3\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Circle);\n\t                  break;\n\t                case \"4\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.Semicircle);\n\t                  break;\n\t                case \"5\":\n\t                  note.accent = new Markings.Accent(ctxt, note, _ExsurgeDrawing.GlyphCode.ReversedSemicircle);\n\t                  break;\n\t                default:\n\t              }\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Cavum;\n\t            break;\n\t\n\t          case \"R\":\n\t            note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Linea;\n\t            break;\n\t\n\t          case \"s\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Stropha) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick stropha feature (e.g., gsss). create a new note\n\t              var newNote = new _ExsurgeChant.Note();\n\t              newNote.sourceIndex = sourceIndex + i;\n\t              newNote.sourceGabc = \"s\";\n\t              newNote.staffPosition = note.staffPosition;\n\t              newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Stropha;\n\t            break;\n\t\n\t          case \"v\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Virga) {\n\t              // if we're already a stropha, that means this is gabc's\n\t              // quick virga feature (e.g., gvvv). create a new note\n\t              var _newNote = new _ExsurgeChant.Note();\n\t              _newNote.sourceIndex = sourceIndex + i;\n\t              _newNote.sourceGabc = \"v\";\n\t              _newNote.staffPosition = note.staffPosition;\n\t              _newNote.pitch = note.pitch;\n\t              notes.push(note);\n\t              note = _newNote;\n\t              episemaNoteIndex++; // since a new note was added, increase the index here\n\t            }\n\t\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            break;\n\t\n\t          case \"V\":\n\t            note.shape = _ExsurgeChant.NoteShape.Virga;\n\t            note.shapeModifers |= _ExsurgeChant.NoteShapeModifiers.Reverse;\n\t            break;\n\t\n\t          case \"w\":\n\t            note.shape = _ExsurgeChant.NoteShape.Quilisma;\n\t            break;\n\t\n\t          case \"o\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending;\n\t              i++;\n\t            }\n\t            break;\n\t\n\t          case \"O\":\n\t            note.shape = _ExsurgeChant.NoteShape.Oriscus;\n\t            if (haveLookahead && lookahead === \"<\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Ascending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else if (haveLookahead && lookahead === \">\") {\n\t              note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Descending | _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t              i++;\n\t            } else note.shapeModifiers |= _ExsurgeChant.NoteShapeModifiers.Stemmed;\n\t            break;\n\t\n\t          // liquescents\n\t          case \"~\":\n\t            if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) note.liquescent |= _ExsurgeChant.LiquescentType.Small;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) note.liquescent |= _ExsurgeChant.LiquescentType.Large;else note.liquescent |= _ExsurgeChant.LiquescentType.Small;\n\t            break;\n\t          case \"<\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Ascending;\n\t            break;\n\t          case \">\":\n\t            note.liquescent |= _ExsurgeChant.LiquescentType.Descending;\n\t            break;\n\t\n\t          // accidentals\n\t          case \"x\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Mi) note.pitch.step = _ExsurgeCore.Step.Me;else if (note.pitch.step === _ExsurgeCore.Step.Ti) note.pitch.step = _ExsurgeCore.Step.Te;\n\t            break;\n\t          case \"y\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Te) note.pitch.step = _ExsurgeCore.Step.Ti;else if (note.pitch.step === _ExsurgeCore.Step.Me) note.pitch.step = _ExsurgeCore.Step.Mi;else if (note.pitch.step === _ExsurgeCore.Step.Du) note.pitch.step = _ExsurgeCore.Step.Do;else if (note.pitch.step === _ExsurgeCore.Step.Fu) note.pitch.step = _ExsurgeCore.Step.Fa;\n\t            break;\n\t          case \"#\":\n\t            if (note.pitch.step === _ExsurgeCore.Step.Do) note.pitch.step = _ExsurgeCore.Step.Du;else if (note.pitch.step === _ExsurgeCore.Step.Fa) note.pitch.step = _ExsurgeCore.Step.Fu;\n\t            break;\n\t\n\t          // gabc special item groups\n\t          case \"[\":\n\t            // read in the whole group and parse it\n\t            var startIndex = ++i;\n\t            while (i < data.length && data[i] !== \"]\") {\n\t              i++;\n\t            }this.processInstructionForNote(ctxt, note, data.substring(startIndex, i), startIndex);\n\t            break;\n\t        }\n\t      }\n\t\n\t      if (this.needToEndBrace && !note.braceStart && !note.braceEnd && !/[xy#]/.test(c)) {\n\t        note.braceEnd = new Markings.BracePoint(note, this.needToEndBrace.isAbove, this.needToEndBrace.shape, this.needToEndBrace.attachment === Markings.BraceAttachment.Left ? Markings.BraceAttachment.Right : Markings.BraceAttachment.Left);\n\t        note.braceEnd.automatic = true;\n\t        delete this.needToEndBrace;\n\t      }\n\t\n\t      notes.push(note);\n\t    }\n\t\n\t    // an instruction in this context is referring to a special gabc coding found after\n\t    // notes between ['s and ]'s. choral signs and braces fall into this\n\t    // category.\n\t    //\n\t    // currently only brace instructions are supported here!\n\t\n\t  }, {\n\t    key: \"processInstructionForNote\",\n\t    value: function processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n\t      var results = instruction.match(__bracketedCommandRegex);\n\t      if (results === null) return;\n\t      var cmd = results[1];\n\t      var data = results[2];\n\t      switch (cmd) {\n\t        case \"cs\":\n\t          note.choralSign = new _ExsurgeDrawing.ChoralSign(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t        case \"alt\":\n\t          note.alText = new _ExsurgeDrawing.AboveLinesText(ctxt, data, note, note.sourceIndex + sourceIndexOffset, instruction.length);\n\t          return;\n\t      }\n\t\n\t      results = instruction.match(__braceSpecRegex);\n\t\n\t      if (results === null) return;\n\t\n\t      // see the comments at the definition of __braceSpecRegex for the\n\t      // capturing groups\n\t      var above = results[1] === \"o\";\n\t      var shape = Markings.BraceShape.CurlyBrace; // default\n\t\n\t      switch (results[2]) {\n\t        case \"b\":\n\t          shape = Markings.BraceShape.RoundBrace;\n\t          break;\n\t        case \"cb\":\n\t          shape = Markings.BraceShape.CurlyBrace;\n\t          break;\n\t        case \"cba\":\n\t          shape = Markings.BraceShape.AccentedCurlyBrace;\n\t          break;\n\t      }\n\t\n\t      var attachmentPoint = results[3] === \"1\" ? Markings.BraceAttachment.Left : Markings.BraceAttachment.Right;\n\t\n\t      if (results[4] === \"{\" || results[5]) note.braceStart = new Markings.BracePoint(note, above, shape, attachmentPoint);else note.braceEnd = new Markings.BracePoint(note, above, shape, attachmentPoint);\n\t\n\t      // just have the next note end a brace that uses length;\n\t      if (results[5]) {\n\t        note.braceStart.automatic = true;\n\t        this.needToEndBrace = note.braceStart;\n\t      }\n\t    }\n\t\n\t    // takes raw gabc text source and parses it into words. For example, passing\n\t    // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n\t    // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n\t\n\t  }, {\n\t    key: \"splitWords\",\n\t    value: function splitWords(gabcNotations) {\n\t      // split the notations on whitespace boundaries, as long as the space\n\t      // immediately follows a set of parentheses. Prior to doing that, we replace\n\t      // all whitespace with spaces, which prevents tabs and newlines from ending\n\t      // up in the notation data.\n\t      gabcNotations = gabcNotations\n\t      // .trim()\n\t      // .replace(/\\s/g, \" \")\n\t      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n\t      return gabcNotations.split(/\\n/g);\n\t    }\n\t  }, {\n\t    key: \"parseSource\",\n\t    value: function parseSource(gabcSource) {\n\t      return this.parseWords(this.splitWords(gabcSource));\n\t    }\n\t\n\t    // gabcWords is an array of strings, e.g., the result of splitWords above\n\t\n\t  }, {\n\t    key: \"parseWords\",\n\t    value: function parseWords(gabcWords) {\n\t      var words = [];\n\t\n\t      for (var i = 0; i < gabcWords.length; i++) {\n\t        words.push(this.parseWord(gabcWords[i]));\n\t      }return words;\n\t    }\n\t\n\t    // returns an array of objects, each of which has the following properties\n\t    //  - notations (string)\n\t    //  - lyrics (array of strings)\n\t\n\t  }, {\n\t    key: \"parseWord\",\n\t    value: function parseWord(gabcWord) {\n\t      var syllables = [];\n\t      var matches = [];\n\t\n\t      syllables.wordLength = gabcWord.length;\n\t\n\t      while (match = __syllablesRegex.exec(gabcWord)) {\n\t        matches.push(match);\n\t      }for (var j = 0; j < matches.length; j++) {\n\t        var match = matches[j];\n\t\n\t        var lyrics = match[1].trim().split(\"|\");\n\t        var notations = match[2];\n\t\n\t        syllables.push({\n\t          notations: notations,\n\t          lyrics: lyrics\n\t        });\n\t      }\n\t\n\t      return syllables;\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgeHeight\",\n\t    value: function gabcHeightToExsurgeHeight(gabcHeight) {\n\t      return gabcHeight.toLowerCase().charCodeAt(0) - \"c\".charCodeAt(0);\n\t    }\n\t\n\t    // returns pitch\n\t\n\t  }, {\n\t    key: \"gabcHeightToExsurgePitch\",\n\t    value: function gabcHeightToExsurgePitch(clef, gabcHeight) {\n\t      var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\t\n\t      var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\t\n\t      return pitch;\n\t    }\n\t  }]);\n\n\t  return Gabc;\n\t}();\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Virga = exports.Tristropha = exports.TorculusResupinusFlexus = exports.TorculusResupinus = exports.Torculus = exports.ScandicusFlexus = exports.Scandicus = exports.SalicusFlexus = exports.Salicus = exports.Punctum = exports.PunctaInclinata = exports.PorrectusFlexus = exports.Porrectus = exports.Podatus = exports.PesSubpunctis = exports.PesQuassus = exports.Oriscus = exports.Distropha = exports.Ancus = exports.Clivis = exports.Climacus = exports.Trivirga = exports.Bivirga = exports.Apostropha = exports.Neume = undefined;\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); //\n\t// Author(s):\n\t// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n\t//\n\t// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar _ExsurgeChant = __webpack_require__(8);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tvar _ExsurgeGlyphs = __webpack_require__(3);\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NeumeBuilder = function () {\n\t  function NeumeBuilder(ctxt, neume) {\n\t    var startingX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\t\n\t    _classCallCheck(this, NeumeBuilder);\n\t\n\t    this.ctxt = ctxt;\n\t    this.neume = neume;\n\t    this.x = startingX;\n\t    this.lastNote = null;\n\t    this.lineIsHanging = false;\n\t    this.minX = 0;\n\t  }\n\t\n\t  // used to start a hanging line on the left of the next note\n\t\n\t\n\t  _createClass(NeumeBuilder, [{\n\t    key: \"lineFrom\",\n\t    value: function lineFrom(note) {\n\t      var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n\t      if (this.x === 0 && previousNotation && previousNotation.notes && previousNotation.trailingSpace === 0) {\n\t        this.lastNote = previousNotation.notes.slice(-1)[0];\n\t        this.minX = -this.ctxt.neumeLineWeight;\n\t      } else {\n\t        this.lastNote = note;\n\t        this.lineIsHanging = true;\n\t      }\n\t      return this;\n\t    }\n\t\n\t    // add a note, with a connecting line on the left if we have one\n\t\n\t  }, {\n\t    key: \"noteAt\",\n\t    value: function noteAt(note, glyph) {\n\t      var withLineTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\t\n\t      if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\t\n\t      if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\t\n\t      note.setGlyph(this.ctxt, glyph);\n\t      var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\t\n\t      var needsLine = withLineTo && this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, this.lineIsHanging);\n\t        this.neume.addVisualizer(line);\n\t        line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\t\n\t        if (!noteAlignsRight) this.x = line.bounds.x;\n\t      }\n\t\n\t      var xOffset = 0;\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Linea) {\n\t        var linea = new _ExsurgeDrawing.LineaVisualizer(this.ctxt, note);\n\t        this.neume.addVisualizer(linea);\n\t        note.origin.x += linea.origin.x;\n\t        xOffset = linea.origin.x;\n\t      }\n\t\n\t      // if this is the first note of a right aligned glyph (probably an initio debilis),\n\t      // then there's nothing to worry about. but if it's not then first, then this\n\t      // subtraction will right align it visually\n\t      if (noteAlignsRight && this.lastNote) note.bounds.x = this.x - note.bounds.width;else {\n\t        note.bounds.x = this.x + xOffset;\n\t        this.x += note.bounds.width + xOffset;\n\t      }\n\t\n\t      this.neume.addVisualizer(note);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t\n\t    // a special form of noteAdd that creates a virga\n\t    // uses a punctum cuadratum and a line rather than the virga glyphs\n\t\n\t  }, {\n\t    key: \"virgaAt\",\n\t    value: function virgaAt(note) {\n\t      var withLineTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\t\n\t      // add the punctum for the virga\n\t      this.noteAt(note, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // add a line for the virga\n\t      var line = new _ExsurgeDrawing.VirgaLineVisualizer(this.ctxt, note);\n\t      this.x -= line.bounds.width;\n\t      if (note.shapeModifers & _ExsurgeChant.NoteShapeModifiers.Reverse) {\n\t        line.bounds.x = 0;\n\t      } else {\n\t        line.bounds.x = this.x;\n\t      }\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"advanceBy\",\n\t    value: function advanceBy(x) {\n\t      this.lastNote = null;\n\t      this.lineIsHanging = false;\n\t\n\t      this.x += x;\n\t\n\t      return this;\n\t    }\n\t\n\t    // for terminating hanging lines with no lower notes\n\t\n\t  }, {\n\t    key: \"withLineEndingAt\",\n\t    value: function withLineEndingAt(note) {\n\t      if (this.lastNote === null) return;\n\t\n\t      var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n\t      this.neume.addVisualizer(line);\n\t      this.x -= line.bounds.width;\n\t      line.bounds.x = this.x;\n\t\n\t      this.neume.addVisualizer(line);\n\t\n\t      this.lastNote = note;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPodatus\",\n\t    value: function withPodatus(lowerNote, upperNote) {\n\t      var upperGlyph;\n\t      var lowerGlyph;\n\t\n\t      if (lowerNote.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        // liquescent upper note or not?\n\t        if (upperNote.liquescent === _ExsurgeChant.LiquescentType.None) upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;else upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.BeginningAscLiquescent;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Ascending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;\n\t      } else if (upperNote.liquescent & _ExsurgeChant.LiquescentType.Descending) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t      } else {\n\t        // standard shape\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.PodatusLower;\n\t        upperGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t      }\n\t\n\t      // allow a quilisma pes\n\t      if (lowerNote.shape === _ExsurgeChant.NoteShape.Quilisma) lowerGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;\n\t\n\t      this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\t\n\t      // make sure we don't have lines connected to the podatus\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withClivisUpper\",\n\t    value: function withClivisUpper(upper, lower) {\n\t      var glyph = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (upper.shape === _ExsurgeChant.NoteShape.Oriscus) this.noteAt(upper, _ExsurgeDrawing.GlyphCode.OriscusDes, false);else {\n\t        if (lower) {\n\t          this.lineFrom(lower);\n\t          this.lineIsHanging = lower.staffPosition < upper.staffPosition;\n\t          if (lower.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t            glyph = _ExsurgeDrawing.GlyphCode.BeginningDesLiquescent;\n\t          }\n\t        }\n\t        this.noteAt(upper, glyph);\n\t      }\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withClivisLower\",\n\t    value: function withClivisLower(lower) {\n\t      var lowerGlyph;\n\t      if (lower.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        lowerGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (lower.liquescent === _ExsurgeChant.LiquescentType.Ascending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (lower.liquescent === _ExsurgeChant.LiquescentType.Descending) lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      return this.noteAt(lower, lowerGlyph);\n\t    }\n\t  }, {\n\t    key: \"withClivis\",\n\t    value: function withClivis(upper, lower) {\n\t      this.withClivisUpper(upper, lower);\n\t      this.withClivisLower(lower);\n\t\n\t      // make sure we don't have lines connected to the clivis\n\t      this.lastNote = null;\n\t\n\t      return this;\n\t    }\n\t\n\t    // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n\t\n\t  }, {\n\t    key: \"withInclinata\",\n\t    value: function withInclinata(notes) {\n\t      var staffPosition = notes[0].staffPosition,\n\t          prevStaffPosition = notes[0].staffPosition;\n\t\n\t      // it is important to advance by the width of the inclinatum glyph itself\n\t      // rather than by individual note widths, so that any liquescents are spaced\n\t      // the same as non-liquscents\n\t      var advanceWidth = _ExsurgeGlyphs.Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\t\n\t      // now add all the punctum inclinatum\n\t      for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n\t        var note = notes[i];\n\t\n\t        if (note.liquescent & _ExsurgeChant.LiquescentType.Small) note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent);else if (note.liquescent & _ExsurgeChant.LiquescentType.Large)\n\t          // fixme: is the large inclinatum liquescent the same as the apostropha?\n\t          note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.Stropha);\n\t          // fixme: some climaci in the new chant books end with a punctum quadratum\n\t          // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n\t        else note.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.PunctumInclinatum);\n\t\n\t        staffPosition = note.staffPosition;\n\t\n\t        var multiple = Math.abs(prevStaffPosition - staffPosition);\n\t        switch (multiple) {\n\t          case 0:\n\t            multiple = 1.1;\n\t            break;\n\t          default:\n\t            multiple *= 2 / 3;\n\t            break;\n\t        }\n\t\n\t        if (i > 0) this.x += advanceWidth * multiple;\n\t\n\t        note.bounds.x = this.x;\n\t\n\t        this.neume.addVisualizer(note);\n\t      }\n\t\n\t      return this;\n\t    }\n\t  }, {\n\t    key: \"withPorrectusSwash\",\n\t    value: function withPorrectusSwash(start, end) {\n\t      var needsLine = this.lastNote !== null && (this.lineIsHanging || this.lastNote.glyphVisualizer && this.lastNote.glyphVisualizer.align === \"right\" || Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\t\n\t      if (needsLine) {\n\t        var line = new _ExsurgeDrawing.NeumeLineVisualizer(this.ctxt, this.lastNote, start, this.lineIsHanging);\n\t        this.x = Math.max(this.minX, this.x - line.bounds.width);\n\t        line.bounds.x = this.x;\n\t        this.neume.addVisualizer(line);\n\t      }\n\t\n\t      var glyph;\n\t\n\t      switch (start.staffPosition - end.staffPosition) {\n\t        case 1:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus1;\n\t          break;\n\t        case 2:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus2;\n\t          break;\n\t        case 3:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus3;\n\t          break;\n\t        case 4:\n\t          glyph = _ExsurgeDrawing.GlyphCode.Porrectus4;\n\t          break;\n\t        default:\n\t          // fixme: should we generate an error here?\n\t          glyph = _ExsurgeDrawing.GlyphCode.None;\n\t          break;\n\t      }\n\t\n\t      start.setGlyph(this.ctxt, glyph);\n\t      start.bounds.x = this.x;\n\t\n\t      // the second glyph does not draw anything, but it still has logical importance for the editing\n\t      // environment...it can respond to changes which will then change the swash glyph of the first.\n\t      end.setGlyph(this.ctxt, _ExsurgeDrawing.GlyphCode.None);\n\t\n\t      this.x = start.bounds.right();\n\t      end.bounds.x = this.x - end.bounds.width;\n\t\n\t      this.neume.addVisualizer(start);\n\t      this.neume.addVisualizer(end);\n\t\n\t      this.lastNote = end;\n\t      this.lineIsHanging = false;\n\t\n\t      return this;\n\t    }\n\t  }]);\n\t\n\t  return NeumeBuilder;\n\t}();\n\t\n\t/*\n\t * Neumes base class\n\t */\n\t\n\t\n\tvar Neume = exports.Neume = function (_ChantNotationElement) {\n\t  _inherits(Neume, _ChantNotationElement);\n\t\n\t  function Neume() {\n\t    var notes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\t\n\t    _classCallCheck(this, Neume);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Neume.__proto__ || Object.getPrototypeOf(Neume)).call(this));\n\t\n\t    _this.isNeume = true; // poor man's reflection\n\t    _this.notes = notes;\n\t\n\t    for (var i = 0; i < notes.length; i++) {\n\t      notes[i].neume = _this;\n\t    }return _this;\n\t  }\n\t\n\t  _createClass(Neume, [{\n\t    key: \"addNote\",\n\t    value: function addNote(note) {\n\t      note.neume = this;\n\t      this.notes.push(note);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"performLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"finishLayout\",\n\t    value: function finishLayout(ctxt) {\n\t      this.ledgerLines = this.requiresLedgerLine(ctxt);\n\t\n\t      // allow subclasses an opportunity to position their own markings...\n\t      this.positionMarkings();\n\t\n\t      // layout the markings of the notes\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        var note = this.notes[i];\n\t        var j;\n\t\n\t        for (j = 0; j < note.episemata.length; j++) {\n\t          note.episemata[j].performLayout(ctxt);\n\t          this.addVisualizer(note.episemata[j]);\n\t        }\n\t\n\t        for (j = 0; j < note.morae.length; j++) {\n\t          note.morae[j].performLayout(ctxt);\n\t          this.addVisualizer(note.morae[j]);\n\t        }\n\t\n\t        // if the note has an ictus, then add it here\n\t        if (note.ictus) {\n\t          note.ictus.performLayout(ctxt);\n\t          this.addVisualizer(note.ictus);\n\t        }\n\t\n\t        if (note.accent) {\n\t          note.accent.performLayout(ctxt);\n\t          this.addVisualizer(note.accent);\n\t        }\n\t\n\t        if (note.choralSign) {\n\t          note.choralSign.performLayout(ctxt);\n\t          this.addVisualizer(note.choralSign);\n\t        }\n\t\n\t        // braces are handled by the chant line, so we don't mess with them here\n\t        // this is because brace size depends on chant line logic (neume spacing,\n\t        // justification, etc.) so they are considered chant line level\n\t        // markings rather than note level markings\n\t      }\n\t\n\t      this.origin.x = this.notes[0].origin.x;\n\t      this.origin.y = this.notes[0].origin.y;\n\t\n\t      _get(Neume.prototype.__proto__ || Object.getPrototypeOf(Neume.prototype), \"finishLayout\", this).call(this, ctxt);\n\t    }\n\t  }, {\n\t    key: \"requiresLedgerLine\",\n\t    value: function requiresLedgerLine(ctxt) {\n\t      var firstAbove = false,\n\t          needsAbove = false,\n\t          firstBelow = false,\n\t          needsBelow = false,\n\t\n\t      // isPorrectus = false,\n\t      result = [],\n\t          ledgerLinePositionAbove = ctxt.staffLineCount * 2 + 1;\n\t\n\t      if (!this.notes) return result;\n\t\n\t      for (var i = 0; i < this.notes.length; ++i) {\n\t        var note = this.notes[i];\n\t        var staffPosition = note.staffPosition;\n\t        if (staffPosition >= ledgerLinePositionAbove - 1) {\n\t          needsAbove = needsAbove || staffPosition >= ledgerLinePositionAbove;\n\t          if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n\t          if (staffPosition >= ledgerLinePositionAbove) continue;\n\t        } else if (staffPosition <= 0) {\n\t          needsBelow = needsBelow || staffPosition <= -1;\n\t          if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n\t          if (staffPosition <= -1) continue;\n\t        }\n\t        if (needsAbove || needsBelow) {\n\t          var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n\t          result.push({\n\t            element: this.notes[firstAbove || firstBelow || 0],\n\t            endElem: this.notes[endI],\n\t            staffPosition: needsAbove ? ledgerLinePositionAbove : -1\n\t          });\n\t          firstAbove = firstBelow = needsAbove = needsBelow = false;\n\t        }\n\t        // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n\t      }\n\t      if (needsAbove || needsBelow) {\n\t        result.push({\n\t          element: this.notes[firstAbove || firstBelow || 0],\n\t          endElem: this.notes[this.notes.length - 1],\n\t          staffPosition: needsAbove ? ledgerLinePositionAbove : -1\n\t        });\n\t      }\n\t      return result;\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {}\n\t  }, {\n\t    key: \"build\",\n\t    value: function build(ctxt) {\n\t      return new NeumeBuilder(ctxt, this);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemata\",\n\t    value: function positionEpisemata(note, position) {\n\t      var i;\n\t      for (i = 0; i < note.episemata.length; i++) {\n\t        if (note.episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) note.episemata[i].positionHint = position;\n\t      }if (note.choralSign) note.choralSign.positionHint = position;\n\t      return note.episemata.length;\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataAbove\",\n\t    value: function positionEpisemataAbove(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Above);\n\t    }\n\t  }, {\n\t    key: \"positionEpisemataBelow\",\n\t    value: function positionEpisemataBelow(note) {\n\t      return this.positionEpisemata(note, _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"positionPodatusEpisemata\",\n\t    value: function positionPodatusEpisemata(bottomNote, topNote) {\n\t      // 1. episema on lower note by default be below, upper note above\n\t      this.positionEpisemataBelow(bottomNote);\n\t      this.positionEpisemataAbove(topNote);\n\t      if (topNote.ictus) {\n\t        topNote.ictus.positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionInclinataMorae\",\n\t    value: function positionInclinataMorae(notes) {\n\t      notes = notes.slice(-2);\n\t      if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition) return;\n\t      var bottomNote = notes[1],\n\t          topNote = notes[0],\n\t          mark;\n\t\n\t      // The mora on the second (lower) note should be below the punctum,\n\t      // if the punctum is on a line and the previous punctum is in the space above.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1 && topNote.staffPosition - bottomNote.staffPosition === 1 && bottomNote.morae.length > 0) {\n\t        mark = bottomNote.morae.slice(-1)[0];\n\t        if (mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionPodatusMorae\",\n\t    value: function positionPodatusMorae(bottomNote, topNote) {\n\t      var mark;\n\t\n\t      // The mora on the first (lower) note should be below it,\n\t      // if it is on a line.\n\t      if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n\t        if (bottomNote.morae.length === 1) {\n\t          mark = bottomNote.morae[0];\n\t        } else if (topNote.morae.length > 1) {\n\t          mark = topNote.morae[0];\n\t        }\n\t        if (mark && mark.positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) mark.positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t\n\t      // if there is a mora on the first note but not on the second, and the neume\n\t      // continues with a punctum higher than the second note, we need to adjust\n\t      // the space after the neume so that it follows immediately with no gap\n\t      if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n\t        bottomNote.morae[0].ignoreBounds = true;\n\t      }\n\t    }\n\t    // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n\t\n\t  }, {\n\t    key: \"positionPodatusMarkings\",\n\t    value: function positionPodatusMarkings(bottomNote, topNote) {\n\t      this.positionPodatusEpisemata(bottomNote, topNote);\n\t      this.positionPodatusMorae(bottomNote, topNote);\n\t    }\n\t\n\t    // just like a clivis, but the first note of the three also works like the second note of the clivis:\n\t    // episema below, unless the middle note also has an episema\n\t\n\t  }, {\n\t    key: \"positionTorculusMarkings\",\n\t    value: function positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n\t      var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n\t      hasTopEpisema = this.positionEpisemata(firstNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below) && hasTopEpisema;\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMorae\",\n\t    value: function positionClivisMorae(firstNote, secondNote) {\n\t      // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n\t      var morae = firstNote.morae.concat(secondNote.morae);\n\t      if (secondNote.morae.length && firstNote.staffPosition - secondNote.staffPosition === 1 && Math.abs(secondNote.staffPosition % 2) === 1) {\n\t        morae.slice(-1)[0].positionHint = _ExsurgeDrawing.MarkingPositionHint.Below;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"positionClivisEpisemata\",\n\t    value: function positionClivisEpisemata(firstNote, secondNote) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n\t      this.positionEpisemata(secondNote, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t      return hasTopEpisema;\n\t    }\n\t  }, {\n\t    key: \"positionClivisMarkings\",\n\t    value: function positionClivisMarkings(firstNote, secondNote) {\n\t      this.positionClivisMorae(firstNote, secondNote);\n\t      return this.positionClivisEpisemata(firstNote, secondNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusMarkings\",\n\t    value: function positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n\t      // episemata on first and second note work like a clivis,\n\t      // the second note should have its episema below, unless the first note also has an episema.\n\t      this.positionClivisEpisemata(firstNote, secondNote);\n\t      this.positionPodatusMarkings(secondNote, thirdNote);\n\t    }\n\t  }, {\n\t    key: \"positionPorrectusFlexusMarkings\",\n\t    value: function positionPorrectusFlexusMarkings(first, second, third, fourth) {\n\t      var hasTopEpisema = this.positionEpisemataAbove(first);\n\t      hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n\t      this.positionEpisemata(second, hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t\n\t    // subclasses can override this in order to correctly place markings in a neume specific way\n\t\n\t  }, {\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {}\n\t  }]);\n\t\n\t  return Neume;\n\t}(_ExsurgeDrawing.ChantNotationElement);\n\t\n\t/*\n\t * Apostropha\n\t */\n\t\n\t\n\tvar Apostropha = exports.Apostropha = function (_Neume) {\n\t  _inherits(Apostropha, _Neume);\n\t\n\t  function Apostropha() {\n\t    _classCallCheck(this, Apostropha);\n\t\n\t    return _possibleConstructorReturn(this, (Apostropha.__proto__ || Object.getPrototypeOf(Apostropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Apostropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var positionHint = _ExsurgeDrawing.MarkingPositionHint.Above;\n\t\n\t      // logic here is this: if first episema is default position, place it above.\n\t      // then place the second one (if there is one) opposite of the first.\n\t      for (var i = 0; i < this.notes[0].episemata.length; i++) {\n\t        if (this.notes[0].episemata[i].positionHint === _ExsurgeDrawing.MarkingPositionHint.Default) this.notes[0].episemata[i].positionHint = positionHint;else positionHint = this.notes[0].episemata[i].positionHint;\n\t\n\t        // now place the next one in the opposite position\n\t        positionHint = positionHint === _ExsurgeDrawing.MarkingPositionHint.Above ? _ExsurgeDrawing.MarkingPositionHint.Below : _ExsurgeDrawing.MarkingPositionHint.Above;\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Apostropha.prototype.__proto__ || Object.getPrototypeOf(Apostropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], Apostropha.getNoteGlyphCode(this.notes[0]));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }], [{\n\t    key: \"getNoteGlyphCode\",\n\t    value: function getNoteGlyphCode(note) {\n\t      if (note.shape === _ExsurgeChant.NoteShape.Stropha) return _ExsurgeDrawing.GlyphCode.Stropha;\n\t\n\t      if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) return _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t      if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) return _ExsurgeDrawing.GlyphCode.PunctumCavum;\n\t\n\t      return _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t    }\n\t  }]);\n\t\n\t  return Apostropha;\n\t}(Neume);\n\t\n\t/*\n\t * Bivirga\n\t *\n\t * For simplicity in implementation, Bivirga's have two notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Bivirga = exports.Bivirga = function (_Neume2) {\n\t  _inherits(Bivirga, _Neume2);\n\t\n\t  function Bivirga() {\n\t    _classCallCheck(this, Bivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Bivirga.__proto__ || Object.getPrototypeOf(Bivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Bivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Bivirga.prototype.__proto__ || Object.getPrototypeOf(Bivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Bivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Trivirga\n\t *\n\t * For simplicity in implementation, Trivirga's have three notes in the object\n\t * structure. These technically must be the same pitch though.\n\t */\n\t\n\t\n\tvar Trivirga = exports.Trivirga = function (_Neume3) {\n\t  _inherits(Trivirga, _Neume3);\n\t\n\t  function Trivirga() {\n\t    _classCallCheck(this, Trivirga);\n\t\n\t    return _possibleConstructorReturn(this, (Trivirga.__proto__ || Object.getPrototypeOf(Trivirga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Trivirga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Trivirga.prototype.__proto__ || Object.getPrototypeOf(Trivirga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[1]).advanceBy(ctxt.intraNeumeSpacing).virgaAt(this.notes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Trivirga;\n\t}(Neume);\n\t\n\t/*\n\t * Climacus\n\t */\n\t\n\t\n\tvar Climacus = exports.Climacus = function (_Neume4) {\n\t  _inherits(Climacus, _Neume4);\n\t\n\t  function Climacus() {\n\t    _classCallCheck(this, Climacus);\n\t\n\t    return _possibleConstructorReturn(this, (Climacus.__proto__ || Object.getPrototypeOf(Climacus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Climacus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Climacus.prototype.__proto__ || Object.getPrototypeOf(Climacus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]).advanceBy(ctxt.intraNeumeSpacing).withInclinata(this.notes.slice(1));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Climacus;\n\t}(Neume);\n\t\n\t/*\n\t * Clivis\n\t */\n\t\n\t\n\tvar Clivis = exports.Clivis = function (_Neume5) {\n\t  _inherits(Clivis, _Neume5);\n\t\n\t  function Clivis() {\n\t    _classCallCheck(this, Clivis);\n\t\n\t    return _possibleConstructorReturn(this, (Clivis.__proto__ || Object.getPrototypeOf(Clivis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Clivis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionClivisMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Clivis.prototype.__proto__ || Object.getPrototypeOf(Clivis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var upper = this.notes[0];\n\t      var lower = this.notes[1];\n\t\n\t      this.build(ctxt).withClivis(upper, lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Clivis;\n\t}(Neume);\n\t\n\t/*\n\t * Ancus\n\t */\n\t\n\t\n\tvar Ancus = exports.Ancus = function (_Neume6) {\n\t  _inherits(Ancus, _Neume6);\n\t\n\t  function Ancus() {\n\t    _classCallCheck(this, Ancus);\n\t\n\t    return _possibleConstructorReturn(this, (Ancus.__proto__ || Object.getPrototypeOf(Ancus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Ancus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionClivisMarkings(this.notes[0], this.notes[2]);\n\t      this.positionClivisMarkings(this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Ancus.prototype.__proto__ || Object.getPrototypeOf(Ancus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var upper = this.notes[0];\n\t      var middle = this.notes[1];\n\t      var lower = this.notes[2];\n\t\n\t      var builder = this.build(ctxt);\n\t      builder.withClivisUpper(upper, middle);\n\t      var middleGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t      if (lower.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        middleGlyph = _ExsurgeDrawing.GlyphCode.BeginningDesLiquescent;\n\t      }\n\t      if (upper.staffPosition - middle.staffPosition > 1) {\n\t        builder.withClivisUpper(middle, upper, middleGlyph);\n\t      } else {\n\t        builder.withClivisUpper(middle, null, middleGlyph);\n\t      }\n\t      builder.withClivisLower(lower);\n\t      builder.lastNote = null;\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Ancus;\n\t}(Neume);\n\t\n\t/*\n\t * Distropha\n\t *\n\t * For simplicity in implementation, Distropha's have two notes in the object\n\t * structure. These technically must be the same pitch though (like Bivirga).\n\t */\n\t\n\t\n\tvar Distropha = exports.Distropha = function (_Neume7) {\n\t  _inherits(Distropha, _Neume7);\n\t\n\t  function Distropha() {\n\t    _classCallCheck(this, Distropha);\n\t\n\t    return _possibleConstructorReturn(this, (Distropha.__proto__ || Object.getPrototypeOf(Distropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Distropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Distropha.prototype.__proto__ || Object.getPrototypeOf(Distropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = ctxt.intraNeumeSpacing;\n\t      glyphCodes.slice(0, 2).forEach(function (glyphCode) {\n\t        if (glyphCode === _ExsurgeDrawing.GlyphCode.Stropha) glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n\t      });\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Distropha;\n\t}(Neume);\n\t\n\t/*\n\t * Oriscus\n\t */\n\t\n\t\n\tvar Oriscus = exports.Oriscus = function (_Neume8) {\n\t  _inherits(Oriscus, _Neume8);\n\t\n\t  function Oriscus() {\n\t    _classCallCheck(this, Oriscus);\n\t\n\t    return _possibleConstructorReturn(this, (Oriscus.__proto__ || Object.getPrototypeOf(Oriscus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Oriscus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Oriscus.prototype.__proto__ || Object.getPrototypeOf(Oriscus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // determine the glyph to use\n\t      var note = this.notes[0];\n\t      var glyph;\n\t\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;else {\n\t          // by default we take the descending form, unless we can figure out by a lookahead here\n\t          glyph = _ExsurgeDrawing.GlyphCode.OriscusDes;\n\t\n\t          // try to find a neume following this one\n\t          var neume = ctxt.findNextNeume();\n\t\n\t          if (neume) {\n\t            var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(neume.notes[0].pitch);\n\t\n\t            if (nextNoteStaffPosition > note.staffPosition) glyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;\n\t          }\n\t        }\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }, {\n\t    key: \"resetDependencies\",\n\t    value: function resetDependencies() {\n\t      // a single oriscus tries to automatically use the right direction\n\t      // based on the following neumes. if we don't have a manually designated\n\t      // direction, then we reset our layout so that we can try to guess it\n\t      // at next layout phase.\n\t      if (this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Ascending || this.notes[0].shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Descending) return;\n\t\n\t      this.needsLayout = true;\n\t    }\n\t  }]);\n\t\n\t  return Oriscus;\n\t}(Neume);\n\t\n\t/*\n\t * PesQuassus\n\t */\n\t\n\t\n\tvar PesQuassus = exports.PesQuassus = function (_Neume9) {\n\t  _inherits(PesQuassus, _Neume9);\n\t\n\t  function PesQuassus() {\n\t    _classCallCheck(this, PesQuassus);\n\t\n\t    return _possibleConstructorReturn(this, (PesQuassus.__proto__ || Object.getPrototypeOf(PesQuassus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesQuassus, [{\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesQuassus.prototype.__proto__ || Object.getPrototypeOf(PesQuassus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var lower = this.notes[0];\n\t      var upper = this.notes[1];\n\t\n\t      var lowerGlyph;\n\t\n\t      var lowerStaffPos = lower.staffPosition;\n\t      var upperStaffPos = upper.staffPosition;\n\t\n\t      if (lower.shape === _ExsurgeChant.NoteShape.Oriscus) lowerGlyph = _ExsurgeDrawing.GlyphCode.OriscusAsc;else lowerGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\t\n\t      if (upperStaffPos - lowerStaffPos === 1)\n\t        // use a virga glyph in this case\n\t        builder.virgaAt(upper);else if (upper.liquescent === _ExsurgeChant.LiquescentType.LargeDescending) builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent).withLineEndingAt(lower);else builder.noteAt(upper, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesQuassus;\n\t}(Neume);\n\t\n\t/*\n\t * PesSubpunctis\n\t */\n\t\n\t\n\tvar PesSubpunctis = exports.PesSubpunctis = function (_Neume10) {\n\t  _inherits(PesSubpunctis, _Neume10);\n\t\n\t  function PesSubpunctis() {\n\t    _classCallCheck(this, PesSubpunctis);\n\t\n\t    return _possibleConstructorReturn(this, (PesSubpunctis.__proto__ || Object.getPrototypeOf(PesSubpunctis)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PesSubpunctis, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n\t      for (var i = 2; i < this.notes.length; ++i) {\n\t        this.positionEpisemataAbove(this.notes[i]);\n\t      }\n\t      this.positionInclinataMorae(this.notes.slice(1));\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PesSubpunctis.prototype.__proto__ || Object.getPrototypeOf(PesSubpunctis.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      // podatus followed by inclinata\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]).advanceBy(ctxt.intraNeumeSpacing * 0.68).withInclinata(this.notes.slice(2));\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PesSubpunctis;\n\t}(Neume);\n\t\n\t/*\n\t * Podatus\n\t *\n\t * This podatus class handles a few neume types actually, depending on the note\n\t * data: Podatus (including various liquescent types on the upper note),\n\t * Podatus initio debilis, and Quilisma-Pes\n\t */\n\t\n\t\n\tvar Podatus = exports.Podatus = function (_Neume11) {\n\t  _inherits(Podatus, _Neume11);\n\t\n\t  function Podatus() {\n\t    _classCallCheck(this, Podatus);\n\t\n\t    return _possibleConstructorReturn(this, (Podatus.__proto__ || Object.getPrototypeOf(Podatus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Podatus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Podatus.prototype.__proto__ || Object.getPrototypeOf(Podatus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Podatus;\n\t}(Neume);\n\t\n\t/*\n\t * Porrectus\n\t */\n\t\n\t\n\tvar Porrectus = exports.Porrectus = function (_Neume12) {\n\t  _inherits(Porrectus, _Neume12);\n\t\n\t  function Porrectus() {\n\t    _classCallCheck(this, Porrectus);\n\t\n\t    return _possibleConstructorReturn(this, (Porrectus.__proto__ || Object.getPrototypeOf(Porrectus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Porrectus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Porrectus.prototype.__proto__ || Object.getPrototypeOf(Porrectus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var thirdGlyph;\n\t\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) thirdGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else thirdGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Porrectus;\n\t}(Neume);\n\t\n\t/*\n\t * PorrectusFlexus\n\t */\n\t\n\t\n\tvar PorrectusFlexus = exports.PorrectusFlexus = function (_Neume13) {\n\t  _inherits(PorrectusFlexus, _Neume13);\n\t\n\t  function PorrectusFlexus() {\n\t    _classCallCheck(this, PorrectusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (PorrectusFlexus.__proto__ || Object.getPrototypeOf(PorrectusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PorrectusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[0], this.notes[1], this.notes[2], this.notes[3]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PorrectusFlexus.prototype.__proto__ || Object.getPrototypeOf(PorrectusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fourthGlyph;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        thirdGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).lineFrom(second).withPorrectusSwash(first, second).noteAt(third, thirdGlyph).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PorrectusFlexus;\n\t}(Neume);\n\t\n\t// this is some type of pseudo nume right? there is no such thing as a neume\n\t// of puncta inclinata, but this will be part of other composite neumes.\n\t\n\t\n\tvar PunctaInclinata = exports.PunctaInclinata = function (_Neume14) {\n\t  _inherits(PunctaInclinata, _Neume14);\n\t\n\t  function PunctaInclinata() {\n\t    _classCallCheck(this, PunctaInclinata);\n\t\n\t    return _possibleConstructorReturn(this, (PunctaInclinata.__proto__ || Object.getPrototypeOf(PunctaInclinata)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(PunctaInclinata, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionInclinataMorae(this.notes);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(PunctaInclinata.prototype.__proto__ || Object.getPrototypeOf(PunctaInclinata.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).withInclinata(this.notes);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return PunctaInclinata;\n\t}(Neume);\n\t\n\t/*\n\t * Punctum\n\t */\n\t\n\t\n\tvar Punctum = exports.Punctum = function (_Neume15) {\n\t  _inherits(Punctum, _Neume15);\n\t\n\t  function Punctum() {\n\t    _classCallCheck(this, Punctum);\n\t\n\t    return _possibleConstructorReturn(this, (Punctum.__proto__ || Object.getPrototypeOf(Punctum)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Punctum, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Punctum.prototype.__proto__ || Object.getPrototypeOf(Punctum.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note = this.notes[0];\n\t      var glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      // determine the glyph to use\n\t      if (note.liquescent !== _ExsurgeChant.LiquescentType.None) {\n\t        if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatumLiquescent;else if (note.shape === _ExsurgeChant.NoteShape.Oriscus) glyph = _ExsurgeDrawing.GlyphCode.OriscusLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumLiquescent;\n\t      } else {\n\t        if (note.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Cavum) glyph = _ExsurgeDrawing.GlyphCode.PunctumCavum;else if (note.shape === _ExsurgeChant.NoteShape.Inclinatum) glyph = _ExsurgeDrawing.GlyphCode.PunctumInclinatum;else if (note.shape === _ExsurgeChant.NoteShape.Quilisma) glyph = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t      }\n\t\n\t      this.build(ctxt).noteAt(note, glyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Punctum;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus\n\t */\n\t\n\t\n\tvar Salicus = exports.Salicus = function (_Neume16) {\n\t  _inherits(Salicus, _Neume16);\n\t\n\t  function Salicus() {\n\t    _classCallCheck(this, Salicus);\n\t\n\t    return _possibleConstructorReturn(this, (Salicus.__proto__ || Object.getPrototypeOf(Salicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Salicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      // by default place episema below\n\t      // fixme: is this correct?\n\t      for (var i = 0; i < this.notes.length; i++) {\n\t        this.positionEpisemataBelow(this.notes[i]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Salicus.prototype.__proto__ || Object.getPrototypeOf(Salicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms\n\t      if (third.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (third.liquescent === _ExsurgeChant.LiquescentType.Descending) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.virgaAt(third);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Salicus;\n\t}(Neume);\n\t\n\t/*\n\t * Salicus Flexus\n\t */\n\t\n\t\n\tvar SalicusFlexus = exports.SalicusFlexus = function (_Neume17) {\n\t  _inherits(SalicusFlexus, _Neume17);\n\t\n\t  function SalicusFlexus() {\n\t    _classCallCheck(this, SalicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (SalicusFlexus.__proto__ || Object.getPrototypeOf(SalicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(SalicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      var hasTopEpisema = this.positionTorculusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionEpisemata(this.notes[0], hasTopEpisema ? _ExsurgeDrawing.MarkingPositionHint.Above : _ExsurgeDrawing.MarkingPositionHint.Below);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(SalicusFlexus.prototype.__proto__ || Object.getPrototypeOf(SalicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var builder = this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // if the next note doesn't require a stem connector, then add a tad bit\n\t      // of spacing here\n\t      if (!(second.shapeModifiers & _ExsurgeChant.NoteShapeModifiers.Stemmed)) builder.advanceBy(ctxt.intraNeumeSpacing);\n\t\n\t      // second note is always an oriscus, which may or may not be stemmed\n\t      // to the first\n\t      builder.noteAt(second, _ExsurgeDrawing.GlyphCode.OriscusAsc);\n\t\n\t      // third note can be a punctum quadratum or various liquescent forms,\n\t      // ...based on note four though!\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(third, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      // finally, do the fourth note\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent);else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent);else builder.noteAt(fourth, _ExsurgeDrawing.GlyphCode.PunctumQuadratum);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return SalicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus\n\t */\n\t\n\t\n\tvar Scandicus = exports.Scandicus = function (_Neume18) {\n\t  _inherits(Scandicus, _Neume18);\n\t\n\t  function Scandicus() {\n\t    _classCallCheck(this, Scandicus);\n\t\n\t    return _possibleConstructorReturn(this, (Scandicus.__proto__ || Object.getPrototypeOf(Scandicus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Scandicus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionEpisemataAbove(this.notes[2]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t      }\n\t    }\n\t\n\t    // if the third note shape is a virga, then the scadicus is rendered\n\t    // as a podatus followed by a virga. Otherwise, it's rendered as a\n\t    // punctum followed by a podatus...\n\t\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Scandicus.prototype.__proto__ || Object.getPrototypeOf(Scandicus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).virgaAt(third);\n\t      } else {\n\t        this.build(ctxt).noteAt(first, first.shape === _ExsurgeChant.NoteShape.Quilisma ? _ExsurgeDrawing.GlyphCode.Quilisma : _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Scandicus;\n\t}(Neume);\n\t\n\t/*\n\t * Scandicus Flexus\n\t */\n\t\n\t\n\tvar ScandicusFlexus = exports.ScandicusFlexus = function (_Neume19) {\n\t  _inherits(ScandicusFlexus, _Neume19);\n\t\n\t  function ScandicusFlexus() {\n\t    _classCallCheck(this, ScandicusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (ScandicusFlexus.__proto__ || Object.getPrototypeOf(ScandicusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(ScandicusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      if (this.notes[2].shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n\t        this.positionClivisMarkings(this.notes[2], this.notes[3]);\n\t      } else {\n\t        this.positionEpisemataBelow(this.notes[0]);\n\t        this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n\t        this.positionEpisemataAbove(this.notes[3]);\n\t      }\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(ScandicusFlexus.prototype.__proto__ || Object.getPrototypeOf(ScandicusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      if (third.shape === _ExsurgeChant.NoteShape.Virga) {\n\t        this.build(ctxt).withPodatus(first, second).advanceBy(ctxt.intraNeumeSpacing).withClivis(third, fourth);\n\t      } else {\n\t        var fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t        if (fourth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fourth.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t\n\t        this.build(ctxt).noteAt(first, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).withPodatus(second, third).advanceBy(ctxt.intraNeumeSpacing).noteAt(fourth, fourthGlyph);\n\t      }\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return ScandicusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Torculus\n\t */\n\t\n\t\n\tvar Torculus = exports.Torculus = function (_Neume20) {\n\t  _inherits(Torculus, _Neume20);\n\t\n\t  function Torculus() {\n\t    _classCallCheck(this, Torculus);\n\t\n\t    return _possibleConstructorReturn(this, (Torculus.__proto__ || Object.getPrototypeOf(Torculus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Torculus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Torculus.prototype.__proto__ || Object.getPrototypeOf(Torculus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var note1 = this.notes[0];\n\t      var note2 = this.notes[1];\n\t      var note3 = this.notes[2];\n\t\n\t      var glyph1, glyph3;\n\t\n\t      if (note1.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) glyph1 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note1.shape === _ExsurgeChant.NoteShape.Quilisma) glyph1 = _ExsurgeDrawing.GlyphCode.Quilisma;else glyph1 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (note3.liquescent & _ExsurgeChant.LiquescentType.Small) glyph3 = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Ascending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (note3.liquescent & _ExsurgeChant.LiquescentType.Descending) glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else glyph3 = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(note1, glyph1).noteAt(note2, _ExsurgeDrawing.GlyphCode.PunctumQuadratum).noteAt(note3, glyph3);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Torculus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinus\n\t */\n\t\n\t\n\tvar TorculusResupinus = exports.TorculusResupinus = function (_Neume21) {\n\t  _inherits(TorculusResupinus, _Neume21);\n\t\n\t  function TorculusResupinus() {\n\t    _classCallCheck(this, TorculusResupinus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinus.__proto__ || Object.getPrototypeOf(TorculusResupinus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t\n\t      var firstGlyph, fourthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fourth.liquescent & _ExsurgeChant.LiquescentType.Small) fourthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingAscLiquescent;else if (third.liquescent & _ExsurgeChant.LiquescentType.Descending) fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fourthGlyph = _ExsurgeDrawing.GlyphCode.PodatusUpper;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinus;\n\t}(Neume);\n\t\n\t/*\n\t * TorculusResupinusFlexus\n\t */\n\t\n\t\n\tvar TorculusResupinusFlexus = exports.TorculusResupinusFlexus = function (_Neume22) {\n\t  _inherits(TorculusResupinusFlexus, _Neume22);\n\t\n\t  function TorculusResupinusFlexus() {\n\t    _classCallCheck(this, TorculusResupinusFlexus);\n\t\n\t    return _possibleConstructorReturn(this, (TorculusResupinusFlexus.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(TorculusResupinusFlexus, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionPorrectusFlexusMarkings(this.notes[1], this.notes[2], this.notes[3], this.notes[4]);\n\t      this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(TorculusResupinusFlexus.prototype.__proto__ || Object.getPrototypeOf(TorculusResupinusFlexus.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      var first = this.notes[0];\n\t      var second = this.notes[1];\n\t      var third = this.notes[2];\n\t      var fourth = this.notes[3];\n\t      var fifth = this.notes[4];\n\t\n\t      var firstGlyph,\n\t          fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum,\n\t          fifthGlyph;\n\t\n\t      if (first.liquescent === _ExsurgeChant.LiquescentType.InitioDebilis) {\n\t        firstGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (first.shape === _ExsurgeChant.NoteShape.Quilisma) firstGlyph = _ExsurgeDrawing.GlyphCode.Quilisma;else firstGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      if (fifth.liquescent & _ExsurgeChant.LiquescentType.Small) {\n\t        fourthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;\n\t        fifthGlyph = _ExsurgeDrawing.GlyphCode.TerminatingDesLiquescent;\n\t      } else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Ascending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumAscLiquescent;else if (fifth.liquescent & _ExsurgeChant.LiquescentType.Descending) fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratumDesLiquescent;else fifthGlyph = _ExsurgeDrawing.GlyphCode.PunctumQuadratum;\n\t\n\t      this.build(ctxt).noteAt(first, firstGlyph).withPorrectusSwash(second, third).noteAt(fourth, fourthGlyph).noteAt(fifth, fifthGlyph);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return TorculusResupinusFlexus;\n\t}(Neume);\n\t\n\t/*\n\t * Tristropha\n\t *\n\t * For simplicity in implementation, Tristropha's have three notes in the object\n\t * structure. These technically must be the same pitch though (like the\n\t * Distropha and Bivirga).\n\t */\n\t\n\t\n\tvar Tristropha = exports.Tristropha = function (_Neume23) {\n\t  _inherits(Tristropha, _Neume23);\n\t\n\t  function Tristropha() {\n\t    _classCallCheck(this, Tristropha);\n\t\n\t    return _possibleConstructorReturn(this, (Tristropha.__proto__ || Object.getPrototypeOf(Tristropha)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Tristropha, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t      this.positionEpisemataAbove(this.notes[1]);\n\t      this.positionEpisemataAbove(this.notes[2]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Tristropha.prototype.__proto__ || Object.getPrototypeOf(Tristropha.prototype), \"performLayout\", this).call(this, ctxt);\n\t      var glyphCodes = this.notes.map(function (note) {\n\t        return Apostropha.getNoteGlyphCode(note);\n\t      });\n\t      var glyphAdvance = glyphCodes[0] === _ExsurgeDrawing.GlyphCode.Stropha ? ctxt.intraNeumeSpacing / 2 : ctxt.intraNeumeSpacing;\n\t\n\t      this.build(ctxt).noteAt(this.notes[0], glyphCodes[0]).advanceBy(glyphAdvance).noteAt(this.notes[1], glyphCodes[1]).advanceBy(glyphAdvance).noteAt(this.notes[2], glyphCodes[2]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Tristropha;\n\t}(Neume);\n\t\n\t/*\n\t * Virga\n\t */\n\t\n\t\n\tvar Virga = exports.Virga = function (_Neume24) {\n\t  _inherits(Virga, _Neume24);\n\t\n\t  function Virga() {\n\t    _classCallCheck(this, Virga);\n\t\n\t    return _possibleConstructorReturn(this, (Virga.__proto__ || Object.getPrototypeOf(Virga)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Virga, [{\n\t    key: \"positionMarkings\",\n\t    value: function positionMarkings() {\n\t      this.positionEpisemataAbove(this.notes[0]);\n\t    }\n\t  }, {\n\t    key: \"performLayout\",\n\t    value: function performLayout(ctxt) {\n\t      _get(Virga.prototype.__proto__ || Object.getPrototypeOf(Virga.prototype), \"performLayout\", this).call(this, ctxt);\n\t\n\t      this.build(ctxt).virgaAt(this.notes[0]);\n\t\n\t      this.finishLayout(ctxt);\n\t    }\n\t  }]);\n\t\n\t  return Virga;\n\t}(Neume);\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Titles = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _ExsurgeCore = __webpack_require__(1);\n\t\n\tvar _ExsurgeDrawing = __webpack_require__(4);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //\n\t// Author(s):\n\t// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n\t//\n\t// Copyright (c) 2019\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a copy\n\t// of this software and associated documentation files (the \"Software\"), to deal\n\t// in the Software without restriction, including without limitation the rights\n\t// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\t// copies of the Software, and to permit persons to whom the Software is\n\t// furnished to do so, subject to the following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included in\n\t// all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\t// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\t// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\t// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\t// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\t// THE SOFTWARE.\n\t//\n\t\n\tvar Titles = exports.Titles = function (_ChantLayoutElement) {\n\t  _inherits(Titles, _ChantLayoutElement);\n\t\n\t  function Titles(ctxt, score) {\n\t    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n\t        supertitle = _ref.supertitle,\n\t        title = _ref.title,\n\t        subtitle = _ref.subtitle,\n\t        textLeft = _ref.textLeft,\n\t        textRight = _ref.textRight;\n\t\n\t    _classCallCheck(this, Titles);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Titles.__proto__ || Object.getPrototypeOf(Titles)).call(this));\n\t\n\t    _this.score = score;\n\t    _this.setSupertitle(ctxt, supertitle);\n\t    _this.setTitle(ctxt, title);\n\t    _this.setSubtitle(ctxt, subtitle);\n\t    _this.setTextLeft(ctxt, textLeft);\n\t    _this.setTextRight(ctxt, textRight);\n\t    return _this;\n\t  }\n\t\n\t  _createClass(Titles, [{\n\t    key: \"setBoundsX\",\n\t    value: function setBoundsX(ctxt, elementName, width) {\n\t      var element = this[elementName];\n\t      switch (ctxt.textStyles[elementName].alignment) {\n\t        case \"left\":\n\t          element.textAnchor = \"start\";\n\t          element.bounds.x = 0;\n\t          break;\n\t        case \"right\":\n\t          element.textAnchor = \"end\";\n\t          element.bounds.x = width;\n\t          break;\n\t        case \"center\":\n\t        default:\n\t          element.textAnchor = \"middle\";\n\t          element.bounds.x = width / 2;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Lays out the titles, and returns their total height\n\t     * @param  {ChantContext} ctxt\n\t     * @return {number}      the tottal height of titles laid out\n\t     */\n\t\n\t  }, {\n\t    key: \"layoutTitles\",\n\t    value: function layoutTitles(ctxt, width) {\n\t      this.bounds = new _ExsurgeCore.Rect(0, 0, 0, 0);\n\t      var y = 0;\n\t      if (this.supertitle) {\n\t        this.supertitle.recalculateMetrics(ctxt);\n\t        this.supertitle.setMaxWidth(ctxt, width);\n\t\n\t        this.setBoundsX(ctxt, \"supertitle\", width);\n\t        this.supertitle.bounds.y = y;\n\t        this.bounds.union(this.supertitle.bounds);\n\t        this.supertitle.bounds.y += this.supertitle.origin.y;\n\t        y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n\t      }\n\t      if (this.title) {\n\t        if (y) y += this.title.padding(ctxt);\n\t        this.title.recalculateMetrics(ctxt);\n\t        this.title.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"title\", width);\n\t        this.title.bounds.y = y;\n\t        this.bounds.union(this.title.bounds);\n\t        this.title.bounds.y += this.title.origin.y;\n\t        y += this.title.bounds.height + this.title.padding(ctxt);\n\t      }\n\t      if (this.subtitle) {\n\t        if (y) y += this.subtitle.padding(ctxt);\n\t        this.subtitle.recalculateMetrics(ctxt);\n\t        this.subtitle.setMaxWidth(ctxt, width);\n\t        this.setBoundsX(ctxt, \"subtitle\", width);\n\t        this.subtitle.bounds.y = y;\n\t        this.bounds.union(this.subtitle.bounds);\n\t        this.subtitle.bounds.y += this.subtitle.origin.y;\n\t        y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n\t      }\n\t      var finalY = y,\n\t          textLeft = this.score.overrideTextLeft || this.textLeft;\n\t      if (textLeft) {\n\t        textLeft.recalculateMetrics(ctxt);\n\t        textLeft.bounds.y = y;\n\t        this.bounds.union(textLeft.bounds);\n\t        textLeft.bounds.y += textLeft.origin.y;\n\t        finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n\t      }\n\t      if (this.textRight) {\n\t        this.textRight.recalculateMetrics(ctxt);\n\t        this.textRight.bounds.x = width;\n\t        this.textRight.bounds.y = y;\n\t        this.bounds.union(this.textRight.bounds);\n\t        this.textRight.bounds.y += this.textRight.origin.y;\n\t        finalY = Math.max(finalY, y + this.textRight.bounds.height + this.textRight.padding(ctxt));\n\t      }\n\t      return finalY;\n\t    }\n\t  }, {\n\t    key: \"setSupertitle\",\n\t    value: function setSupertitle(ctxt, supertitle) {\n\t      this.supertitle = supertitle ? new _ExsurgeDrawing.Supertitle(ctxt, supertitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTitle\",\n\t    value: function setTitle(ctxt, title) {\n\t      this.title = title ? new _ExsurgeDrawing.Title(ctxt, title) : null;\n\t    }\n\t  }, {\n\t    key: \"setSubtitle\",\n\t    value: function setSubtitle(ctxt, subtitle) {\n\t      this.subtitle = subtitle ? new _ExsurgeDrawing.Subtitle(ctxt, subtitle) : null;\n\t    }\n\t  }, {\n\t    key: \"setTextLeft\",\n\t    value: function setTextLeft(ctxt, textLeft) {\n\t      this.textLeft = textLeft ? new _ExsurgeDrawing.TextLeftRight(ctxt, textLeft, \"textLeft\") : null;\n\t    }\n\t  }, {\n\t    key: \"setTextRight\",\n\t    value: function setTextRight(ctxt, textRight) {\n\t      this.textRight = textRight ? new _ExsurgeDrawing.TextLeftRight(ctxt, textRight, \"textRight\") : null;\n\t    }\n\t  }, {\n\t    key: \"hasSupertitle\",\n\t    value: function hasSupertitle(ctxt, supertitle) {\n\t      return !!this.supertitle;\n\t    }\n\t  }, {\n\t    key: \"hasTitle\",\n\t    value: function hasTitle(ctxt, title) {\n\t      return !!this.title;\n\t    }\n\t  }, {\n\t    key: \"hasSubtitle\",\n\t    value: function hasSubtitle(ctxt, subtitle) {\n\t      return !!this.subtitle;\n\t    }\n\t  }, {\n\t    key: \"hasTextLeft\",\n\t    value: function hasTextLeft(ctxt, textLeft) {\n\t      return !!this.textLeft;\n\t    }\n\t  }, {\n\t    key: \"hasTextRight\",\n\t    value: function hasTextRight(ctxt, textRight) {\n\t      return !!this.textRight;\n\t    }\n\t  }, {\n\t    key: \"draw\",\n\t    value: function draw(ctxt) {\n\t      var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\t\n\t      var canvasCtxt = ctxt.canvasCtxt;\n\t      canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\t\n\t      var _arr = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i = 0; _i < _arr.length; _i++) {\n\t        var el = _arr[_i];\n\t        if (el) el.draw(ctxt, scale);\n\t      }\n\t\n\t      canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n\t    }\n\t  }, {\n\t    key: \"getInnerNodes\",\n\t    value: function getInnerNodes(ctxt) {\n\t      var functionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"createSvgNode\";\n\t\n\t      var nodes = [];\n\t\n\t      var _arr2 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n\t        var el = _arr2[_i2];\n\t        if (el) nodes.push(el[functionName](ctxt));\n\t      }\n\t      return nodes;\n\t    }\n\t  }, {\n\t    key: \"createSvgNode\",\n\t    value: function createSvgNode(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\t\n\t      var node = _ExsurgeDrawing.QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\t\n\t      node.source = this;\n\t      this.svg = node;\n\t\n\t      return node;\n\t    }\n\t  }, {\n\t    key: \"createSvgTree\",\n\t    value: function createSvgTree(ctxt) {\n\t      var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\t\n\t      return _ExsurgeDrawing.QuickSvg.createSvgTree.apply(_ExsurgeDrawing.QuickSvg, [\"g\", { class: \"Titles\", source: this }].concat(_toConsumableArray(nodes)));\n\t    }\n\t  }, {\n\t    key: \"createSvgFragment\",\n\t    value: function createSvgFragment(ctxt) {\n\t      var fragment = \"\";\n\t\n\t      var _arr3 = [this.supertitle, this.title, this.subtitle, this.score.overrideTextLeft || this.textLeft, this.textRight];\n\t      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {\n\t        var el = _arr3[_i3];\n\t        if (el) fragment += el.createSvgFragment(ctxt);\n\t      }\n\t\n\t      fragment = _ExsurgeDrawing.QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n\t      return fragment;\n\t    }\n\t  }]);\n\t\n\t  return Titles;\n\t}(_ExsurgeDrawing.ChantLayoutElement);\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// exsurge.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c31c4a9b3cce0a034823","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n'use strict';\n\n// import { Annotation, ChantContext } from './Exsurge.Drawing.js'\n// import { Gabc } from './Exsurge.Gabc.js'\n//\n// // client side support\n//\n// if (typeof document !== 'undefined' && document.registerElement) {\n//   var ChantVisualElementPrototype = Object.create(HTMLElement.prototype);\n//\n//   ChantVisualElementPrototype.createdCallback = function() {\n//     var ctxt = new ChantContext();\n//\n//     ctxt.setFont(\"'Crimson Text', serif\", 19.2);\n//\n//     var useDropCap = true;\n//     var useDropCapAttr = this.getAttribute(\"use-drop-cap\");\n//     if (useDropCapAttr === 'false')\n//       useDropCap = false;\n//\n//     var score = Gabc.loadChantScore(ctxt, this.innerText, useDropCap);\n//\n//     var annotationAttr = this.getAttribute(\"annotation\");\n//     if (annotationAttr) {\n//       // add an annotation\n//       score.annotation = new Annotation(ctxt, annotationAttr);\n//     }\n//\n//     var _element = this;\n//\n//     var width = 0;\n//     var doLayout = function() {\n//       var newWidth = _element.parentElement.clientWidth;\n//       if(width === newWidth) return;\n//       width = newWidth;\n//       // perform layout on the chant\n//       score.performLayout(ctxt, function() {\n//         score.layoutChantLines(ctxt, width, function() {\n//           // render the score to svg code\n//           _element.appendElement(score.createSvgNode(ctxt));\n//         });\n//       });\n//     }\n//     doLayout();\n//     if (window.addEventListener)\n//       window.addEventListener('resize',doLayout,false);\n//     else if (window.attachEvent)\n//       window.attachEvent('onresize',doLayout);\n//   }\n//\n//   ChantVisualElementPrototype.attachedCallback = function() {\n//\n//   }\n//\n//   // register the custom element\n//   // if(window.customElements && window.customElements.define) {\n//   //   window.customElements.define('chant-visual', ChantVisualElementPrototype);\n//   // } else {\n//     document.registerElement('chant-visual', {\n//       prototype: ChantVisualElementPrototype\n//     });\n//   // }\n// }\n\nexport * from './Exsurge.Core.js'\nexport * from './Exsurge.Text.js'\nexport * from './Exsurge.Glyphs.js'\nexport * from './Exsurge.Drawing.js'\nexport * from './Exsurge.Chant.js'\nexport * from './Exsurge.Chant.ChantLine.js'\nexport * from './Exsurge.Chant.Markings.js'\nexport * from './Exsurge.Chant.Signs.js'\nexport * from './Exsurge.Chant.Neumes.js'\nexport * from './Exsurge.Gabc.js'\nexport * from './Exsurge.Titles.js'\nexport * from './greextraGlyphs.js'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nexport var Units = {\n  // enums\n  DeviceIndepenedent: 0, // device independent units: 96/inch\n  Centimeters: 1,\n  Millimeters: 2,\n  Inches: 3,\n\n  // constants for device independent units (diu)\n  DIU_PER_INCH: 96,\n  DIU_PER_CENTIMETER: 96 / 2.54,\n\n  ToDeviceIndependent: function (n, inputUnits) {\n    switch (inputUnits) {\n      case Centimeters:\n        return n * Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n * Units.DIU_PER_CENTIMETER / 10;\n      case Inches:\n        return n * Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n  FromDeviceIndependent: function (n, outputUnits) {\n    switch (outputUnits) {\n      case Centimeters:\n        return n / Units.DIU_PER_CENTIMETER;\n      case Millimeters:\n        return n / Units.DIU_PER_CENTIMETER * 10;\n      case Inches:\n        return n / Units.DIU_PER_INCH;\n      default:\n        return n;\n    }\n  },\n\n\n  StringToUnitsType: function(s) {\n    switch (s.ToLower()) {\n      case \"in\":\n      case \"inches\":\n        return Units.Inches;\n\n      case \"cm\":\n      case \"centimeters\":\n        return Units.Centimeters;\n\n      case \"mm\":\n      case \"millimeters\":\n        return Units.Millimeters;\n\n      case \"di\":\n      case \"device-independent\":\n        return Units.DeviceIndepenedent;\n\n      default:\n        return Units.DeviceIndepenedent;\n    }\n  },\n\n  UnitsTypeToString: function(units) {\n    switch (units) {\n      case Units.Inches: return \"in\";\n      case Units.Centimeters: return \"cm\";\n      case Units.Millimeters: return \"mm\";\n      case Units.DeviceIndepenedent: return \"device-independent\";\n      default: return \"device-independent\";\n    }\n  }\n}\n\nexport function DeviceIndependent(n) {\n  return n;\n}\n\nexport function Centimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function Millimeters(n) {\n  return Units.ToDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function Inches(n) {\n  return Units.ToDeviceIndependent(n, Units.Inches);\n}\n\nexport function ToCentimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Centimeters);\n}\n\nexport function ToMillimeters(n) {\n  return Units.FromDeviceIndependent(n, Units.Millimeters);\n}\n\nexport function ToInches(n) {\n  return Units.FromDeviceIndependent(n, Units.Inches);\n}\n\n\n/*\n * Point\n */\nexport class Point {\n  constructor(x, y) {\n    this.x = (typeof x !== 'undefined') ? x : 0;\n    this.y = (typeof y !== 'undefined') ? y : 0;\n  }\n\n  clone() {\n    return new Point(this.x, this.y);\n  }\n\n  equals(point) {\n    return this.x === point.x && this.y === point.y;\n  }\n}\n\n/*\n * Rect\n */\nexport class Rect {\n  constructor(x, y, width, height) {\n    this.x = (typeof x !== 'undefined') ? x : Infinity;\n    this.y = (typeof y !== 'undefined') ? y : Infinity;\n    this.width = (typeof width !== 'undefined') ? width : -Infinity;\n    this.height = (typeof height !== 'undefined') ? height : -Infinity;\n  }\n\n  clone() {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n\n  isEmpty() {\n    return (this.x === Infinity &&\n            this.y === Infinity &&\n            this.width === -Infinity &&\n            this.height === -Infinity);\n  }\n\n  // convenience method\n  right() {\n    return this.x + this.width;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  equals(rect) {\n    return this.x === rect.x && this.y === rect.y &&\n           this.width === rect.width && this.height === rect.height;\n  }\n\n  // other can be a Point or a Rect\n  contains(other) {\n    if (other instanceof Point) {\n      return other.x >= this.x &&\n              other.x <= this.x + this.width &&\n              other.y >= this.y &&\n              other.y <= this.y + this.height;\n    } else { // better be instance of Rect\n      return this.x <= other.x &&\n              this.x + this.width >= other.x + other.width &&\n              this.y <= other.y &&\n              this.y + this.height >= other.y + other.height;\n    }\n  }\n\n  union(rect) {\n\n    var right = Math.max(this.x + this.width, rect.x + rect.width);\n    var bottom = Math.max(this.y + this.height, rect.y + rect.height);\n\n    this.x = Math.min(this.x, rect.x);\n    this.y = Math.min(this.y, rect.y);\n\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n  }\n}\n\n/**\n * Margins\n *\n * @class\n */\nexport class Margins {\n  constructor(left, top, right, bottom) {\n    this.left = (typeof left !== 'undefined') ? left : 0;\n    this.top = (typeof top !== 'undefined') ? top : 0;\n    this.right = (typeof right !== 'undefined') ? right : 0;\n    this.bottom = (typeof bottom !== 'undefined') ? bottom : 0;\n  }\n\n  clone() {\n    return new Margins(this.left, this.top, this.right, this.bottom);\n  }\n\n  equals(margins) {\n    return this.left === margins.left &&\n        this.top === margins.top &&\n        this.right === margins.right &&\n        this.bottom === margins.bottom;\n  }\n}\n\n/**\n * Size\n *\n * @class\n */\nexport class Size {\n  constructor(width, height) {\n    this.width = (typeof width !== 'undefined') ? width : 0;\n    this.height = (typeof height !== 'undefined') ? height : 0;\n  }\n\n  clone() {\n    return new Size(this.width, this.height);\n  }\n\n  equals(size) {\n    return this.width === size.width && this.height === size.height;\n  }\n}\n\n\n/*\n * Pitches, notes\n */\nexport var Step = {\n  Do: 0,\n  Du: 1,\n  Re: 2,\n  Me: 3,\n  Mi: 4,\n  Fa: 5,\n  Fu: 6,\n  So: 7,\n  La: 9,\n  Te: 10,\n  Ti: 11\n};\n\n  // this little array helps map step values to staff positions. The numeric values of steps\n  // correspond to whole step increments (2) or half step increments (1). This gives us the ability\n  // to compare pitches precisely, but makes it challenging to place steps on the staff. this little\n  // array maps the steps to an incremental position the steps take on the staff line. This works\n  // so simply because chant only uses do and fa clefs, and only has a flatted ti (te), making\n  // for relatively easy mapping to staff line locations.\n  //                         Do Du Re Me Mi Fa Fu So    La Te Ti\nvar __StepToStaffPosition = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6];\nvar __StaffOffsetToStep = [Step.Do, Step.Re, Step.Mi, Step.Fa, Step.So, Step.La, Step.Ti]; // no accidentals in this one\n\n\nexport class Pitch {\n  constructor(step, octave) {\n    if(typeof octave === 'undefined') {\n      octave = Math.floor(step / 12)\n      step = step % 12;\n    }\n    this.step = step;\n    this.octave = octave;\n  }\n\n  toInt() {\n    return this.octave * 12 + this.step;\n  }\n\n  transpose(step) {\n    return new Pitch(this.toInt() + step);\n  }\n\n  isHigherThan(pitch) {\n    return this.toInt() > pitch.toInt();\n  }\n\n  isLowerThan(pitch) {\n    return this.toInt() < pitch.toInt();\n  }\n\n  equals(pitch) {\n    return this.toInt() === pitch.toInt();\n  }\n\n  static stepToStaffOffset(step) {\n    return __StepToStaffPosition[step];\n  }\n\n  static staffOffsetToStep(offset) {\n    while (offset < 0)\n      offset = __StaffOffsetToStep.length + offset;\n\n    return __StaffOffsetToStep[offset % __StaffOffsetToStep.length];\n  }\n}\n\nexport function generateRandomGuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4();\n}\n\nexport function getCssForProperties(properties) {\n  return Object.entries(properties)\n    .map(([key, val]) =>\n      key && val && key !== \"class\" ? `${key}: ${val};` : \"\"\n    )\n    .join(\"\");\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Core.js","//\n\n/**\n * @class\n */\nexport class Language {\n  constructor(name) {\n    this.name = typeof name !== \"undefined\" ? name : \"<unknown>\";\n    this.centerNeume = false;\n  }\n\n  /**\n   * @param {String} text The string to parsed into words.\n   * @return {Word[]} the resulting parsed words from syllabification\n   */\n  syllabify(text) {\n    var parsedWords = [];\n\n    if (typeof text === \"undefined\" || text === \"\") return parsedWords;\n\n    // Divide the text into words separated by whitespace\n    var words = text.split(/[\\s]+/);\n\n    for (var i = 0, end = words.length; i < end; i++)\n      parsedWords.push(this.syllabifyWord(words[i]));\n\n    return parsedWords;\n  }\n}\n\nexport class English extends Language {\n  constructor() {\n    super(\"English\");\n    this.centerNeume = true;\n    this.regexLetter = /[a-z\\u00c0-\\u02af\\u0300-\\u036f\\u1e00-\\u1eff‿]+/i;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var match = this.regexLetter.exec(s.slice(startIndex));\n    if (match)\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[0].length\n      };\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Latin extends Language {\n  /**\n   * @constructs\n   */\n  constructor() {\n    super(\"Latin\");\n\n    // fixme: ui is only diphthong in the exceptional cases below (according to Wheelock's Latin)\n    this.diphthongs = [\"ae\", \"au\", \"oe\", \"aé\", \"áu\", \"oé\"];\n    // for centering over the vowel, we will need to know any combinations that might be diphthongs:\n    this.possibleDiphthongs = this.diphthongs.concat([\n      \"ei\",\n      \"eu\",\n      \"ui\",\n      \"éi\",\n      \"éu\",\n      \"úi\"\n    ]);\n    this.regexVowel = /(i|(?:[qg]|^)u)?([eé][iu]|[uú]i|[ao][eé]|[aá]u|[aeiouáéíóúäëïöüāēīōūăĕĭŏŭåe̊o̊ůæœǽyýÿ])/gi;\n\n    // some words that are simply exceptions to standard syllabification rules!\n    var wordExceptions = new Object();\n\n    // ui combos pronounced as diphthongs\n    wordExceptions[\"huius\"] = [\"hui\", \"us\"];\n    wordExceptions[\"cuius\"] = [\"cui\", \"us\"];\n    wordExceptions[\"huic\"] = [\"huic\"];\n    wordExceptions[\"cui\"] = [\"cui\"];\n    wordExceptions[\"hui\"] = [\"hui\"];\n\n    // eu combos pronounced as diphthongs\n    wordExceptions[\"euge\"] = [\"eu\", \"ge\"];\n    wordExceptions[\"seu\"] = [\"seu\"];\n\n    this.vowels = [\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"á\",\n      \"é\",\n      \"í\",\n      \"ó\",\n      \"ú\",\n      \"ä\",\n      \"ë\",\n      \"ï\",\n      \"ö\",\n      \"ü\",\n      \"ā\",\n      \"ē\",\n      \"ī\",\n      \"ō\",\n      \"ū\",\n      \"ă\",\n      \"ĕ\",\n      \"ĭ\",\n      \"ŏ\",\n      \"ŭ\",\n      \"å\",\n      \"e̊\",\n      \"o̊\",\n      \"ů\",\n      \"æ\",\n      \"œ\",\n      \"ǽ\", // no accented œ in unicode?\n      \"y\",\n      \"ý\",\n      \"ÿ\"\n    ]; // y is treated as a vowel; not native to Latin but useful for words borrowed from Greek\n\n    this.vowelsThatMightBeConsonants = [\"i\", \"u\"];\n\n    this.muteConsonantsAndF = [\"b\", \"c\", \"d\", \"g\", \"p\", \"t\", \"f\"];\n\n    this.liquidConsonants = [\"l\", \"r\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  isVowelThatMightBeConsonant(c) {\n    for (var i = 0, end = this.vowelsThatMightBeConsonants.length; i < end; i++)\n      if (this.vowelsThatMightBeConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  // substring should be a vowel and the character following\n  isVowelActingAsConsonant(substring) {\n    return (\n      this.isVowelThatMightBeConsonant(substring[0]) &&\n      this.isVowel(substring[1])\n    );\n  }\n\n  /**\n   * f is not a mute consonant, but we lump it together for syllabification\n   * since it is syntactically treated the same way\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isMuteConsonantOrF(c) {\n    for (var i = 0, end = this.muteConsonantsAndF.length; i < end; i++)\n      if (this.muteConsonantsAndF[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is a liquid consonant\n   */\n  isLiquidConsonant(c) {\n    for (var i = 0, end = this.liquidConsonants.length; i < end; i++)\n      if (this.liquidConsonants[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isPossibleDiphthong(s) {\n    for (var i = 0, end = this.possibleDiphthongs.length; i < end; i++)\n      if (this.possibleDiphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  /**\n   * Rules for Latin syllabification (from Collins, \"A Primer on Ecclesiastical Latin\")\n   *\n   * Divisions occur when:\n   *   1. After open vowels (those not followed by a consonant) (e.g., \"pi-us\" and \"De-us\")\n   *   2. After vowels followed by a single consonant (e.g., \"vi-ta\" and \"ho-ra\")\n   *   3. After the first consonant when two or more consonants follow a vowel\n   *      (e.g., \"mis-sa\", \"minis-ter\", and \"san-ctus\").\n   *\n   * Exceptions:\n   *   1. In compound words the consonants stay together (e.g., \"de-scribo\").\n   *   2. A mute consonant (b, c, d, g, p, t) or f followed by a liquid consonant (l, r)\n   *      go with the succeeding vowel: \"la-crima\", \"pa-tris\"\n   *\n   * In addition to these rules, Wheelock's Latin provides this sound exception:\n   *   -  Also counted as single consonants are qu and the aspirates ch, ph,\n   *      th, which should never be separated in syllabification:\n   *      architectus, ar-chi-tec-tus; loquacem, lo-qua-cem.\n   *\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n    var haveCompleteSyllable = false;\n    var previousWasVowel = false;\n    var workingString = word.toLowerCase();\n    var startSyllable = 0;\n\n    var c, lookahead, haveLookahead;\n\n    // a helper function to create syllables\n    var makeSyllable = function(length) {\n      if (haveCompleteSyllable) {\n        syllables.push(word.substr(startSyllable, length));\n        startSyllable += length;\n      }\n\n      haveCompleteSyllable = false;\n    };\n\n    for (var i = 0, wordLength = workingString.length; i < wordLength; i++) {\n      c = workingString[i];\n\n      // get our lookahead in case we need them...\n      lookahead = \"*\";\n      haveLookahead = i + 1 < wordLength;\n\n      if (haveLookahead) lookahead = workingString[i + 1];\n\n      var cIsVowel = this.isVowel(c);\n\n      // i is a special case for a vowel. when i is at the beginning\n      // of the word (Iesu) or i is between vowels (alleluia),\n      // then the i is treated as a consonant (y)\n      if (c === \"i\") {\n        if (i === 0 && haveLookahead && this.isVowel(lookahead))\n          cIsVowel = false;\n        else if (previousWasVowel && haveLookahead && this.isVowel(lookahead)) {\n          cIsVowel = false;\n        }\n      }\n\n      if (c === \"-\") {\n        // a hyphen forces a syllable break, which effectively resets\n        // the logic...\n\n        haveCompleteSyllable = true;\n        previousWasVowel = false;\n        makeSyllable(i - startSyllable);\n        startSyllable++;\n      } else if (cIsVowel) {\n        // once we get a vowel, we have a complete syllable\n        haveCompleteSyllable = true;\n\n        if (\n          previousWasVowel &&\n          !this.isDiphthong(workingString[i - 1] + \"\" + c)\n        ) {\n          makeSyllable(i - startSyllable);\n          haveCompleteSyllable = true;\n        }\n\n        previousWasVowel = true;\n      } else if (haveLookahead) {\n        if (\n          (c === \"q\" && lookahead === \"u\") ||\n          (lookahead === \"h\" && (c === \"c\" || c === \"p\" || c === \"t\"))\n        ) {\n          // handle wheelock's exceptions for qu, ch, ph and th\n          makeSyllable(i - startSyllable);\n          i++; // skip over the 'h' or 'u'\n        } else if (previousWasVowel && this.isVowel(lookahead)) {\n          // handle division rule 2\n          makeSyllable(i - startSyllable);\n        } else if (\n          this.isMuteConsonantOrF(c) &&\n          this.isLiquidConsonant(lookahead)\n        ) {\n          // handle exception 2\n          makeSyllable(i - startSyllable);\n        } else if (haveCompleteSyllable) {\n          // handle division rule 3\n          makeSyllable(i + 1 - startSyllable);\n        }\n\n        previousWasVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex, ignore) {\n    this.regexVowel.lastIndex = 0;\n    let stringSlice = s.slice(startIndex);\n    var match = this.regexVowel.exec(stringSlice);\n    var isIgnoredMatch = ({ index, endIndex }) => (index <= match.index && endIndex > match.index) || (index < this.regexVowel.lastIndex && endIndex >= this.regexVowel.lastIndex);\n    let inIgnore = match && ignore && ignore.length && ignore.find(isIgnoredMatch);\n    while (inIgnore) {\n      match = this.regexVowel.exec(stringSlice);\n      inIgnore = match && ignore.find(isIgnoredMatch);\n    }\n    if (match) {\n      if (match[1]) {\n        // the first group should be ignored, as it is to separate an i or u that is used as a consonant.\n        match.index += match[1].length;\n      }\n      return {\n        found: true,\n        startIndex: startIndex + match.index,\n        length: match[2].length\n      };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\n/**\n * @class\n */\nexport class Spanish extends Language {\n  constructor() {\n    super(\"Spanish\");\n\n    this.vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"á\", \"é\", \"í\", \"ó\", \"ú\", \"ü\"];\n\n    this.weakVowels = [\"i\", \"u\", \"ü\", \"y\"];\n\n    this.strongVowels = [\"a\", \"e\", \"o\", \"á\", \"é\", \"í\", \"ó\", \"ú\"];\n\n    this.diphthongs = [\n      \"ai\",\n      \"ei\",\n      \"oi\",\n      \"ui\",\n      \"ia\",\n      \"ie\",\n      \"io\",\n      \"iu\",\n      \"au\",\n      \"eu\",\n      \"ou\",\n      \"ua\",\n      \"ue\",\n      \"uo\",\n      \"ái\",\n      \"éi\",\n      \"ói\",\n      \"úi\",\n      \"iá\",\n      \"ié\",\n      \"ió\",\n      \"iú\",\n      \"áu\",\n      \"éu\",\n      \"óu\",\n      \"uá\",\n      \"ué\",\n      \"uó\",\n      \"üe\",\n      \"üi\"\n    ];\n\n    this.uDiphthongExceptions = [\"gue\", \"gui\", \"qua\", \"que\", \"qui\", \"quo\"];\n  }\n\n  // c must be lowercase!\n  isVowel(c) {\n    for (var i = 0, end = this.vowels.length; i < end; i++)\n      if (this.vowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isWeakVowel(c) {\n    for (var i = 0, end = this.weakVowels.length; i < end; i++)\n      if (this.weakVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {String} c The character to test; must be lowercase\n   * @return {boolean} true if c is an f or a mute consonant\n   */\n  isStrongVowel(c) {\n    for (var i = 0, end = this.strongVowels.length; i < end; i++)\n      if (this.strongVowels[i] === c) return true;\n\n    return false;\n  }\n\n  /**\n   *\n   * @param {String} s The string to test; must be lowercase\n   * @return {boolean} true if s is a diphthong\n   */\n  isDiphthong(s) {\n    for (var i = 0, end = this.diphthongs.length; i < end; i++)\n      if (this.diphthongs[i] === s) return true;\n\n    return false;\n  }\n\n  createSyllable(text) {\n    /*\n    var accented = false;\n    var ellidesToNext = false;\n\n    if (text.length > 0) {\n\n        if (text[0] == '`') {\n            accented = true;\n            text = text.substr(1);\n        }\n\n        if (text[text.length - 1] == '_') {\n            ellidesToNext = true;\n            text = text.substr(0, text.length - 1);\n        }\n    }\n\n    var s = new Syllable(text);\n\n    s.isMusicalAccent = accented;\n    s.elidesToNext = ellidesToNext;*/\n\n    return text;\n  }\n\n  /**\n   */\n  syllabifyWord(word) {\n    var syllables = [];\n\n    var haveCompleteSyllable = false;\n    var previousIsVowel = false;\n    var previousIsStrongVowel = false; // only valid if previousIsVowel == true\n    var startSyllable = 0;\n\n    // fixme: first check for prefixes\n\n    for (var i = 0; i < word.length; i++) {\n      var c = word[i].toLowerCase();\n\n      if (this.isVowel(c)) {\n        // we have a complete syllable as soon as we have a vowel\n        haveCompleteSyllable = true;\n\n        var cIsStrongVowel = this.isStrongVowel(c);\n\n        if (previousIsVowel) {\n          // if we're at a strong vowel, then we finish out the last syllable\n          if (cIsStrongVowel) {\n            if (previousIsStrongVowel) {\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            }\n          }\n        }\n\n        previousIsVowel = true;\n        previousIsStrongVowel = cIsStrongVowel;\n      } else {\n        if (!haveCompleteSyllable) {\n          // do nothing since we don't have a complete syllable yet...\n        } else {\n          // handle explicit syllable breaks\n          if (word[i] === \"-\") {\n            // start new syllable\n            syllables.push(\n              this.createSyllable(word.substr(startSyllable, i - startSyllable))\n            );\n            startSyllable = ++i;\n          } else {\n            var numberOfConsonants = 1,\n              consonant2;\n\n            // count how many more consonants there are\n            for (var j = i + 1; j < word.length; j++) {\n              if (this.isVowel(word[j])) break;\n              numberOfConsonants++;\n            }\n\n            if (numberOfConsonants === 1) {\n              // start new syllable\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable)\n                )\n              );\n              startSyllable = i;\n            } else if (numberOfConsonants === 2) {\n              consonant2 = word[i + 1].toLowerCase();\n              if (\n                consonant2 === \"l\" ||\n                consonant2 === \"r\" ||\n                (c === \"c\" && consonant2 === \"h\")\n              ) {\n                // split before the consonant pair\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n                startSyllable = i++;\n              } else {\n                //split the consonants\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n                startSyllable = i;\n              }\n            } else if (numberOfConsonants === 3) {\n              consonant2 = word[i + 1].toLowerCase();\n\n              // if second consonant is s, divide cc-c, otherwise divide c-cc\n              if (consonant2 === \"s\") {\n                i += 2;\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, i - startSyllable)\n                  )\n                );\n              } else\n                syllables.push(\n                  this.createSyllable(\n                    word.substr(startSyllable, ++i - startSyllable)\n                  )\n                );\n\n              startSyllable = i;\n            } else if (numberOfConsonants === 4) {\n              // four always get split cc-cc\n              syllables.push(\n                this.createSyllable(\n                  word.substr(startSyllable, i - startSyllable + 2)\n                )\n              );\n              startSyllable = i + 2;\n              i += 3;\n            }\n          }\n\n          haveCompleteSyllable = false;\n        }\n\n        previousIsVowel = false;\n      }\n    }\n\n    // if we have a complete syllable, we can add it as a new one. Otherwise\n    // we tack the remaining characters onto the last syllable.\n    if (haveCompleteSyllable) syllables.push(word.substr(startSyllable));\n    else if (startSyllable > 0)\n      syllables[syllables.length - 1] += word.substr(startSyllable);\n    else if (syllables.length === 0) syllables.push(this.createSyllable(word));\n\n    return syllables;\n  }\n\n  /**\n   * @param {String} s the string to search\n   * @param {Number} startIndex The index at which to start searching for a vowel in the string\n   * @retuns a custom class with three properties: {found: (true/false) startIndex: (start index in s of vowel segment) length ()}\n   */\n  findVowelSegment(s, startIndex) {\n    var i, end, index;\n    var workingString = s.toLowerCase();\n\n    // do we have a diphthongs?\n    for (i = 0, end = this.diphthongs.length; i < end; i++) {\n      var d = this.diphthongs[i];\n      index = workingString.indexOf(d, startIndex);\n\n      if (index >= 0) {\n        // check the exceptions...\n        if (d[0] === \"u\" && index > 0) {\n          var tripthong = s.substr(index - 1, 3).toLowerCase();\n\n          for (\n            let j = 0, endj = this.uDiphthongExceptions.length;\n            i < endj;\n            j++\n          ) {\n            if (tripthong === this.uDiphthongExceptions[j]) {\n              // search from after the u...\n              return this.findVowelSegment(s, index + 1);\n            }\n          }\n        }\n\n        return { found: true, startIndex: index, length: d.length };\n      }\n    }\n\n    // no diphthongs. Let's look for single vowels then...\n    for (i = 0, end = this.vowels.length; i < end; i++) {\n      index = workingString.indexOf(this.vowels[i], startIndex);\n\n      if (index >= 0) return { found: true, startIndex: index, length: 1 };\n    }\n\n    // no vowels sets found after startIndex!\n    return { found: false, startIndex: -1, length: -1 };\n  }\n}\n\nexport const language = {\n  english: new English(),\n  latin: new Latin(),\n  spanish: new Spanish()\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Text.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// generated based on the svg data\nexport let Glyphs = {\n  None: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    origin: {\n      x: 0,\n      y: 0\n    },\n    align: \"left\"\n  },\n  AcuteAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M4 0C-.614.52-.614.52-.803-3.182l60.768-108.422c4.52-7.182 10.543-13.67 18.075-13.67 5.27 0 14.31 1.264 23.346 7.793 7.53 5.223 8.803 11.752 8.803 16.975 0 3.917-.52 11.1-8.05 17.628L4 0z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, // TODO: figure out a better way to align this horizontally.  width should be 110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0.803,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  GraveAccent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M105.386.26C110 .78 110 .78 110.189-2.922l-60.768-108.422c-4.52-7.182-10.543-13.67-18.075-13.67-5.27 0-14.31 1.264-23.346 7.793-7.53 5.223-8.803 11.752-8.803 16.975 0 3.917.52 11.1 8.05 17.628L105.386.26z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 0, //110.992,\n      height: 125.794\n    },\n    origin: {\n      x: 0, // -110.992,\n      y: 125.274\n    },\n    align: \"left\"\n  },\n  Circle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 50 50 0 0 0 0 -50M10 -50A40 40 0 0 1 90 -50 40 40 0 0 1 10 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    },\n    origin: {\n      x: -50,\n      y: 100\n    }\n  },\n  Semicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 -50A50 50 0 0 0 100 -50 5 5 0 0 0 90 -50 40 40 0 0 1 10 -50 5 5 0 0 0 0 -50\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  ReversedSemicircle: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 0A50 50 0 0 1 100 0 5 5 0 0 1 90 0 40 40 0 0 0 10 0 5 5 0 0 1 0 0\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 55\n    },\n    origin: {\n      x: -50,\n      y: 50\n    }\n  },\n  Stropha: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M1.22-73.438c4.165 13.02 12.238 27.084 24.217 42.188L49.657 0 34.812 27.344C18.666 55.47-.084 72.396-21.438 78.124c4.687-3.645 7.03-8.593 7.03-14.843 0-8.853-4.947-20.572-14.843-35.155L-48 0 1.22-73.438z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.657,\n      height: 151.562\n    },\n    origin: {\n      x: 48,\n      y: 73.438\n    },\n    align: \"left\"\n  },\n  BeginningAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  BeginningDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  CustosDescLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063 273.472c5.73.52 7.29-6.25 4.687-20.312V-65.59c-13.542 2.083-24.22 5.468-32.03 10.156C3.905-50.226 0-43.714 0-35.904V71.91c5.73-5.21 10.677-8.594 14.844-10.157 5.73-1.562 12.24-2.343 19.53-2.343v196.875c0 11.458 1.563 17.187 4.688 17.187\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 65.59\n    },\n    align: \"left\"\n  },\n  CustosDescShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375 191.923c0 8.333 1.563 12.24 4.688 11.72 3.125-.522 4.687-7.033 4.687-19.533v-250c-13.542 2.084-24.22 5.47-32.03 10.157C3.905-50.525 0-44.015 0-36.203V71.61c5.73-5.208 10.677-8.593 14.844-10.156 5.73-1.562 12.24-2.344 19.53-2.344v132.813z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.053\n    },\n    origin: {\n      x: 0,\n      y: 65.89\n    },\n    align: \"left\"\n  },\n  CustosLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M39.063-269.562c5.73-.52 7.29 6.25 4.687 20.312V69.5c-13.542-2.083-24.22-5.47-32.03-10.156C3.905 54.134 0 47.624 0 39.812V-68c5.73 5.208 10.677 8.594 14.844 10.156 5.73 1.563 12.24 2.344 19.53 2.344v-196.875c0-11.458 1.563-17.187 4.688-17.187z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 46.353,\n      height: 339.582\n    },\n    origin: {\n      x: 0,\n      y: 270.082\n    },\n    align: \"left\"\n  },\n  CustosShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M34.375-188.125c0-8.333 1.563-12.24 4.688-11.72 3.125.522 4.687 7.033 4.687 19.532v250c-13.542-2.083-24.22-5.468-32.03-10.156C3.905 54.324 0 47.813 0 40V-67.813c5.73 5.21 10.677 8.594 14.844 10.157 5.73 1.562 12.24 2.344 19.53 2.343v-132.812z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 43.75,\n      height: 270.052\n    },\n    origin: {\n      x: 0,\n      y: 200.365\n    },\n    align: \"left\"\n  },\n  DoClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0 98.406V-97.688C0-118 5.99-134.275 17.97-146.516c11.978-12.24 27.603-18.36 46.874-18.36 10.937 0 19.53 3.126 25.78 9.376s9.376 14.583 9.376 25v107.813l-6.25-5.47c-4.167-3.645-10.287-7.42-18.36-11.327-8.072-3.907-16.796-5.86-26.17-5.86-11.46 0-21.486 4.427-30.08 13.282-8.593 8.854-12.89 19.53-12.89 32.03s4.297 23.308 12.89 32.423c8.594 9.115 18.62 13.672 30.08 13.672 9.374 0 18.098-1.822 26.17-5.468 8.073-3.646 14.193-7.292 18.36-10.938l6.25-6.25V132c0 9.896-3.125 18.1-9.375 24.61-6.25 6.51-14.844 9.765-25.78 9.765-19.272 0-34.897-6.25-46.876-18.75C5.99 135.125 0 118.72 0 98.405z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 331.251\n    },\n    origin: {\n      x: 0,\n      y: 164.876\n    },\n    align: \"left\"\n  },\n  FaClef: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M85.156-32v193.75c0 9.375-1.562 14.323-4.687 14.844-1.564 0-2.605-.52-3.126-1.563-.52-1.04-.782-2.603-.78-4.686V56.28c-8.335-8.332-19.793-12.5-34.376-12.5-17.71 0-31.77 3.907-42.188 11.72V-32c0-18.23 14.193-27.344 42.578-27.344 28.385 0 42.578 9.115 42.578 27.344zM98.438 93V-92.156c0-19.27 5.73-34.896 17.187-46.875 11.458-11.98 26.562-17.97 45.313-17.97 10.937 0 19.14 2.865 24.61 8.594 5.467 5.73 8.202 13.542 8.202 23.437v103.126l-5.47-4.687c-3.645-3.647-9.374-7.293-17.186-10.94-7.813-3.645-15.886-5.467-24.22-5.468-11.978 0-22.004 4.167-30.077 12.5-8.073 8.334-12.11 18.36-12.11 30.08 0 11.717 4.037 22.004 12.11 30.858s18.1 13.28 30.078 13.28c8.333 0 16.406-1.822 24.22-5.468 7.81-3.645 13.54-7.03 17.186-10.156l5.47-5.468V125.81c0 9.896-2.865 17.84-8.594 23.83-5.73 5.988-13.802 8.983-24.22 8.983-18.75 0-33.853-6.12-45.31-18.36-11.46-12.24-17.19-27.994-17.19-47.265z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 193.752,\n      height: 333.595\n    },\n    origin: {\n      x: 0.001,\n      y: 157.001\n    },\n    align: \"left\"\n  },\n  Flat: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.813-204.406c4.166 0 6.25 5.208 6.25 15.625L12.5-10.657C33.854 13.302 54.167 25.28 73.438 25.28c9.374 0 14.062-4.686 14.062-14.06 0-6.25-1.042-11.72-3.125-16.407-2.083-4.688-7.03-9.766-14.844-15.235-7.81-5.47-13.02-8.984-15.624-10.547L27.344-45.81V-80.97c17.187 0 33.073 4.82 47.656 14.454C89.583-56.88 96.875-47.376 96.875-38c0 67.708-.26 101.562-.78 101.563-38.543 0-69.532-12.24-92.97-36.72C0-52.322-1.042-123.936 0-188c0-10.937 2.604-16.406 7.813-16.406z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 97.917,\n      height: 267.969\n    },\n    origin: {\n      x: 1.042,\n      y: 204.406\n    },\n    align: \"left\"\n  },\n  Mora: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M47.478-24c6.957 0 12.793 2.288 17.49 6.883C69.662-12.52 72-6.904 72-.267c0 6.64-2.337 12.352-7.033 17.118C60.27 21.618 54.435 24 47.477 24c-6.26 0-11.748-2.383-16.444-7.15C26.337 12.086 24 6.374 24-.265c0-6.638 2.337-12.255 7.033-16.85C35.73-21.713 41.217-24 47.478-24z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 48,\n      height: 48\n    },\n    origin: {\n      x: -24,\n      y: 24\n    },\n    align: \"left\"\n  },\n  Natural: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M7.906-166.563c-2.864 0-5.614.52-8.218 1.563v13.28l.78 56.25.782 78.907v85.157c.52 3.646 2.604 5.73 6.25 6.25l23.438-3.906 23.437-3.907v29.69c0 42.186-.26 63.54-.78 64.06l6.25 2.345c1.04.52 2.082.78 3.124.78 2.603 0 4.947-1.3 7.03-3.905L67.656-71.25c-.52-2.604-2.083-3.906-4.687-3.906-7.814 0-17.19 1.04-28.126 3.125l-19.53 3.124.78-38.28V-165c-2.604-1.042-5.323-1.562-8.188-1.563zM55.938-40v71.875l-41.407 7.03c0-48.436.262-72.655.783-72.655L55.938-40z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 70.311,\n      height: 330.469\n    },\n    origin: {\n      x: 0.312,\n      y: 166.563\n    },\n    align: \"left\"\n  },\n  Sharp: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"m41.725,-73.773c-5.421,-0.241-10.878,5.856-6.549,12.357L67.061,-20.473 61.264,-12.5 13.436,-71.199c-5.634,-5.934-16.988,1.032-11.232,9.783L50.756,0.182 2.203,61.416c-6.745,7.984 3.442,17.859 11.232,9.783L61.264,12.5l5.797,7.973-31.885,40.943c-5.578,6.844 5.588,16.005 11.594,9.783L77.568,33.154 108.367,71.199c4.894,6.717 17.343,-1.575 11.232,-9.783L87.715,20.473 93.873,12.5 141.34,71.199c6.725,7.67 17.509,-2.248 11.596,-9.783L104.02,0.182 152.936,-61.416c5.52,-7.02-5.541,-16.309-11.596,-9.783L93.873,-12.5l-6.158,-7.973 31.884766,-40.943c5.407,-7.045-5.505,-15.924-11.232,-9.783L77.568,-33.154 46.77,-71.199c-1.435,-1.708-3.238,-2.494-5.044922,-2.574zM77.568,-8.516 84.09,0.182 77.568,8.516 70.684,0.182Z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 154.646,\n      height: 147.987\n    },\n    origin: {\n      x: 0,\n      y: 74.098\n    },\n    align: \"left\"\n  },\n  OriscusAsc: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50 30.25c0 12.5-3.125 21.354-9.375 26.562-3.125 2.605-7.813 3.907-14.063 3.907-3.125 0-5.99-.522-8.593-1.564-2.605-1.04-5.6-2.474-8.986-4.297C5.6 53.035 2.734 51.603.39 50.56c-2.343-1.04-5.338-2.474-8.984-4.296-3.646-1.823-6.77-3.256-9.375-4.297-2.603-1.043-5.468-1.564-8.593-1.564-6.25 0-10.937 1.563-14.062 4.688C-46.875 50.824-50 59.677-50 71.656v-106.25c0-13.02 3.125-21.875 9.375-26.562 3.125-2.604 7.813-3.906 14.063-3.907 3.125 0 5.99.52 8.593 1.563 2.605 1.042 5.73 2.474 9.376 4.297 3.646 1.823 6.51 2.995 8.594 3.516l10.938 5.468c6.25 3.126 11.458 4.69 15.624 4.69 6.25 0 10.938-1.564 14.063-4.69C46.875-55.426 50-64.02 50-76V30.25z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 76\n    },\n    align: \"left\"\n  },\n  OriscusDes: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 30.844v-106.25c0 11.458 3.125 20.052 9.375 25.78 3.125 3.126 7.813 4.69 14.063 4.688 4.687 0 13.41-3.255 26.17-9.765 12.762-6.51 21.746-9.766 26.954-9.766 6.25 0 10.938 1.303 14.063 3.907C46.875-55.874 50-47.02 50-34V72.25c0-11.98-3.125-20.833-9.375-26.563C37.5 42.563 32.812 41 26.562 41 21.875 41 13.023 44.385 0 51.156c-4.167 2.604-8.594 4.948-13.28 7.032-4.69 2.083-9.116 3.124-13.283 3.124-6.25 0-10.937-1.302-14.062-3.906C-46.875 52.198-50 43.344-50 30.844z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  OriscusLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M 19.055,78.887 C 20.242,78.487 21.532,77.890 22.925,77.097 24.318,76.304 26.700882,74.417 30.074,71.438 33.447,68.458 36.524,64.985 39.303,61.019 42.083,57.052 44.563,51.396 46.743,44.05 48.923,36.704 50.013,28.671 50.013,19.950525 L 50.013,-34.226 C 50.013,-54.464 42.074,-64.584 26.195,-64.584 20.248,-64.584 11.519,-61.410 0.007,-55.064 -11.506,-48.717 -20.235,-45.544 -26.182,-45.544 -34.515,-45.544 -40.568,-48.520 -44.340791,-54.473 -48.114,-60.426 -50.000,-67.369 -50.000,-75.303 L -50.000,30.07 C -50.000,49.909 -42.060754,59.829 -26.182,59.829 -21.023,59.829 -12.39,56.455 -0.284,49.709 11.822,42.963 20.648,39.59 26.195,39.59 29.369,40.777 30.362,44.25 29.17479,50.009 27.988,55.768 26.001,62.020829 23.216,68.767 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 147.656\n    },\n    origin: {\n      x: 50,\n      y: 75.406\n    },\n    align: \"left\"\n  },\n  PodatusLower: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-4.688-30.28c22.396 0 34.636-.262 36.72-.782 5.728-1.563 8.593-5.21 8.593-10.938H50v97.656c0 2.604-1.302 4.167-3.906 4.688-5.21.52-21.355.78-48.438.78-23.958 0-38.54-.26-43.75-.78-2.604 0-3.906-1.302-3.906-3.906v-82.032c0-3.646 1.302-5.468 3.906-5.468h2.344c2.604.52 15.625.78 39.063.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 103.124\n    },\n    origin: {\n      x: 50,\n      y: 42\n    },\n    align: \"left\"\n  },\n  PodatusUpper: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-46.094-63.78c13.542 0 24.61 2.473 33.203 7.42C-4.298-51.41 0-43.99 0-34.093V62h-9.375c0-10.938-2.604-19.14-7.812-24.61-5.21-5.468-14.844-8.203-28.907-8.202-18.23 0-33.333 4.166-45.312 12.5v-75.782c0-19.79 15.104-29.687 45.312-29.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 91.406,\n      height: 125.781\n    },\n    origin: {\n      x: 91.406,\n      y: 63.781\n    },\n    align: \"right\"\n  },\n  Porrectus1: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M233.594 162.875c-58.855 0-107.032-6.25-144.53-18.75C34.895 125.895-11.46 99.855-50 66V-52.75C-21.354-24.625 26.302 6.885 92.97 41.78 123.697 57.928 163.54 66 212.5 66c21.354 0 34.635-9.896 39.844-29.688V151.94c0 7.29-6.25 10.937-18.75 10.937z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 302.344,\n      height: 215.627\n    },\n    origin: {\n      x: 50,\n      y: 52.75\n    },\n    align: \"left\"\n  },\n  Porrectus2: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 259.375c-50.52 0-110.938-22.396-181.25-67.188C48.437 141.667-10.938 94.272-50 50V-68.75C0-3.125 60.417 52.083 131.25 96.875c58.333 36.98 110.677 58.854 157.03 65.625h7.033c16.145 0 26.822-9.896 32.03-29.688v114.844c0 7.812-5.99 11.72-17.968 11.72z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.343,\n      height: 328.126\n    },\n    origin: {\n      x: 50,\n      y: 68.75\n    },\n    align: \"left\"\n  },\n  Porrectus3: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M309.375 355.78c-48.96-16.666-109.115-55.468-180.47-116.405C79.428 198.23 19.793 134.687-50 48.75V-70C20 40 94.104 103.79 135.25 148.063 190 200 230 230 288.28 258.906c4.168 2.083 8.334 3.125 12.5 3.125 12.5 0 21.355-10.937 26.564-32.81v114.06c0 9.376-3.386 14.063-10.156 14.064-2.084 0-4.688-.522-7.813-1.563z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 377.344,\n      height: 427.345\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  Porrectus4: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M350 453.438c-52.754-22.397-120-77.345-201.74-164.844C90.87 227.656 24.784 147.708-50 48.75V-70C-8.84-1.25 58.406 86.51 151.74 193.28c60.868 69.793 119.13 124.22 174.782 163.282 5.797 3.646 11.014 5.47 15.652 5.47 12.173 0 21.45-11.72 27.826-35.157V441.72c0 9.373-3.19 14.06-9.565 14.06-2.9 0-6.377-.78-10.435-2.342z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 420,\n      height: 525.78\n    },\n    origin: {\n      x: 50,\n      y: 70\n    },\n    align: \"left\"\n  },\n  PunctumCavum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      },\n      {\n        type: \"negative\",\n        data:\n          \"M.08-42.56c9.585.206 20.126.53 27.954 6.822 4.96 3.9 4.71 10.792 4.574 16.482v51.278C22.09 27.066 7.283 26.072.168 26.01c-7.72.23-21.895.935-32.616 4.674.04-19.197-.083-38.395.064-57.59.567-7.5 7.834-12.33 14.62-13.774 5.818-1.498 11.857-1.86 17.844-1.88z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratum: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-60.906c33.333 0 50 9.635 50 28.906v94.53C39.062 51.595 22.396 46.126 0 46.126s-39.063 5.47-50 16.406V-32c0-19.27 16.667-28.906 50-28.906z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M0-36.5436c19.999799999999997 0 30 5.781 30 17.3436v56.717999999999996C23.437199999999997 30.956999999999997 13.4376 27.6756 0 27.6756s-23.4378 3.2819999999999996-30 9.843599999999999V-19.2c0-11.562 10.000200000000001-17.3436 30-17.3436z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 123.438\n    },\n    origin: {\n      x: 50,\n      y: 60.906\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 43.688V-61c4.167 7.292 12.76 10.938 25.78 10.938 9.376 0 20.053-1.563 32.032-4.688C31.773-60.48 45.833-71.677 50-88.344v117.97C43.75 42.645 32.812 51.5 17.187 56.186-.52 61.398-15.886 64-28.906 64-42.97 64-50 57.23-50 43.687z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 152.344\n    },\n    origin: {\n      x: 50,\n      y: 88.344\n    },\n    align: \"left\"\n  },\n  PunctumQuadratumDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50-56.03c0-13.022 7.03-19.532 21.094-19.532 13.02 0 28.385 2.604 46.093 7.812C32.813-63.583 43.75-54.73 50-41.187V76C45.833 59.854 31.77 48.656 7.812 42.406c-11.98-3.125-22.656-4.687-32.03-4.687-13.022 0-21.615 3.905-25.782 11.718v-105.47z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 151.562\n    },\n    origin: {\n      x: 50,\n      y: 75.562\n    },\n    align: \"left\"\n  },\n  PunctumInclinatum: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M0-75.78L50 0 0 75-50 0 0-75.78z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150.78\n    },\n    origin: {\n      x: 50,\n      y: 75.78\n    },\n    align: \"left\"\n  },\n  PunctumInclinatumLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M 0,-53.164 35,-0.117 0,52.383 -35,-0.117 0,-53.164 z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 105.546\n    },\n    origin: {\n      x: 50,\n      y: 53.164\n    },\n    align: \"left\"\n  },\n  Quilisma: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-50 34.938V-51c5.73 20.833 13.02 31.25 21.875 31.25 7.813 0 12.5-15.625 14.063-46.875 3.645 12.5 6.9 21.224 9.765 26.172s6.9 7.422 12.11 7.422c5.208 0 9.374-14.324 12.5-42.97 5.73 22.917 10.677 34.375 14.843 34.375 5.73 0 10.677-15.885 14.844-47.656v100c0 17.707-3.125 26.56-9.375 26.56-4.688 0-9.115-5.988-13.28-17.968-2.085 21.875-8.074 32.813-17.97 32.813-7.813 0-16.146-7.292-25-21.875-4.688 20.312-10.677 30.47-17.97 30.47-5.207 0-9.244-2.605-12.108-7.814C-48.568 47.698-50 41.708-50 34.938z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 150\n    },\n    origin: {\n      x: 50,\n      y: 89.282\n    },\n    align: \"left\"\n  },\n  TerminatingAscLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375 40.22c0-11.98-4.948-17.97-14.844-17.97-10.936 0-19.53 3.646-25.78 10.938v-53.126c0-6.77 2.604-12.76 7.813-17.968 5.208-5.21 10.677-8.594 16.406-10.157 2.603-.52 5.207-.78 7.81-.78 3.647 0 7.032.78 10.157 2.343C-2.603-43.896 0-39.73 0-34V73.03h-9.375V40.22z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 49.999,\n      height: 121.873\n    },\n    origin: {\n      x: 49.999,\n      y: 48.843\n    },\n    align: \"right\"\n  },\n  TerminatingDesLiquescent: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M-9.375-48.156V-80.97H0V26.845c0 5.73-2.604 9.896-7.813 12.5-3.125 1.562-6.51 2.343-10.156 2.343-2.603 0-5.207-.26-7.81-.78-5.73-1.563-11.2-4.95-16.407-10.157C-47.398 25.542-50 19.292-50 12v-52.344c6.25 7.292 14.844 10.938 25.78 10.938 9.897 0 14.845-6.25 14.845-18.75z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 50,\n      height: 122.658\n    },\n    origin: {\n      x: 50,\n      y: 80.97\n    },\n    align: \"right\"\n  },\n  VerticalEpisemaAbove: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8-4c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 60\n    },\n    align: \"left\"\n  },\n  VerticalEpisemaBelow: {\n    paths: [\n      {\n        type: \"positive\",\n        data: \"M-8 56c2 3 6 4 8 4s6-1 8-4v-52c-2-3-6-4-8-4s-6 1-8 4z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 16,\n      height: 60\n    },\n    origin: {\n      x: 8,\n      y: 0\n    },\n    align: \"left\"\n  },\n  VirgaLong: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v285.156c0 6.77-2.344 10.937-7.03 12.5-1.564 0-2.605-.78-3.126-2.344-.52-1.562-.782-10.156-.782-25.78V54.186C29.168 45.334 16.146 40.907 0 40.907c-22.917 0-39.583 5.208-50 15.624V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 326.562\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  VirgaShort: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M50-38v211.72c0 7.29-2.344 11.457-7.03 12.5-1.564 0-2.606-.783-3.126-2.345-.52-1.563-.782-10.156-.782-25.78V54.187C29.167 45.332 16.146 40.906 0 40.906c-22.917 0-39.583 5.21-50 15.625V-38c0-19.27 16.667-28.906 50-28.906S50-57.27 50-38z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 253.126\n    },\n    origin: {\n      x: 50,\n      y: 66.906\n    },\n    align: \"left\"\n  },\n  Virgula: {\n    paths: [\n      {\n        type: \"positive\",\n        data:\n          \"M8.178-55.66c0-22.137 12.092-33.2 36.287-33.2 11.835 0 23.53 5.66 35.108 16.98C91.15-60.547 96.94-41.766 96.94-15.534c0 53.515-31.646 87.487-94.937 101.895-2.048-2.06-3.077-5.146-3.077-9.273 0-1.03.247-1.8.76-2.316 42.71-19.027 64.075-41.678 64.075-67.92 0-11.322-2.325-20.326-6.945-27.016-4.62-6.69-9.52-11.052-14.676-13.11-5.147-2.048-11.836-3.85-20.07-5.403C12.81-39.707 8.18-45.37 8.18-55.66z\"\n      }\n    ],\n    bounds: {\n      x: 0,\n      y: 0,\n      width: 98.014,\n      height: 175.221\n    },\n    origin: {\n      x: 1.074,\n      y: 88.86\n    },\n    align: \"left\"\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Glyphs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  getCssForProperties, Point,\n  Rect\n} from \"./Exsurge.Core.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\nimport { language } from \"./Exsurge.Text.js\";\nimport { addAccent } from \"./addAccent.js\";\nimport { makeLigature } from \"./makeLigature.js\";\nimport { greextraGlyphs } from \"./greextraGlyphs.js\";\n\nfunction getFontFilenameForProperties(properties = {}, url = \"{}\") {\n  var italic = properties[\"font-style\"] === \"italic\" ? \"Italic\" : \"\",\n    bold = properties[\"font-weight\"] === \"bold\" ? \"Bold\" : \"\";\n  return url.replace(\n    \"{}\",\n    `${italic || bold ? `${bold}${italic}` : `Regular`}`\n  );\n}\n\n// load in the web font for special chant characters here:\n// var __exsurgeCharactersFont = require(\"url?limit=30000!../assets/fonts/ExsurgeChar.otf\")\n\nconst canAccessDOM = typeof document !== \"undefined\";\n\nconst __getNeumeFromSvgElem = (score, elem) => {\n  let note =\n    score.notes[\n      elem.parentElement\n        .querySelector(\"[element-index]\")\n        .getAttribute(\"element-index\")\n    ];\n  return note.neume || note;\n};\n\n// for positioning markings on notes\nexport var MarkingPositionHint = {\n  Default: 0,\n  Above: 1,\n  Below: 2\n};\n\n/**\n * List of types of text and their defaults relative to lyrics\n * @type Array\n */\nexport const TextTypes = {\n  supertitle: {\n    display: \"Supertitle\",\n    defaultSize: (size) => (size * 7) / 6, // 14pt\n    containedInScore: (score) => score.titles.hasSupertitle(),\n    getFromScore: (score) => score.titles.supertitle\n  },\n  title: {\n    display: \"Title\",\n    defaultSize: (size) => (size * 3) / 2, // 18pt\n    containedInScore: (score) => score.titles.hasTitle(),\n    getFromScore: (score) => score.titles.title\n  },\n  subtitle: {\n    display: \"Subtitle\",\n    defaultSize: (size) => size, // 12pt\n    containedInScore: (score) => score.titles.hasSubtitle(),\n    getFromScore: (score) => score.titles.subtitle\n  },\n  leftRight: {\n    display: \"Left / Right Text\",\n    cssClass: \"textLeftRight\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) =>\n      score.titles.hasTextLeft() || score.titles.hasTextRight(),\n    getFromScore: (score, elem) => score.titles[elem.extraClass],\n    getFromSvgElem: (score, elem) =>\n      score.titles[\n        elem.classList.contains(\"textRight\") ? \"textRight\" : \"textLeft\"\n      ]\n  },\n  annotation: {\n    display: \"Annotation\",\n    defaultSize: (size) => (size * 2) / 3,\n    containedInScore: (score) =>\n      !!score.annotation,\n    getFromScore: (score, { elementIndex = 0 }) =>\n      score.annotation &&\n      (score.annotation.annotations\n        ? score.annotation.annotations[elementIndex]\n        : score.annotation),\n    getFromSvgElem: (score, elem) =>\n      score.annotation &&\n      (score.annotation.annotations\n        ? score.annotation.annotations[Array.from(elem.parentElement.querySelectorAll(\"text.annotation\")).indexOf(elem)]\n        : score.annotation)\n  },\n  dropCap: {\n    display: \"Drop Cap\",\n    defaultSize: (size) => size * 4,\n    containedInScore: (score) => !!score.dropCap,\n    getFromScore: (score) => score.dropCap\n  },\n  al: {\n    display: \"Above Staff\",\n    cssClass: \"aboveLinesText\",\n    defaultSize: (size) => size,\n    containedInScore: (score) => score.hasAboveLinesText,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].alText[elem.alIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).alText[\n        elem.getAttribute(\"al-index\") || 0\n      ]\n  },\n  choralSign: {\n    display: \"Choral Sign\",\n    size: (ctxt) => ctxt.staffInterval * 1.5,\n    containedInScore: (score) => false,\n    getFromScore: (score, elem) =>\n      score.notes[elem.note.elementIndex].choralSign\n  },\n  lyric: {\n    display: \"Lyric\",\n    defaultSize: (size) => size * 0.9,\n    containedInScore: (score) => score.hasLyrics,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].lyrics[elem.lyricIndex],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).lyrics[\n        elem.getAttribute(\"lyric-index\") || 0\n      ]\n  },\n  translation: {\n    display: \"Translation\",\n    defaultSize: (size) => size * 0.75,\n    containedInScore: (score) => score.hasTranslations,\n    getFromScore: (score, elem) =>\n      score.notations[elem.notation.notationIndex].translationText[\n        elem.translationIndex\n      ],\n    getFromSvgElem: (score, elem) =>\n      __getNeumeFromSvgElem(score, elem).translationText[\n        elem.getAttribute(\"translation-index\") || 0\n      ]\n  }\n};\nexport const TextTypesByClass = {};\nObject.entries(TextTypes).forEach(([key, entry]) => {\n  let cssClass = (entry.cssClass = entry.cssClass || key);\n  entry.key = key;\n  TextTypesByClass[cssClass] = entry;\n});\n\nexport const DefaultTrailingSpace = (ctxt) =>\n  ctxt.intraNeumeSpacing * ctxt.interSyllabicMultiplier;\nDefaultTrailingSpace.isDefault = true;\n\nexport let GlyphCode = {\n  None: \"None\",\n\n  AcuteAccent: \"AcuteAccent\",\n  GraveAccent: \"GraveAccent\",\n  Circle: \"Circle\",\n  Semicircle: \"Semicircle\",\n  ReversedSemicircle: \"ReversedSemicircle\",\n  Stropha: \"Stropha\",\n  StrophaLiquescent: \"StrophaLiquescent\",\n\n  BeginningAscLiquescent: \"BeginningAscLiquescent\",\n  BeginningDesLiquescent: \"BeginningDesLiquescent\",\n\n  CustosDescLong: \"CustosDescLong\",\n  CustosDescShort: \"CustosDescShort\",\n  CustosLong: \"CustosLong\",\n  CustosShort: \"CustosShort\",\n\n  // clefs and other markings\n  DoClef: \"DoClef\",\n  FaClef: \"FaClef\",\n  Flat: \"Flat\",\n  Mora: \"Mora\",\n  Natural: \"Natural\",\n  OriscusAsc: \"OriscusAsc\",\n  OriscusDes: \"OriscusDes\",\n  OriscusLiquescent: \"OriscusLiquescent\",\n\n  PodatusLower: \"PodatusLower\",\n  PodatusUpper: \"PodatusUpper\",\n\n  Porrectus1: \"Porrectus1\", // 1 staff line difference,\n  Porrectus2: \"Porrectus2\", // 2 lines difference, etc...\n  Porrectus3: \"Porrectus3\",\n  Porrectus4: \"Porrectus4\",\n\n  PunctumCavum: \"PunctumCavum\",\n  PunctumQuadratum: \"PunctumQuadratum\",\n  PunctumQuadratumLiquescent: \"PunctumQuadratumLiquescent\",\n  PunctumQuadratumAscLiquescent: \"PunctumQuadratumAscLiquescent\",\n  PunctumQuadratumDesLiquescent: \"PunctumQuadratumDesLiquescent\",\n  PunctumInclinatum: \"PunctumInclinatum\",\n  PunctumInclinatumLiquescent: \"PunctumInclinatumLiquescent\",\n  Quilisma: \"Quilisma\",\n\n  Sharp: \"Sharp\",\n  TerminatingAscLiquescent: \"TerminatingAscLiquescent\",\n  TerminatingDesLiquescent: \"TerminatingDesLiquescent\",\n  VerticalEpisemaAbove: \"VerticalEpisemaAbove\",\n  VerticalEpisemaBelow: \"VerticalEpisemaBelow\",\n  VirgaLong: \"VirgaLong\",\n  VirgaShort: \"VirgaShort\",\n  Virgula: \"Virgula\",\n\n  UpperBrace: \"UpperBrace\"\n}; // GlyphCode\n\nexport var QuickSvg = {\n  // namespaces\n  ns: \"http://www.w3.org/2000/svg\",\n  xmlns: \"https://www.w3.org/2000/xmlns/\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n\n  hasDOMAccess: function () {\n    return canAccessDOM;\n  },\n\n  // create the root level svg object\n  svg: function (width, height) {\n    var node = document.createElementNS(this.ns, \"svg\");\n\n    node.setAttribute(\"xmlns\", this.ns);\n    node.setAttribute(\"version\", \"1.1\");\n    node.setAttributeNS(this.xmlns, \"xmlns:xlink\", this.xlink);\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    // create the defs element\n    var defs = document.createElementNS(this.ns, \"defs\");\n    node.appendChild(defs);\n\n    node.defs = defs;\n\n    node.clearNotations = function () {\n      // clear out all children except defs\n      node.removeChild(defs);\n\n      while (node.hasChildNodes()) node.removeChild(node.lastChild);\n\n      node.appendChild(defs);\n    };\n\n    return node;\n  },\n\n  rect: function (width, height) {\n    var node = document.createElementNS(this.ns, \"rect\");\n\n    node.setAttribute(\"width\", width);\n    node.setAttribute(\"height\", height);\n\n    return node;\n  },\n\n  line: function (x1, y1, x2, y2) {\n    var node = document.createElementNS(this.ns, \"line\");\n\n    node.setAttribute(\"x1\", x1);\n    node.setAttribute(\"y1\", y1);\n    node.setAttribute(\"x2\", x2);\n    node.setAttribute(\"y2\", y2);\n\n    return node;\n  },\n\n  g: function () {\n    var node = document.createElementNS(this.ns, \"g\");\n\n    return node;\n  },\n\n  text: function () {\n    var node = document.createElementNS(this.ns, \"text\");\n\n    return node;\n  },\n\n  tspan: function (str) {\n    var node = document.createElementNS(this.ns, \"tspan\");\n    node.textContent = str;\n\n    return node;\n  },\n\n  // nodeRef should be the id of the object in defs (without the #)\n  use: function (nodeRef) {\n    var node = document.createElementNS(this.ns, \"use\");\n    node.setAttributeNS(this.xlink, \"xlink:href\", \"#\" + nodeRef);\n\n    return node;\n  },\n\n  svgFragmentForGlyph: function (glyph) {\n    var svgSrc = \"\";\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      svgSrc += QuickSvg.createFragment(path.data ? \"path\" : \"g\", {\n        d: path.data || undefined,\n        fill: path.type === \"negative\" ? \"#fff\" : undefined\n      });\n    }\n    return svgSrc;\n  },\n\n  nodesForGlyph: function (glyph, functionName = \"createNode\") {\n    var nodes = [];\n    for (var i = 0; i < glyph.paths.length; ++i) {\n      var path = glyph.paths[i];\n      let props = {};\n      if (path.data) props.d = path.data;\n      if (path.type === \"negative\") props.fill = \"#fff\";\n      nodes.push(QuickSvg[functionName](path.data ? \"path\" : \"g\", props));\n    }\n    return nodes;\n  },\n\n  createNode: function (name, attributes, children) {\n    var node = document.createElementNS(this.ns, name);\n    if (attributes && attributes.source) {\n      node.source = attributes.source;\n      delete attributes.source;\n    }\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      ) {\n        var val = attributes[attr];\n        var match = attr.match(/^([^:]+):([^:]+)$/);\n        if (match) {\n          node.setAttributeNS(this[match[1]], match[2], val);\n        } else {\n          node.setAttribute(attr, val);\n        }\n      }\n    }\n    if (children) {\n      if (typeof children === \"string\") {\n        node.textContent = children;\n      } else if (children.constructor === [].constructor) {\n        for (var i = 0; i < children.length; ++i) {\n          node.appendChild(children[i]);\n        }\n      } else {\n        node.appendChild(children);\n      }\n    }\n    return node;\n  },\n\n  createSvgTree(name, props, ...children) {\n    if (\"class\" in props) {\n      props.className = props.class;\n      delete props.class;\n    }\n    if (children.length === 1 && children[0] instanceof Array) {\n      children = children[0];\n    }\n    const convertKeysToCamelCase = (obj) => {\n      for (let key of Object.keys(obj)) {\n        if (/[-:][a-z]/.test(key)) {\n          if (/^\\w+-index$/.test(key)) continue;\n          let camelCase = key.replace(/[-:]([a-z])/g, (whole, letter) =>\n            letter.toUpperCase()\n          );\n          obj[camelCase] = obj[key];\n          delete obj[key];\n        }\n      }\n    };\n    convertKeysToCamelCase(props);\n    if (props.style) convertKeysToCamelCase(props.style);\n    let source = props.source;\n    if (source && source.sourceGabc) {\n      props[\"source-gabc\"] = source.sourceGabc;\n    }\n    return { name, props, children };\n  },\n\n  createFragment: function (name, attributes, child) {\n    if (child === undefined || child === null) child = \"\";\n\n    var fragment = \"<\" + name + \" \";\n\n    for (var attr in attributes) {\n      if (\n        attributes.hasOwnProperty(attr) &&\n        typeof attributes[attr] !== \"undefined\"\n      )\n        fragment += attr + '=\"' + attributes[attr] + '\" ';\n    }\n\n    fragment += \">\" + child + \"</\" + name + \">\";\n\n    return fragment;\n  },\n\n  parseFragment: function (fragment) {\n    // create temporary holder\n    var well = document.createElement(\"svg\");\n\n    // act as a setter if svg is given\n    if (fragment) {\n      var container = this.g();\n\n      // dump raw svg\n      // do this to allow the browser to automatically create svg nodes?\n      well.innerHTML =\n        \"<svg>\" +\n        fragment\n          .replace(/\\n/, \"\")\n          .replace(/<(\\w+)([^<]+?)\\/>/g, \"<$1$2></$1>\") +\n        \"</svg>\";\n\n      // transplant nodes\n      for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\n        container.appendChild(well.firstChild.firstChild);\n\n      return container;\n    }\n  },\n\n  translate: function (node, x, y) {\n    node.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n    return node;\n  },\n\n  scale: function (node, sx, sy) {\n    node.setAttribute(\"transform\", \"scale(\" + sx + \",\" + sy + \")\");\n    return node;\n  }\n};\n\nexport var TextMeasuringStrategy = {\n  // shapes\n  Svg: 0,\n  Canvas: 1,\n  OpenTypeJS: 2\n};\n\n/*\n * ChantContext\n */\nexport class ChantContext {\n  constructor(\n    textMeasuringStrategy = QuickSvg.hasDOMAccess()\n      ? TextMeasuringStrategy.Canvas\n      : TextMeasuringStrategy.OpenTypeJS\n  ) {\n    /**\n     * font dictionary\n     * @type {{ [key: string]: import('opentype.js').Font }}\n     */\n    this.fontDictionary = undefined;\n    this.staffLineCount = 4;\n    this.textMeasuringStrategy = textMeasuringStrategy;\n    this.getFontFilenameForProperties = getFontFilenameForProperties;\n    this.defs = {};\n    this.makeDefs = [];\n    if (QuickSvg.hasDOMAccess()) {\n      this.defsNode = QuickSvg.createNode(\"defs\");\n    }\n\n    // font styles\n    this.textStyles = {};\n    this.textColor = \"#000\";\n    this.setFont(\"'Palatino Linotype', 'Book Antiqua', Palatino, serif\", 16);\n\n    this.rubricColor = \"#d00\";\n    this.specialCharProperties = {\n      \"font-family\": \"'Exsurge Characters'\",\n      fill: this.rubricColor,\n      class: 'rubric'\n    };\n    this.textBeforeSpecialChar = \"\";\n    this.textAfterSpecialChar = \".\";\n    this.specialCharMap = {\n      \"℣\": 'v',\n      \"℟\": 'r',\n      \"+\": \"+\",\n      \"*\": \"*\"\n    };\n    this.plusProperties = {};\n    this.asteriskProperties = {};\n    this.specialCharText = (char) => this.specialCharMap[char] || char;\n\n    this.fontStyleDictionary = {\n      b: { \"font-weight\": \"bold\" },\n      i: { \"font-style\": \"italic\" },\n      u: { \"text-decoration\": \"underline\" },\n      ul: { \"text-decoration\": \"underline\" },\n      c: { fill: this.rubricColor, class: 'rubric' },\n      sc: { \"font-variant\": \"small-caps\" },\n      v: {},\n      e: { \"font-style\": \"italic\", \"font-size\": \"90%\" }\n    };\n\n    this.markupSymbolDictionary = {\n      \"*\": \"b\",\n      \"_\": \"i\",\n      \"^\": \"c\",\n      \"%\": \"sc\"\n    };\n\n    this.textStyles.al.prefix = \"<i>\";\n\n    this.textStyles.translation.prefix = \"<i>\";\n\n    this.textStyles.dropCap.padding = 1; // minimum padding on either side of drop cap in staffIntervals\n\n    this.textStyles.annotation.padding = 1; // minimum padding on either side of annotation in staffIntervals\n\n    this.minLedgerSeparation = 2; // multiple of staffInterval\n    this.minSpaceAboveStaff = 2; // multiple of staffInterval\n    this.minSpaceBelowStaff = 1; // multiple of staffInterval\n    this.spaceBetweenSystems = 1.5; // multiple of staffInterval\n\n    // everything depends on the scale of the punctum\n    this.glyphPunctumWidth = Glyphs.PunctumQuadratum.bounds.width;\n    this.glyphPunctumHeight = Glyphs.PunctumQuadratum.bounds.height;\n\n    // max space to add between notations when justifying, in multiples of this.staffInterval\n    this.maxExtraSpaceInStaffIntervals = 0.5;\n\n    // for keeping track of the clef\n    this.activeClef = null;\n\n    this.neumeLineColor = \"#000\";\n    this.staffLineColor = \"#000\";\n    this.dividerLineColor = \"#000\";\n\n    this.defaultLanguage = language.latin;\n\n    // calculate the pixel ratio for drawing to a canvas\n    this.pixelRatio =\n      typeof window === 'undefined'\n        ? 1.0\n        : (window.devicePixelRatio || 1.0);\n\n    //this.canvasCtxt.scale(this.pixelRatio, this.pixelRatio);\n\n    if (textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      this.svgTextMeasurer = QuickSvg.svg(0, 0);\n      this.svgTextMeasurer.setAttribute(\"id\", \"TextMeasurer\");\n      this.svgTextMeasurer.setAttribute(\"style\", \"position:absolute\");\n      document.body.insertBefore(\n        this.svgTextMeasurer,\n        document.body.firstChild\n      );\n    } else if (textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n      this.makeCanvasIfNeeded();\n    }\n\n    // for connecting neume syllables...\n    this.syllableConnector = \"-\";\n\n    // set whether to scale the def tags (scaleDefs = true) or the use tags.\n    this.scaleDefs = true;\n\n    // fixme: for now, we just set these using the glyph scales as noted above, presuming a\n    // staff line size of 0.5 in. Really what we should do is scale the punctum size based\n    // on the text metrics, right? 1 punctum ~ x height size?\n    this.setGlyphScaling(1.0 / 16.0);\n\n    // minimum space between puncta of different syllables, in multiples of this.intraNeumeSpacing\n    this.interSyllabicMultiplier = 2.5;\n\n    // space between an accidental and the following note, in multiples of this.intraNeumeSpacing\n    this.accidentalSpaceMultiplier = 2;\n\n    // space added between puncta of different words, in multiples of this.intraNeumeSpacing\n    this.interVerbalMultiplier = 1;\n\n    this.drawGuides = false;\n    this.drawDebuggingBounds = true;\n\n    // we keep track of where we are in processing notations, so that\n    // we can maintain the context for notations to know about.\n    //\n    // these are only gauranteed to be valid during the performLayout phase!\n    this.activeNotations = null;\n    this.currNotationIndex = -1;\n\n    this.minSyllablesLastLine = 0;\n    this.minNotesLastLine = 0;\n\n    // chant notation elements are normally separated by a minimum fixed amount of space\n    // on the staff line. It can happen, however, that two text elements are almost close\n    // enough to merge, only to be separated much more by the required hyphen (or other\n    // connecting string).\n    //\n    // This tolerance value allows a little bit of flexibility to merge two close lyrical\n    // elements, thus bringing the chant notation elements a bit closer than otherwise\n    // would be normally allowed.\n    //\n    // condensing tolerance is a percentage value (0.0-1.0, inclusive) that indicates\n    // how much the default spacing can shrink. E.g., a value of 0.20 allows the layout\n    // engine to separate two glyphs by only 80% of the normal inter-neume spacing value.\n    this.condensingTolerance = 0.3;\n\n    // if auto color is true, then exsurge tries to automatically colorize\n    // some elements of the chant (directives become rubric color, etc.)\n    this.autoColor = true;\n\n    this.useExtraTextOnly = true;\n\n    this.noteIdPrefix = 'note-';\n\n    this.insertFontsInDoc();\n    this.setMergeAnnotationWithTextLeft(true);\n  }\n\n  /**\n   * convert a staff position counting from the first space below the staff (gabc notation \"c\")\n   * into a position counting from the middle space (variable based on how many staff lines there are)\n   * @param {number} staffPosition \n   * @returns {number}\n   */\n  convertStaffPositionToSymmetric(staffPosition) {\n    return staffPosition - this.staffLineCount;\n  }\n\n  convertSymmetricStaffPosition(staffPositionSymmetric) {\n    return staffPositionSymmetric + this.staffLineCount;\n  }\n\n  /**\n   * \n   * @param {*} properties \n   * @param {string} fontFamily \n   * @returns {import('opentype.js').Font | undefined}\n   */\n  getFontForProperties(properties = {}, fontFamily) {\n    let key = this.getFontFilenameForProperties(properties),\n      keyWithFontFamily = this.getFontFilenameForProperties(properties, fontFamily);\n    return (\n      this.fontDictionary &&\n      (this.fontDictionary[keyWithFontFamily] ||\n        this.fontDictionary[fontFamily] ||\n        this.fontDictionary.Regular)\n    );\n  }\n\n  /**\n   * \n   * @param {string} font : ;\n   * @param {number} size \n   * @param {any} baseStyle \n   * @param {{ [key: string]: import('opentype.js').Font }} fontDictionary \n   */\n  setFont(font, size = 16, baseStyle = {}, fontDictionary) {\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      let textStyle = (this.textStyles[key] = this.textStyles[key] || {});\n      textStyle.size = textType.defaultSize\n        ? textType.defaultSize(size, this)\n        : textType.size(this);\n      textStyle.font = font;\n      textStyle.color = this.textColor || \"#000\";\n    }\n\n    this.baseTextStyle = baseStyle;\n\n    if (fontDictionary) {\n      this.textMeasuringStrategy = TextMeasuringStrategy.OpenTypeJS;\n      this.fontDictionary = fontDictionary;\n    }\n  }\n\n  setRubricColor(color) {\n    this.rubricColor = color;\n    this.specialCharProperties.fill = color;\n    this.fontStyleDictionary.c.fill = color;\n  }\n\n  setMergeAnnotationWithTextLeft(merge) {\n    this.mergeAnnotationWithTextLeft = merge ? __mergeAnnotationWithTextLeft : undefined;\n  }\n\n  setScaleDefs(scaleDefs) {\n    scaleDefs = !!scaleDefs;\n    if (this.scaleDefs !== scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.setGlyphScaling(this.glyphScaling);\n    }\n  }\n\n  createStyleCss() {\n    var style = \"\";\n    for (let [key, textType] of Object.entries(TextTypes)) {\n      var cssClass = textType.cssClass,\n        { color, font, size } = this.textStyles[key];\n      style += `svg.Exsurge .${cssClass}{fill:${color};font-family:${font};font-size:${size}px;font-kerning:normal}`;\n    }\n    return style;\n  }\n\n  createStyleNode() {\n    var node = QuickSvg.createNode(\"style\", {});\n    node.textContent = this.createStyleCss();\n    return node;\n  }\n\n  createStyleTree() {\n    return { name: \"style\", props: {}, children: [this.createStyleCss()] };\n  }\n\n  createStyle() {\n    return \"<style>\" + this.createStyleCss() + \"</style>\";\n  }\n\n  updateHyphenWidth() {\n    // measure the size of a hyphen for the lyrics\n    var hyphen = new Lyric(\n      this,\n      this.syllableConnector,\n      LyricType.SingleSyllable\n    );\n    var multiplier =\n      this.minLyricWordSpacing /\n        (this.hyphenWidth || this.minLyricWordSpacing) || 1;\n    this.hyphenWidth = hyphen.bounds.width;\n\n    this.minLyricWordSpacing = multiplier * this.hyphenWidth;\n  }\n\n  setStaffHeight(staffHeight) {\n    this.setGlyphScaling(staffHeight / 600);\n  }\n\n  setGlyphScaling(glyphScaling) {\n    this.glyphScaling = glyphScaling;\n\n    this.staffInterval = this.glyphPunctumWidth * this.glyphScaling;\n\n    // setup the line weights for the various elements.\n    this.staffLineWeight = Math.ceil((5 * this.staffInterval) / 8) / 5;\n    this.neumeLineWeight = this.staffLineWeight; // the weight of connecting lines in the glyphs.\n    this.dividerLineWeight = this.neumeLineWeight; // of quarter bar, half bar, etc.\n    this.episemaLineWeight = this.neumeLineWeight * 1.25; // of horizontal episemata\n\n    this.intraNeumeSpacing = this.staffInterval / 2.0;\n\n    while (this.defsNode && this.defsNode.firstChild)\n      this.defsNode.removeChild(this.defsNode.firstChild);\n    for (var i = 0; i < this.makeDefs.length; ++i) {\n      this.makeDefs[i]();\n    }\n\n    this.updateHyphenWidth();\n  }\n\n  calculateHeightFromStaffPosition(staffPosition) {\n    return -staffPosition * this.staffInterval;\n  }\n\n  insertFontsInDoc() {\n    if (!canAccessDOM) return;\n\n    var styleElement = document.getElementById(\"exsurge-fonts\");\n\n    if (styleElement === null) {\n      // create it since it doesn't exist yet.\n      styleElement = document.createElement(\"style\");\n      styleElement.id = \"exsurge-fonts\";\n\n      // styleElement.appendChild(document.createTextNode(\"@font-face{font-family: 'Exsurge Characters';font-weight: normal;font-style: normal;src: url(\" + __exsurgeCharactersFont + \") format('opentype');}\"));\n\n      document.head.appendChild(styleElement);\n    }\n  }\n\n  // returns the next neume starting at this.currNotationIndex, or null\n  // if there isn't a neume after this one...\n  findNextNeume() {\n    if (typeof this.currNotationIndex === \"undefined\")\n      throw \"findNextNeume() called without a valid currNotationIndex set\";\n\n    for (var i = this.currNotationIndex + 1; i < this.notations.length; i++) {\n      var notation = this.notations[i];\n\n      if (notation.isNeume && !notation.hasNoWidth) return notation;\n    }\n\n    return null;\n  }\n\n  makeCanvasIfNeeded() {\n    if (!this.canvas) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvasCtxt = this.canvas.getContext(\"2d\");\n    }\n  }\n\n  setCanvasSize(width, height, scale = 1) {\n    this.makeCanvasIfNeeded();\n\n    this.canvas.style.width = width * scale + \"px\";\n    this.canvas.style.height = height * scale + \"px\";\n    scale *= this.pixelRatio;\n    this.canvas.width = width * scale;\n    this.canvas.height = height * scale;\n\n    this.canvasCtxt.setTransform(scale, 0, 0, scale, 0, 0);\n  }\n}\n\n/*\n * ChantLayoutElement\n */\nexport class ChantLayoutElement {\n  constructor() {\n    this.bounds = new Rect();\n    this.origin = new Point(0, 0);\n\n    this.selected = false;\n    this.highlighted = false;\n  }\n\n  // draws the element on an html5 canvas\n  draw(ctxt) {\n    throw \"ChantLayout Elements must implement draw(ctxt)\";\n  }\n\n  // returns svg element\n  createSvgNode(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgNode(ctxt)\";\n  }\n\n  // returns svg code for the element, used for printing support\n  createSvgFragment(ctxt) {\n    throw \"ChantLayout Elements must implement createSvgFragment(ctxt)\";\n  }\n}\n\nexport class DividerLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, staffPosition0, staffPosition1, divider) {\n    super();\n\n    this.divider = divider;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    if (y0 > y1) {\n      var temp = y0;\n      y0 = y1;\n      y1 = temp;\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.dividerLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = this.bounds.width / 2;\n    this.origin.y = y0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.dividerLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.dividerLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    let props = {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.dividerLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.dividerLineColor,\n      class: \"dividerLine\"\n    };\n    if (this.divider) {\n      if (this.divider.selected) props.class += \" selected\";\n      props[\"source-index\"] = this.divider.sourceIndex;\n      props[\"element-index\"] = this.divider.elementIndex;\n      props.source = this.divider;\n    }\n    return props;\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class NeumeLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note0, note1, hanging) {\n    super();\n\n    var staffPosition0 = note0.staffPosition;\n    var staffPosition1 = note1.staffPosition;\n\n    // note0 should be the upper one for our calculations here\n    if (staffPosition0 < staffPosition1) {\n      var temp = staffPosition0;\n      staffPosition0 = staffPosition1;\n      staffPosition1 = temp;\n    }\n\n    if (hanging && staffPosition0 - staffPosition1 > 4) {\n      staffPosition1 = staffPosition0 - 4;\n    }\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition0);\n    var y1 = 0;\n\n    if (hanging) {\n      // if the difference between the notes is only one, and the upper\n      // note is on a line, and the lower note is within the four staff lines,\n      // then our hanging line goes past the lower note by a whole\n      // staff interval\n      if (\n        staffPosition0 - staffPosition1 === 1 &&\n        Math.abs(staffPosition0) % 2 === 1 &&\n        staffPosition1 > -3\n      )\n        staffPosition1--;\n\n      y1 += (ctxt.glyphPunctumHeight * ctxt.glyphScaling) / 2.2;\n    }\n\n    y1 += ctxt.calculateHeightFromStaffPosition(staffPosition1);\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class VirgaLineVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition);\n    var y1;\n\n    if (Math.abs(staffPosition % 2) === 0) y1 = y0 + ctxt.staffInterval * 1.8;\n    else y1 = y0 + ctxt.staffInterval * 2.7;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\nexport class LineaVisualizer extends ChantLayoutElement {\n  constructor(ctxt, note) {\n    super();\n\n    var staffPosition = note.staffPosition;\n\n    var y0 = ctxt.calculateHeightFromStaffPosition(staffPosition) - note.origin.y;\n    var y1 = y0 + note.bounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = y0;\n    this.bounds.width = ctxt.neumeLineWeight * 5 + note.bounds.width;\n    this.bounds.height = y1 - y0;\n\n    this.origin.x = ctxt.neumeLineWeight * 2.5;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n    canvasCtxt.fillRect(\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight,\n      this.bounds.y,\n      ctxt.neumeLineWeight,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt, x) {\n    return {\n      x,\n      y: this.bounds.y,\n      width: ctxt.neumeLineWeight,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"neumeLine\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"g\", null, [\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt, x))));\n  }\n\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"g\", {}, ...[\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt, x))));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"g\", null, [\n      this.bounds.x,\n      this.bounds.x + this.bounds.width - ctxt.neumeLineWeight\n    ].map(x => QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt, x))).join(''));\n  }\n}\n\nexport class GlyphVisualizer extends ChantLayoutElement {\n  constructor(ctxt, glyphCode) {\n    super();\n\n    this.glyph = null;\n\n    this.setGlyph(ctxt, glyphCode);\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphCode !== glyphCode) {\n      if (\n        typeof glyphCode === \"undefined\" ||\n        glyphCode === null ||\n        glyphCode === \"\"\n      )\n        glyphCode = this.glyphCode = GlyphCode.None;\n      else this.glyphCode = glyphCode;\n\n      let glyph = this.glyph = Glyphs[glyphCode];\n\n      // if this glyph hasn't been used yet, then load it up in the defs section for sharing\n      if (!ctxt.defs.hasOwnProperty(glyphCode)) {\n        var getDefProps = () => {\n          var options = {\n            id: glyphCode,\n            class: \"glyph\"\n          };\n          if (ctxt.scaleDefs === true) {\n            options.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n          }\n          return options;\n        };\n        var makeDef = () => {\n          let options = getDefProps();\n          // create the ref\n          ctxt.defs[glyphCode] = QuickSvg.createFragment(\n            \"g\",\n            options,\n            QuickSvg.svgFragmentForGlyph(glyph)\n          );\n\n          if (ctxt.defsNode)\n            ctxt.defsNode.appendChild(\n              QuickSvg.createNode(\n                \"g\",\n                options,\n                QuickSvg.nodesForGlyph(glyph)\n              )\n            );\n        };\n        makeDef.makeSvgTree = () => {\n          return QuickSvg.createSvgTree(\n            \"g\",\n            getDefProps(),\n            ...QuickSvg.nodesForGlyph(glyph, \"createSvgTree\")\n          );\n        };\n        makeDef.glyphCode = glyphCode;\n        makeDef();\n        ctxt.makeDefs.push(makeDef);\n      }\n\n      this.align = this.glyph.align;\n    }\n\n    this.origin.x = this.glyph.origin.x * ctxt.glyphScaling;\n    this.origin.y = this.glyph.origin.y * ctxt.glyphScaling;\n\n    this.bounds.x = 0;\n    this.bounds.y = -this.origin.y;\n    this.bounds.width = this.glyph.bounds.width * ctxt.glyphScaling;\n    this.bounds.height = this.glyph.bounds.height * ctxt.glyphScaling;\n  }\n\n  setStaffPosition(ctxt, staffPosition) {\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) - this.origin.y;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    var x = this.bounds.x + this.origin.x;\n    var y = this.bounds.y + this.origin.y;\n    canvasCtxt.translate(x, y);\n    canvasCtxt.scale(ctxt.glyphScaling, ctxt.glyphScaling);\n\n    for (var i = 0; i < this.glyph.paths.length; i++) {\n      var path = this.glyph.paths[i];\n      canvasCtxt.fillStyle =\n        path.type === \"negative\" ? \"#fff\" : ctxt.neumeLineColor;\n      canvasCtxt.fill(new Path2D(path.data));\n    }\n\n    canvasCtxt.scale(1.0 / ctxt.glyphScaling, 1.0 / ctxt.glyphScaling);\n    canvasCtxt.translate(-x, -y);\n  }\n\n  getSvgAttributes(ctxt, source) {\n    let className = \"\";\n    if (/^Porrectus\\d$/.test(this.glyphCode)) {\n      let notes = source.neume.notes,\n        noteIndex = notes.indexOf(source),\n        nextNote = notes[noteIndex + 1];\n      className = source.selected\n        ? nextNote.selected\n          ? \"selected\"\n          : \"selectedA\"\n        : nextNote.selected\n        ? \"selectedB\"\n        : \"\";\n    } else {\n      let isSelected =\n        source && (source.selected || (source.model && source.model.selected));\n      className = isSelected ? \"selected\" : \"\";\n    }\n    var result = {\n      \"xlink:href\": \"#\" + this.glyphCode,\n      class: className\n    };\n    if (source) {\n      result[\"source-index\"] = source.sourceIndex;\n      result[\"element-index\"] = source.elementIndex;\n      if ('noteIndex' in source) {\n        result.class += ' note';\n        result.id = ctxt.noteIdPrefix + (source.noteIndex + 1);\n        if (source.neume) {\n          const glyphCode = source.glyphVisualizer.glyphCode;\n          if (/^Porrectus/.test(glyphCode)) {\n            result.class += ' porrectus porrectus-start';\n          } else if (glyphCode === 'None') {\n            result.class += ' porrectus porrectus-end';\n          }\n        }\n      }\n    }\n    if (ctxt.scaleDefs === true) {\n      result.x = this.bounds.x + this.origin.x;\n      result.y = this.bounds.y + this.origin.y;\n    } else {\n      result.x = (this.bounds.x + this.origin.x) / ctxt.glyphScaling;\n      result.y = (this.bounds.y + this.origin.y) / ctxt.glyphScaling;\n      result.transform = \"scale(\" + ctxt.glyphScaling + \")\";\n    }\n    return result;\n  }\n\n  createSvgNode(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    attributes.source = source;\n    return QuickSvg.createNode(\"use\", attributes);\n  }\n  createSvgTree(ctxt, source) {\n    var attributes = this.getSvgAttributes(ctxt, source);\n    if (source) attributes.source = source;\n    return QuickSvg.createSvgTree(\"use\", attributes);\n  }\n\n  createSvgFragment(ctxt, source) {\n    return QuickSvg.createFragment(\"use\", this.getSvgAttributes(ctxt, source));\n  }\n}\n\nexport class RoundBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = (3 * ctxt.staffInterval) / 2;\n\n    this.bounds = new Rect(\n      x1,\n      isAbove ? y - this.braceHeight : y,\n      x2 - x1,\n      this.braceHeight\n    );\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // returns svg path d string\n  generatePathString() {\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, dx, dy;\n\n    dx = width / 6;\n    dy = this.bounds.height;\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      dy = -dy;\n    } else {\n      y = this.bounds.y;\n    }\n\n    //Calculate Control Points of path,\n    var cx1 = x1 + dx;\n    var cy = y + dy;\n    var cx2 = x2 - dx;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" C \" +\n      cx1.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      cx2.toFixed(dp) +\n      \" \" +\n      cy.toFixed(dp) +\n      \" \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp)\n    );\n  }\n}\n\nexport class CurlyBraceVisualizer extends ChantLayoutElement {\n  constructor(ctxt, x1, x2, y, isAbove = true, addAcuteAccent = false) {\n    super();\n\n    if (x1 > x2) {\n      // swap the xs\n      var temp = x1;\n      x1 = x2;\n      x2 = temp;\n    }\n\n    this.isAbove = isAbove;\n    this.braceHeight = ctxt.staffInterval / 2;\n\n    // y is the actual vertical start of the brace (left hand side)\n    // thus for a brace over notes, bounds.y is the bottom of brace,\n    // but for a brace under the notes, y is simply the y passed in.\n    if (isAbove) y -= this.braceHeight;\n\n    var bounds = new Rect(x1, y, x2 - x1, this.braceHeight);\n\n    if (addAcuteAccent && isAbove) {\n      this.accent = new GlyphVisualizer(ctxt, GlyphCode.AcuteAccent);\n      this.accent.bounds.x += bounds.x + (x2 - x1) / 2;\n      this.accent.bounds.y += bounds.y - ctxt.staffInterval / 4;\n\n      bounds.union(this.accent.bounds);\n    }\n\n    this.bounds = bounds;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  getSvgPathProps(ctxt) {\n    return {\n      d: this.generatePathString(),\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.staffLineWeight + \"px\",\n      fill: \"none\",\n      class: \"brace\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var node = QuickSvg.createNode(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      return QuickSvg.createNode(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        [node, this.accent.createSvgNode(ctxt)]\n      );\n    } else return node;\n  }\n  createSvgTree(ctxt) {\n    var node = QuickSvg.createSvgTree(\"path\", this.getSvgPathProps(ctxt));\n    if (this.accent) {\n      return QuickSvg.createSvgTree(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        node,\n        this.accent.createSvgTree(ctxt)\n      );\n    } else return node;\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = QuickSvg.createFragment(\"path\", this.getSvgPathProps(ctxt));\n\n    if (this.accent) {\n      fragment += this.accent.createSvgFragment(ctxt);\n\n      return QuickSvg.createFragment(\n        \"g\",\n        {\n          class: \"accentedBrace\"\n        },\n        fragment\n      );\n    } else return fragment;\n  }\n\n  // code below inspired by: https://gist.github.com/alexhornbake\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path d string\n  generatePathString() {\n    var q = 0.6; // .5 is normal, higher q = more expressive bracket\n\n    var x1 = this.bounds.x;\n    var x2 = this.bounds.right();\n    var width = this.bounds.width;\n    var y, h;\n\n    if (this.isAbove) {\n      y = this.bounds.bottom();\n      h = -this.braceHeight;\n    } else {\n      y = this.bounds.y;\n      h = this.braceHeight;\n    }\n\n    // calculate Control Points of path\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * width;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * width;\n    var ty1 = y + h;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * width;\n    var qy4 = y + (1 - q) * h;\n\n    // two decimal points should be enough, but if we need more precision, we can\n    // up it here.\n    var dp = 2;\n    return (\n      \"M \" +\n      x1.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x1.toFixed(dp) +\n      \" \" +\n      qy1.toFixed(dp) +\n      \" \" +\n      qx2.toFixed(dp) +\n      \" \" +\n      qy2.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp) +\n      \" M \" +\n      x2.toFixed(dp) +\n      \" \" +\n      y.toFixed(dp) +\n      \" Q \" +\n      x2.toFixed(dp) +\n      \" \" +\n      qy3.toFixed(dp) +\n      \" \" +\n      qx4.toFixed(dp) +\n      \" \" +\n      qy4.toFixed(dp) +\n      \" T \" +\n      tx1.toFixed(dp) +\n      \" \" +\n      ty1.toFixed(dp)\n    );\n  }\n}\n\nexport class TextSpan {\n  constructor(text, propertyArray, activeTags, index = 0, extraProps) {\n    if (typeof propertyArray === \"undefined\" || propertyArray === null)\n      propertyArray = [];\n\n    this.text = text;\n    this.propertyArray = propertyArray;\n    this.activeTags = activeTags || [];\n    this.index = index;\n    if (extraProps) {\n      if ('xOffset' in extraProps) this.xOffset = extraProps.xOffset;\n      if ('newLine' in extraProps) this.newLine = extraProps.newLine;\n    }\n  }\n\n  get properties() {\n    const result = Object.assign.apply(null, [{}].concat(this.propertyArray).concat());\n    if ('xOffset' in this) result.xOffset = this.xOffset;\n    if ('newLine' in this) result.newLine = this.newLine;\n    return result;\n  }\n\n  clone() {\n    const result = new TextSpan(\n      this.text,\n      this.propertyArray,\n      this.activeTags,\n      this.index\n    );\n    if ('xOffset' in this) result.xOffset = this.xOffset;\n    if ('newLine' in this) result.newLine = this.newLine;\n    return result;\n  }\n}\n\nclass MarkupStackFrame {\n  constructor(tagName, startIndex, propertyArray = [], symbol) {\n    this.tagName = tagName;\n    this.startIndex = startIndex;\n    this.propertyArray = propertyArray;\n    if (symbol) this.symbol = symbol;\n  }\n\n  get properties() {\n    return Object.assign.apply(null, [{}].concat(this.propertyArray));\n  }\n\n  static createStackFrame(ctxt, tagName, startIndex, extraProperties = {}, symbol = '') {\n    return new MarkupStackFrame(\n      tagName,\n      startIndex,\n      [ctxt.fontStyleDictionary[tagName], extraProperties],\n      symbol\n    );\n  }\n}\n\n// for escaping html strings before they go into the svgs\n// adapted from http://stackoverflow.com/a/12034334/5720160\nvar __subsForTspans = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\"\n};\n\nexport class TextElement extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super();\n\n    // set these to some sane values for now...\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    this.fontFamily = fontFamily;\n    this.fontSize = fontSize;\n    this.textAnchor = textAnchor;\n    this.sourceIndex = sourceIndex;\n    this.sourceGabc = sourceGabc;\n    this.dominantBaseline = \"baseline\"; // default placement\n\n    this.generateSpansFromText(ctxt, text);\n\n    this.recalculateMetrics(ctxt);\n  }\n\n  getFromScore(score) {\n    return this.textType.getFromScore(score, this);\n  }\n\n  generateSpansFromText(ctxt, text) {\n    text = text.replace(/\\s+/g, \" \");\n    this.text = \"\";\n    this.spans = [];\n\n    // save ourselves a lot of grief for a very common text:\n    if (text === \"*\" || text === \"+\" || text === \"†\") {\n      let properties =\n        text === \"*\"\n          ? [ctxt.asteriskProperties]\n          : text === \"+\"\n          ? [ctxt.plusProperties]\n          : null;\n      text = ctxt.specialCharText(text) || text;\n      this.spans.push(new TextSpan(text, properties));\n      return;\n    }\n\n    var markupStack = [];\n    var spanStartIndex = 0;\n    var newLineInNextSpan = 0;\n\n    var filterFrames = (frame, symbol) => frame.Symbol === symbol;\n\n    var closeSpan = (spanText, index, extraProperties) => {\n      if (spanText === \"\" && !this.dropCap) return;\n\n      this.text += spanText;\n\n      var properties = [];\n      for (var i = 0; i < markupStack.length; i++) {\n        properties.push.apply(properties, markupStack[i].propertyArray);\n      }\n\n      if (extraProperties) properties.push(extraProperties);\n      const span = new TextSpan(\n        spanText,\n        properties,\n        markupStack.map((frame) => frame.tagName),\n        index\n      );\n      this.spans.push(span);\n      if (newLineInNextSpan) {\n        span.newLine = newLineInNextSpan;\n        newLineInNextSpan = 0;\n      }\n\n    };\n\n    var markupRegex = /(<br\\/?>)|<v>([\\s\\S]*?)(?:<\\/v>|$)|(\\*)(?=\\s*\\*|[^*]*(?:$|<v>))|(\\+)|<sp>(?:(~)|(')?([ao]e|[æœaeiouy])|([arv])\\/)<\\/sp>|([arv])\\/\\.|([℣℟])\\.?|(?:([*_^%])|<(\\/)?([bceiuv]|ul|sc|font)(?:\\s+(?:family=\"([^\"]+)\"|fill=\"([^\"]+)\"|class=\"([^\"]+)\"))*>)(?=(?:(.+?)(?:\\11|<\\/\\13>))?)/gi;\n    var vTagRegex = /(\\\\grecross)|\\{greextra\\}\\{([^}]*)\\}/g;\n    var match = null;\n    var openedAsterisk = false;\n    var closeCurrentSpan = () =>\n      closeSpan(text.substring(spanStartIndex, match.index), spanStartIndex);\n    while ((match = markupRegex.exec(text))) {\n      var [\n        ,\n        newLine,\n        vTag,\n        asterisk,\n        plus,\n        tilde,\n        accent,\n        vowelLigature,\n        specialChar,\n        specialChar2,\n        specialChar3,\n        markupSymbol,\n        closingTag,\n        tagName,\n        family,\n        fill,\n        cssClass,\n        enclosedText\n      ] = match;\n      specialChar = specialChar || specialChar2 || specialChar3;\n      // non-matching symbols first\n      if (newLine) {\n        // close the current span, if any:\n        if (match.index > spanStartIndex) {\n          closeCurrentSpan();\n        }\n        // add the newline span:\n        newLineInNextSpan++;\n      } else if (vTag) {\n        closeCurrentSpan();\n        let vMatch;\n        let lastIndex = 0;\n        let iOffset = 0;\n        while ((vMatch = vTagRegex.exec(vTag))) {\n          if (lastIndex < vMatch.index) {\n            closeSpan(vTag.slice(lastIndex, vMatch.index), match.index + lastIndex + iOffset);\n            iOffset = 3; // length of '<v>'\n          }\n          let [, grecross, greextra] = vMatch;\n          if (grecross) {\n            // grecross is just the command for the Cross:\n            // set up greextra so it will get handled with it below:\n            greextra = 'Cross';\n          }    \n          const char = greextraGlyphs[greextra];\n          if (char) {\n            closeSpan(char, match.index + vMatch.index + iOffset, { 'font-family': 'greextra' })\n          }\n          lastIndex = vTagRegex.lastIndex;\n          iOffset = 3; // length of '<v>'\n        }\n        if (lastIndex < vTag.length) {\n          closeSpan(vTag.slice(lastIndex), match.index + lastIndex + iOffset);\n        }\n      } else if (asterisk) {\n        closeCurrentSpan();\n        // first check if it is just a symbol to close:\n        if (\n          markupStack.length > 0 &&\n          markupStack[markupStack.length - 1].symbol === asterisk\n        ) {\n          // close asterisk tag\n          markupStack.pop();\n        } else {\n          // add special asterisk:\n          closeSpan(ctxt.specialCharText(asterisk) || '*', match.index, ctxt.asteriskProperties);\n        }\n      } else if (plus) {\n        closeCurrentSpan();\n        closeSpan(ctxt.specialCharText(plus) || '+', match.index, ctxt.plusProperties);\n      } else if (tilde) {\n        closeCurrentSpan();\n        closeSpan('∼', match.index);\n      } else if (vowelLigature) {\n        let vowel = makeLigature(vowelLigature);\n        if (accent) vowel = addAccent(vowel);\n        closeCurrentSpan();\n        closeSpan(vowel, match.index);\n      } else if (specialChar) {\n        closeCurrentSpan();\n        closeSpan(\n          ctxt.textBeforeSpecialChar +\n            ctxt.specialCharText(specialChar) +\n            ctxt.textAfterSpecialChar,\n          match.index,\n          ctxt.specialCharProperties\n        );\n      } else {\n        // otherwise we're dealing with matching markup delimeters\n        if (markupSymbol === \"*\") {\n          // we are only strict with the asterisk, because there are cases when it needs to be displayed rather than count as a markup symbol\n          if (enclosedText && /[^\\s*]/.test(enclosedText)) {\n            openedAsterisk = true;\n          } else if (openedAsterisk) {\n            openedAsterisk = false;\n          } else {\n            // actually use the asterisk, since it doesn't have a matching closing asterisk\n            continue;\n          }\n        }\n        if (markupSymbol) {\n          tagName = ctxt.markupSymbolDictionary[markupSymbol];\n          if (\n            markupStack.length > 0 &&\n            markupStack[markupStack.length - 1].tagName === tagName &&\n            markupStack[markupStack.length - 1].symbol === markupSymbol\n          ) {\n            closingTag = true;\n          }\n        }\n        if (\n          markupStack.length > 0 &&\n          markupStack[markupStack.length - 1].tagName === tagName\n        ) {\n          if (closingTag) {\n            // group close\n            closeCurrentSpan();\n            markupStack.pop();\n          }\n        } else if (markupStack.filter(filterFrames).length > 0) {\n          // trying to open a recursive group (or forgot to close a previous group)\n          // in either case, we just unwind to the previous stack frame\n          spanStartIndex = markupStack[markupStack.length - 1].startIndex;\n          markupStack.pop();\n          continue;\n        } else {\n          closeCurrentSpan();\n          if (closingTag) {\n            // out of order group close:\n            let index = markupStack.findIndex(\n              (frame) => frame.tagName === tagName\n            );\n            if (index >= 0) {\n              markupStack.splice(index, 1);\n            }\n          } else {\n            // group open\n            const extraProperties = {};\n            if (family) extraProperties['font-family'] = family;\n            if (fill) extraProperties.fill = fill;\n            if (cssClass) extraProperties.class = cssClass;\n            markupStack.push(\n              MarkupStackFrame.createStackFrame(ctxt, tagName, match.index, extraProperties, markupSymbol)\n            );\n          }\n        }\n      }\n\n      // advance the start index past the current markup\n      spanStartIndex = match.index + match[0].length;\n    }\n\n    // if we finished matches, and there is still some text left,\n    // or if we haven't generated any spans yet, create one final run\n    if (spanStartIndex < text.length || this.spans.length === 0)\n      closeSpan(text.slice(spanStartIndex), spanStartIndex);\n  }\n\n  getCanvasFontForProperties(ctxt, properties = {}) {\n    var font = \"\";\n    if (properties[\"font-style\"] === \"italic\") font += \"italic \";\n    if (properties[\"font-variant\"] === \"small-caps\") font += \"small-caps \";\n    if (properties[\"font-weight\"] === \"bold\") font += \"bold \";\n    let fontSize = parseFloat(properties[\"font-size\"]) || this.fontSize(ctxt);\n    if (/%$/.test(properties[\"font-size\"])) {\n      fontSize *= this.fontSize(ctxt) / 100;\n    }\n    font += `${fontSize * (this.resize || 1)}px `;\n    font += properties[\"font-family\"] || this.fontFamily(ctxt);\n    return font;\n  }\n\n  measureSubstringBBox(ctxt, length) {\n    return this.measureSubstring(ctxt, length, true);\n  }\n\n  /**\n   * if length is undefined and this.rightAligned === true, then offsets will be marked for each newLine span\n   * \n   * @param {ChantContext} ctxt \n   * @param {number} length \n   * @param {boolean} returnBBox \n   * @returns measured substring, as a simple width unless returnBBox == true\n   */\n  measureSubstring(ctxt, length, returnBBox = false) {\n    if (length === 0) return 0;\n    if (!length) length = Infinity;\n    if (length < 0) {\n      var lines = -length;\n      length = Infinity;\n    }\n    var canvasCtxt = ctxt.canvasCtxt;\n    var width = 0;\n    var widths = [];\n    var newLineSpans = [this.spans[0]];\n    var subStringLength = 0;\n    var numLines = 1;\n    var fontSize = this.fontSize(ctxt) * (this.resize || 1);\n    var bbox = new Rect(0, 0, 0, 0);\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i],\n        myText = span.text.slice(0, length - subStringLength);\n      if (span.newLine) {\n        numLines += parseInt(span.newLine) || 1;\n        if (!lines && this.rightAligned === true && length === Infinity) {\n          newLineSpans[newLineSpans.length - 1].xOffset =\n            this.firstLineMaxWidth - width;\n          newLineSpans.push(span);\n        } else if (--lines === 0) break;\n        widths.push(width);\n        width = 0;\n      }\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Canvas) {\n        canvasCtxt.font = this.getCanvasFontForProperties(\n          ctxt,\n          span.properties\n        );\n        let metrics = canvasCtxt.measureText(\n          myText,\n          width,\n          fontSize * (numLines - 1)\n        );\n        if (\"actualBoundingBoxAscent\" in metrics) {\n          let left = metrics.actualBoundingBoxLeft;\n          bbox.union(\n            new Rect(\n              width - left,\n              fontSize * (numLines - 1) - metrics.actualBoundingBoxAscent,\n              metrics.width + left,\n              metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent\n            )\n          );\n          if (this instanceof DropCap) {\n            width += Math.max(0, left);\n          }\n        } else {\n          bbox.union(\n            new Rect(width, fontSize * (numLines - 2), metrics.width, fontSize)\n          );\n        }\n        width += metrics.width;\n      } else if (\n        ctxt.textMeasuringStrategy === TextMeasuringStrategy.OpenTypeJS &&\n        ctxt.fontDictionary\n      ) {\n        // get the bounding box for the substring, placing it at x = width, y = fontSize * (numLines - 1)\n        let font = ctxt.getFontForProperties(\n          span.properties,\n          span.properties[\"font-family\"] || this.fontFamily(ctxt)\n        );\n        /**\n         * @type {{ features: { liga: boolean; smcp?: boolean; } }}\n         */\n        let options = { features: { liga: true } };\n        if (span.properties[\"font-variant\"] === \"small-caps\") {\n          options.features.smcp = true;\n        }\n        let spanFontSize = parseFloat(span.properties[\"font-size\"]) || fontSize;\n        if (/%$/.test(span.properties[\"font-size\"])) {\n          spanFontSize *= fontSize / 100;\n        }\n        let subBbox = font\n          .getPath(\n            myText,\n            width,\n            fontSize * (numLines - 1),\n            spanFontSize,\n            options\n          )\n          .getBoundingBox();\n        let subWidth = font.getAdvanceWidth(myText, spanFontSize, options);\n\n        bbox.union(\n          new Rect(\n            width + subBbox.x1,\n            subBbox.y1,\n            subWidth - subBbox.x1,\n            subBbox.y2 - subBbox.y1\n          )\n        );\n        width += subWidth;\n        if (this instanceof DropCap) {\n          width -= subBbox.x1;\n        }\n      }\n      subStringLength += myText.length;\n      if (subStringLength === length) break;\n    }\n    if (\n      !lines &&\n      width &&\n      newLineSpans.length &&\n      this.rightAligned === true &&\n      length === Infinity\n    ) {\n      newLineSpans[newLineSpans.length - 1].xOffset =\n        this.firstLineMaxWidth - width;\n    }\n    width = Math.max(width, ...widths);\n    if (returnBBox === true) {\n      let height = bbox.height;\n      let y = bbox.y,\n        x = bbox.x;\n      return { width, height, x, y };\n    } else {\n      return width;\n    }\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    if (resetNewLines) {\n      delete this.maxWidth;\n      delete this.firstLineMaxWidth;\n      delete this.rightAligned;\n      delete this.resize;\n      delete this.numLines;\n      // replace newlines with spaces\n      this.spans.forEach((span) => {\n        delete span.xOffset;\n        if (span.newLine === true) {\n          delete span.newLine;\n          span.text = \" \" + span.text;\n        }\n      });\n    }\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.origin.x = 0;\n\n    if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n      while (ctxt.svgTextMeasurer.firstChild)\n        ctxt.svgTextMeasurer.removeChild(ctxt.svgTextMeasurer.firstChild);\n      ctxt.svgTextMeasurer.appendChild(this.createSvgNode(ctxt));\n      ctxt.svgTextMeasurer.appendChild(ctxt.createStyleNode());\n\n      var bbox = ctxt.svgTextMeasurer.firstChild.getBBox();\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y; // offset to baseline from top\n      this.origin.x = -bbox.x;\n    } else {\n      let bbox = this.measureSubstringBBox(ctxt);\n      this.bounds.width = bbox.width;\n      this.bounds.height = bbox.height;\n      this.origin.y = -bbox.y;\n      this.origin.x = -bbox.x;\n    }\n    this.numLines = this.spans.reduce(\n      (result, span) =>\n        result +\n        (span.newLine ? parseInt(span.newLine) || 1 : 0),\n      1\n    );\n  }\n\n  setMaxWidth(ctxt, maxWidth, firstLineMaxWidth = maxWidth) {\n    if (this.spans.filter((s) => s.newLine === true).length) {\n      // first get rid of any new lines set from a previous maxWidth\n      this.recalculateMetrics(ctxt);\n    }\n    if (this.bounds.width > maxWidth) {\n      this.maxWidth = maxWidth;\n      var percentage = maxWidth / this.bounds.width;\n      if (this instanceof Lyric && percentage >= 0.85) {\n        this.resize = percentage;\n      } else {\n        if (firstLineMaxWidth < 0) firstLineMaxWidth = maxWidth;\n        this.firstLineMaxWidth = firstLineMaxWidth;\n        var lastWidth = 0,\n          lastMatch = null,\n          regex = /\\s+|$/g,\n          max = firstLineMaxWidth,\n          match;\n        while (\n          (match = regex.exec(this.text)) &&\n          (!lastMatch || match.index > lastMatch.index)\n        ) {\n          var width = this.measureSubstring(ctxt, match.index);\n          if (width > max && lastMatch) {\n            var spanIndex = 0,\n              length = 0;\n            while (length < lastMatch.index && spanIndex < this.spans.length) {\n              let span = this.spans[spanIndex++];\n              length += span.text.length + (span.newLine ? 1 : 0);\n            }\n            if (length > lastMatch.index || spanIndex >= this.spans.length) {\n              let span = this.spans[--spanIndex];\n              length -= span.text.length;\n            }\n            var splitSpan = this.spans[spanIndex],\n              textLeft = splitSpan.text.slice(0, lastMatch.index - length),\n              textRight = splitSpan.text.slice(\n                lastMatch.index + lastMatch[0].length - length\n              ),\n              newSpans = [];\n            this.rightAligned =\n              max === firstLineMaxWidth && firstLineMaxWidth !== maxWidth;\n            if (textLeft)\n              newSpans.push(\n                new TextSpan(\n                  textLeft,\n                  splitSpan.propertyArray,\n                  splitSpan.activeTags\n                )\n              );\n            if (textRight) {\n              newSpans.push(\n                new TextSpan(\n                  textRight,\n                  splitSpan.propertyArray,\n                  splitSpan.activeTags,\n                  undefined,\n                  { newLine: true }\n                )\n              );\n            } else if (this.spans[spanIndex + 1]) {\n              this.spans[spanIndex + 1].newLine = true;\n            }\n            this.spans.splice(spanIndex, 1, ...newSpans);\n            this.needsLayout = true;\n            max = maxWidth;\n            if (\n              match.index === this.text.length ||\n              this.measureSubstring(ctxt) <= maxWidth\n            )\n              break;\n            width = 0;\n            match = lastMatch = null;\n          }\n          lastWidth = width;\n          lastMatch = match;\n        }\n      }\n      this.recalculateMetrics(ctxt, false);\n    }\n  }\n\n  getCssClasses() {\n    return (this.textType && this.textType.cssClass) || \"\";\n  }\n\n  getExtraStyleProperties(ctxt) {\n    return ctxt.baseTextStyle || {};\n  }\n\n  static escapeForTspan(string) {\n    return String(string).replace(/[&<>]/g, function (s) {\n      return __subsForTspans[s];\n    });\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    if (this.textAnchor === \"middle\") canvasCtxt.textAlign = \"center\";\n    else canvasCtxt.textAlign = \"start\";\n\n    var translateWidth = 0,\n      translateHeight = 0;\n    for (var i = 0; i < this.spans.length; i++) {\n      var span = this.spans[i];\n      var xOffset = span.xOffset || 0;\n      if (span.newLine) {\n        let count = parseInt(span.newLine) || 1;\n        canvasCtxt.translate(\n          translateWidth + xOffset,\n          this.fontSize(ctxt) * count\n        );\n        translateWidth = -xOffset;\n        translateHeight -= this.fontSize(ctxt);\n      } else if (xOffset) {\n        canvasCtxt.translate(translateWidth + xOffset, 0);\n        translateWidth = -xOffset;\n      }\n      var properties = Object.assign(\n        {},\n        this.getExtraStyleProperties(ctxt),\n        span.properties\n      );\n      canvasCtxt.font = this.getCanvasFontForProperties(ctxt, properties);\n      canvasCtxt.fillStyle = properties.fill || \"#000\";\n      canvasCtxt.fillText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y,\n        span.textLength || undefined\n      );\n      var metrics = canvasCtxt.measureText(\n        span.text,\n        this.bounds.x,\n        this.bounds.y\n      );\n      translateWidth -= metrics.width;\n      canvasCtxt.translate(metrics.width, 0);\n    }\n    canvasCtxt.translate(translateWidth, translateHeight);\n  }\n\n  getSvgProps() {\n    return {\n      \"source-index\": this.sourceIndex,\n      x: this.bounds.x,\n      y: this.bounds.y,\n      class: this.getCssClasses().trim(),\n      \"text-anchor\": this.textAnchor\n      //'dominant-baseline': this.dominantBaseline, // hanging baseline doesn't work in Safari\n    };\n  }\n\n  getSpanOptions(span, ctxt, useStyleObject = false) {\n    var options = {\n      \"source-index\": span.index,\n      class: span.properties.class,\n      style: useStyleObject\n        ? Object.assign({}, span.properties)\n        : getCssForProperties(span.properties)\n    };\n\n    if (span.newLine) {\n      var xOffset = span.xOffset || 0;\n      options.dy = 1.1 * (parseInt(span.newLine) || 1) + \"em\";\n      options.x = this.bounds.x + xOffset;\n    } else if (span.xOffset) {\n      options.x = this.bounds.x + span.xOffset;\n    }\n    if (span.textLength) {\n      options.textLength = span.textLength;\n      options.lengthAdjust = \"spacingAndGlyphs\";\n      options.y = this.bounds.y;\n    }\n    if (this.resize) {\n      options[\"font-size\"] =\n        span.properties[\"font-size\"] || this.fontSize(ctxt) * this.resize;\n    }\n    // if (ctxt.setFontFamilyAttributes) {\n    //   options[\"font-family\"] =\n    //     span.properties[\"font-family\"] ||\n    //     getFontFilenameForProperties(span.properties, this.fontFamily(ctxt));\n    //   let properties = Object.assign({}, span.properties);\n    //   delete properties[\"font-weight\"];\n    //   delete properties[\"font-style\"];\n    //   options[\"style\"] = getCssForProperties(properties);\n    // } else {\n    //   options[\"style\"] = getCssForProperties(span.properties);\n    // }\n\n    return options;\n  }\n\n  createSvgNode(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans.push(QuickSvg.createNode(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    const extraStyleProperties = this.getExtraStyleProperties(ctxt);\n    options.style = getCssForProperties(extraStyleProperties);\n    if (extraStyleProperties.class) {\n      options.class = extraStyleProperties.class + ' ' + options.class;\n    }\n    options.source = this;\n\n    return (this.svgNode = QuickSvg.createNode(\"text\", options, spans));\n  }\n  createSvgTree(ctxt) {\n    var spans = [];\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt, true);\n\n      spans.push(QuickSvg.createSvgTree(\"tspan\", options, span.text));\n    }\n\n    let options = this.getSvgProps();\n    options.style = this.getExtraStyleProperties(ctxt);\n    if (options.style.class) {\n      options.class = options.style.class + ' ' + options.class;\n    }\n    options.source = this;\n\n    return QuickSvg.createSvgTree(\"text\", options, ...spans);\n  }\n\n  createSvgFragment(ctxt) {\n    var spans = \"\";\n\n    for (var i = 0; i < this.spans.length; i++) {\n      let span = this.spans[i];\n      let options = this.getSpanOptions(span, ctxt);\n\n      spans += QuickSvg.createFragment(\n        \"tspan\",\n        options,\n        TextElement.escapeForTspan(span.text)\n      );\n    }\n\n    let options = this.getSvgProps();\n    const extraStyleProperties = this.getExtraStyleProperties(ctxt)\n    options.style = getCssForProperties(extraStyleProperties);\n    if (extraStyleProperties.class) {\n      options.class = extraStyleProperties.class + ' ' + options.class;\n    }\n    if (ctxt.setFontFamilyAttributes) {\n      options[\"font-size\"] = this.fontSize(ctxt);\n    }\n\n    return QuickSvg.createFragment(\"text\", options, spans);\n  }\n}\n\nexport var LyricType = {\n  SingleSyllable: 0,\n  BeginningSyllable: 1,\n  MiddleSyllable: 2,\n  EndingSyllable: 3,\n\n  Directive: 4 // for asterisks, \"ij.\" elements, or other performance notes.\n};\n\nexport var LyricArray = {\n  getLeft: function (lyricArray) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      if (lyricArray[i])\n        x = Math.min(\n          x,\n          lyricArray[i].notation.bounds.x + lyricArray[i].bounds.x\n        );\n    }\n\n    return x;\n  },\n\n  getRight: function (lyricArray, presumeConnectorNeeded) {\n    if (lyricArray.length === 0) return NaN;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < lyricArray.length; i++) {\n      let l = lyricArray[i];\n      if (l)\n        x = Math.max(\n          x,\n          l.notation.bounds.x +\n            l.bounds.x +\n            l.bounds.width +\n            (presumeConnectorNeeded && l.allowsConnector() && !l.needsConnector\n              ? l.getConnectorWidth()\n              : 0)\n        );\n    }\n\n    return x;\n  },\n\n  hasOnlyOneLyric: function (lyricArray) {\n    return lyricArray.filter((l) => l.originalText).length === 1;\n  },\n\n  indexOfLyric: function (lyricArray) {\n    return lyricArray.indexOf(lyricArray.filter((l) => l.originalText)[0]);\n  },\n\n  mergeIn: function (lyricArray, newLyrics) {\n    for (var i = 0; i < newLyrics.length; ++i) {\n      if (newLyrics[i].originalText || !lyricArray[i])\n        lyricArray[i] = newLyrics[i];\n    }\n  },\n\n  mergeInArray: function (lyricArray, notations) {\n    for (var i = 0; i < notations.length; ++i) {\n      this.mergeIn(lyricArray, notations[i].lyrics);\n    }\n  },\n\n  setNotation: function (lyricArray, notation) {\n    notation.lyrics = lyricArray;\n    for (var i = 0; i < lyricArray.length; ++i) {\n      lyricArray[i].notation = notation;\n    }\n  }\n};\n\nexport class Lyric extends TextElement {\n  constructor(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.lyric.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.lyric.font,\n      (ctxt) => ctxt.textStyles.lyric.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.lyric;\n\n    // save the original text in case we need to later use the lyric\n    // in a dropcap...\n    this.originalText = text;\n\n    this.notation = notation;\n    this.notations = notations;\n\n    if (\n      typeof lyricType === \"undefined\" ||\n      lyricType === null ||\n      lyricType === \"\"\n    )\n      this.lyricType = LyricType.SingleSyllable;\n    else this.lyricType = lyricType;\n\n    // Lyrics keep track of how to center them on notation elements.\n    // centerTextIndex is the index in this.text where the centering starts,\n    // centerLength is how many characters comprise the center point.\n    // performLayout will do the processing\n    this.centerStartIndex = -1;\n    this.centerLength = text.length;\n\n    this.needsConnector = false;\n\n    // Lyrics can have their own language defined, which affects the alignment\n    // of the text with the notation element\n    this.language = null;\n\n    if (this.allowsConnector)\n      this.connectorSpan = new TextSpan(ctxt.syllableConnector);\n  }\n\n  allowsConnector() {\n    return (\n      this.lyricType === LyricType.BeginningSyllable ||\n      this.lyricType === LyricType.MiddleSyllable\n    );\n  }\n\n  setForceConnector(force) {\n    this.forceConnector = force && this.allowsConnector();\n  }\n\n  setNeedsConnector(needs, width) {\n    if (needs === true || this.forceConnector) {\n      this.needsConnector = true;\n      if (typeof width !== \"undefined\") {\n        this.setConnectorWidth(width);\n      } else {\n        this.bounds.width =\n          this.widthWithoutConnector + this.getConnectorWidth();\n      }\n\n      if (\n        this.spans.length > 0 &&\n        this.spans[this.spans.length - 1] !== this.connectorSpan\n      )\n        this.spans.push(this.connectorSpan);\n    } else {\n      this.connectorWidth = 0;\n      this.needsConnector = false;\n      this.bounds.width = this.widthWithoutConnector;\n\n      var span = this.spans.pop();\n      if (span && span !== this.connectorSpan) this.spans.push(span);\n    }\n  }\n\n  setConnectorWidth(width) {\n    this.connectorWidth = width;\n    this.connectorSpan.textLength = width;\n    if (this.needsConnector)\n      this.bounds.width = this.widthWithoutConnector + this.getConnectorWidth();\n  }\n\n  getConnectorWidth() {\n    return this.connectorWidth || this.defaultConnectorWidth;\n  }\n\n  getLeft() {\n    return this.notation.bounds.x + this.bounds.x;\n  }\n\n  getRight() {\n    return this.notation.bounds.x + this.bounds.x + this.bounds.width;\n  }\n\n  recalculateMetrics(ctxt, resetNewLines = true) {\n    this.setNeedsConnector();\n\n    super.recalculateMetrics(ctxt, resetNewLines);\n\n    this.widthWithoutConnector = this.bounds.width;\n\n    this.connectorWidth = 0;\n    this.defaultConnectorWidth = ctxt.hyphenWidth;\n\n    var activeLanguage = this.language || ctxt.defaultLanguage;\n\n    // calculate the point where the text lines up to the staff notation\n    // and offset the rect that much. By default we just center the text,\n    // but the logic below allows for smarter lyric alignment based\n    // on manual override or language control.\n    var offset = this.widthWithoutConnector / 2,\n      x1,\n      x2,\n      vowelSegmentWidth = this.widthWithoutConnector;\n\n    // some simple checks for sanity, and disable manual centering if the numbers are bad\n    if (\n      this.centerStartIndex >= 0 &&\n      (this.centerStartIndex >= this.text.length ||\n        this.centerLength < 0 ||\n        this.centerStartIndex + this.centerLength > this.text.length)\n    )\n      this.centerStartIndex = -1;\n\n    if (this.text.length === 0) {\n      // if we have no text to work with, then there's nothing to do!\n      // Unless it's a drop cap, in which case we center the connector:\n      if (this.dropCap && this.originalText) {\n        offset = ctxt.hyphenWidth / 2;\n        vowelSegmentWidth = ctxt.hyphenWidth;\n      }\n    } else if (this.centerStartIndex >= 0) {\n      // if we have manually overriden the centering logic for this lyric,\n      // then always use that.\n      if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n        // svgTextMeasurer still has the current lyric in it...\n        x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex\n        );\n        x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n          0,\n          this.centerStartIndex + this.centerLength\n        );\n      } else {\n        x1 = this.measureSubstring(ctxt, this.centerStartIndex);\n        x2 = this.measureSubstring(\n          ctxt,\n          this.centerStartIndex + this.centerLength\n        );\n      }\n      offset = (x1 + x2) / 2;\n      vowelSegmentWidth = x2 - x1;\n    } else {\n      // if it's a directive with no manual centering override, then\n      // just center the text.\n      if (this.lyricType !== LyricType.Directive) {\n        // only consider text content after the last space (if any)\n        var startIndex = this.text.lastIndexOf(\" \") + 1;\n\n        // unless there are no text characters following the space:\n        if (\n          startIndex > 0 &&\n          !this.text\n            .slice(startIndex)\n            .match(/[a-záéíóúýäëïöüÿàèìòùỳāēīōūȳăĕĭŏŭ]/i)\n        ) {\n          startIndex = 0;\n        }\n\n        // find indices of e tags to ignore when finding vowel segment:\n        var ignore = [];\n        let index = 0;\n        let indexOffset = startIndex;\n        for (var span of this.spans) {\n          let endIndex = index + span.text.length;\n          if (span.activeTags.includes('e')) {\n            if (index <= startIndex) {\n              startIndex = endIndex;\n            } else {\n              ignore.push({ index: index - indexOffset, endIndex: endIndex - indexOffset });\n            }\n          }\n          index = endIndex;\n        }\n        // Non-directive elements are lined up to the chant notation based on vowel segments,\n        var result = activeLanguage.findVowelSegment(this.text, startIndex, ignore);\n\n        if (result.found !== true) {\n          var match = this.text.slice(startIndex).match(/[a-z]+/i);\n          if (match) {\n            result.startIndex = startIndex + match.index;\n            result.length = match[0].length;\n          } else {\n            result.startIndex = startIndex;\n            result.length = this.text.length - startIndex;\n          }\n        }\n        if (ctxt.textMeasuringStrategy === TextMeasuringStrategy.Svg) {\n          // svgTextMeasurer still has the current lyric in it...\n          x1 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex\n          );\n          x2 = ctxt.svgTextMeasurer.firstChild.getSubStringLength(\n            0,\n            result.startIndex + result.length\n          );\n        } else {\n          x1 = this.measureSubstring(ctxt, result.startIndex);\n          x2 = this.measureSubstring(ctxt, result.startIndex + result.length);\n        }\n        offset = (x1 + x2) / 2;\n        vowelSegmentWidth = x2 - x1;\n      }\n    }\n\n    this.vowelSegmentWidth = vowelSegmentWidth;\n\n    this.bounds.x = -offset;\n    this.bounds.y = 0;\n\n    this.origin.x = offset;\n  }\n\n  generateDropCap(ctxt) {\n    if (this.dropCap) return this.dropCap;\n    // disallow special characters:\n    if (this.spans[0].properties['font-family'] === ctxt.specialCharProperties['font-family']) {\n      return null;\n    }\n    let dropCapSpan = this.spans[0].clone();\n    dropCapSpan.text = dropCapSpan.text.slice(0, 1).toUpperCase();\n    let dropCapLowerCase = dropCapSpan.text.toLowerCase();\n    // disallow any characters that do not change from .toUpperCase():\n    if (dropCapSpan.text === dropCapLowerCase) return null;\n\n    if (dropCapSpan.activeTags.indexOf(\"sc\") >= 0)\n      dropCapSpan.text = dropCapLowerCase;\n\n    var dropCap = (this.dropCap = new DropCap(ctxt, \"\", this.sourceIndex));\n    dropCap.spans = [dropCapSpan];\n    let dropCapSourceGabcLength = this.sourceGabc.match(\n      /^(?:<\\/?[^>]+>)*.?(?:<\\/[^>]+>)*/\n    )[0].length;\n    dropCap.sourceGabc = this.sourceGabc.slice(0, dropCapSourceGabcLength);\n    this.sourceIndex += dropCap.sourceGabc.length;\n    this.sourceGabc = this.sourceGabc.slice(dropCapSourceGabcLength);\n\n    this.spans[0].text = this.spans[0].text.slice(1);\n    this.text = this.text.slice(1);\n    this.centerStartIndex--; // lost a letter, so adjust centering accordingly\n\n    return dropCap;\n  }\n\n  getCssClasses() {\n    var classes = this.lyricType === LyricType.Directive ? \"directive \" : \"\";\n\n    return classes + super.getCssClasses();\n  }\n\n  getExtraStyleProperties(ctxt) {\n    var props = super.getExtraStyleProperties(ctxt);\n\n    if (this.lyricType === LyricType.Directive && ctxt.autoColor === true)\n      props = Object.assign({}, props, { fill: ctxt.rubricColor });\n\n    return props;\n  }\n}\n\nexport class ChoralSign extends TextElement {\n  constructor(ctxt, text, note, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.choralSign.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.choralSign.font,\n      TextTypes.choralSign.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.positionHint = MarkingPositionHint.Default;\n    this.note = note;\n    this.textType = TextTypes.choralSign;\n  }\n\n  recalculateMetrics(ctxt) {\n    super.recalculateMetrics(ctxt);\n  }\n\n  performLayout(ctxt) {\n    this.recalculateMetrics(ctxt);\n    this.bounds.x =\n      this.note.bounds.x +\n      Math.max(0, (ctxt.staffInterval - this.bounds.width) / 2); // center on the note itself\n\n    let offset, staffPosition;\n    if (this.positionHint === MarkingPositionHint.Below) {\n      offset = -1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : 1;\n    } else {\n      offset = 1;\n      staffPosition = this.note.staffPosition + 2 * offset;\n      staffPosition += staffPosition % 2 === 0 ? 0.3 : -0.4;\n    }\n    // if (staffPosition % 2 === 0) staffPosition += offset;\n    this.bounds.y =\n      ctxt.calculateHeightFromStaffPosition(staffPosition) + this.origin.y;\n  }\n}\n\nexport class AboveLinesText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.al.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.al.font,\n      (ctxt) => ctxt.textStyles.al.size,\n      \"start\",\n      sourceIndex,\n      text\n    );\n    this.notation = notation;\n    this.textType = TextTypes.al;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class TranslationText extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, notation, sourceIndex) {\n    var gabcSource = text;\n    var anchor = \"start\";\n    if (text === \"/\") {\n      text = \"\";\n      anchor = \"end\";\n    } else {\n      text = (ctxt.textStyles.translation.prefix || \"\") + text;\n    }\n    super(\n      ctxt,\n      text,\n      (ctxt) => ctxt.textStyles.translation.font,\n      (ctxt) => ctxt.textStyles.translation.size,\n      anchor,\n      sourceIndex,\n      gabcSource\n    );\n    this.notation = notation;\n    this.textType = TextTypes.translation;\n\n    this.padding = ctxt.staffInterval / 2;\n  }\n}\n\nexport class DropCap extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.dropCap.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.dropCap.font,\n      (ctxt) => ctxt.textStyles.dropCap.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.dropCap;\n\n    this.padding = ctxt.staffInterval * ctxt.textStyles.dropCap.padding;\n  }\n}\n\nexport class TitleTextElement extends TextElement {\n  constructor(\n    ctxt,\n    text,\n    fontFamily,\n    fontSize,\n    textAnchor,\n    sourceIndex,\n    sourceGabc\n  ) {\n    super(\n      ctxt,\n      text,\n      fontFamily,\n      fontSize,\n      textAnchor,\n      sourceIndex,\n      sourceGabc\n    );\n  }\n}\n\nexport class Supertitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.supertitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.supertitle.font,\n      (ctxt) => ctxt.textStyles.supertitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.supertitle;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.supertitle.padding) || 1) * ctxt.textStyles.supertitle.size / 3\n    );\n  }\n}\n\nexport class Title extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.title.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.title.font,\n      (ctxt) => ctxt.textStyles.title.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.title;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.title.padding) || 1) * ctxt.textStyles.title.size / 3\n    );\n  }\n}\n\nexport class Subtitle extends TitleTextElement {\n  constructor(ctxt, text, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.subtitle.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.subtitle.font,\n      (ctxt) => ctxt.textStyles.subtitle.size,\n      \"middle\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.subtitle;\n\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.subtitle.padding) || 1) * ctxt.textStyles.subtitle.size / 3\n    );\n  }\n}\n\nexport class TextLeftRight extends TitleTextElement {\n  constructor(ctxt, text, type, sourceIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.leftRight.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.leftRight.font,\n      (ctxt) => ctxt.textStyles.leftRight.size,\n      type === \"textLeft\" ? \"start\" : \"end\",\n      sourceIndex,\n      text\n    );\n    this.textType = TextTypes.leftRight;\n    this.extraClass = type === \"textLeft\" ? \"textLeft\" : \"textRight\";\n    this.headerKey = type === \"textLeft\" ? \"text-left\" : \"text-right\";\n    this.padding = (ctxt) => (\n      (Number(ctxt.textStyles.leftRight.padding) || 1) * ctxt.textStyles.leftRight.size / 5\n    );\n  }\n\n  getCssClasses() {\n    return this.extraClass + \" \" + super.getCssClasses();\n  }\n}\n\nexport class Annotation extends TextElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, text, elementIndex) {\n    super(\n      ctxt,\n      (ctxt.textStyles.annotation.prefix || \"\") + text,\n      (ctxt) => ctxt.textStyles.annotation.font,\n      (ctxt) => ctxt.textStyles.annotation.size,\n      \"middle\"\n    );\n    this.sourceGabc = text;\n    if (typeof elementIndex === 'number') this.elementIndex = elementIndex;\n    this.textType = TextTypes.annotation;\n    this.padding = ctxt.staffInterval * ctxt.textStyles.annotation.padding;\n    this.dominantBaseline = \"hanging\"; // so that annotations can be aligned at the top.\n  }\n}\n\nexport class Annotations extends ChantLayoutElement {\n  /**\n   * @param {String} text\n   */\n  constructor(ctxt, ...texts) {\n    super();\n\n    this.lineHeight = 1.1;\n    this.annotations = texts.map(function (text, i) {\n      return new Annotation(ctxt, text, i);\n    });\n    this.padding = Math.max.apply(\n      null,\n      this.annotations.map(function (annotation) {\n        return annotation.padding;\n      })\n    );\n  }\n\n  updateBounds(multiplier) {\n    if (!multiplier) multiplier = 1;\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.bounds.x += this.bounds.x * multiplier;\n      annotation.bounds.y += this.bounds.y * multiplier;\n    }\n  }\n\n  recalculateMetrics(ctxt) {\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n\n    let y = 0;\n    for (var i = 0; i < this.annotations.length; ++i) {\n      var annotation = this.annotations[i];\n      annotation.recalculateMetrics(ctxt);\n      this.bounds.width = Math.max(this.bounds.width, annotation.bounds.width);\n      annotation.bounds.y += y;\n      this.bounds.height = annotation.bounds.bottom();\n      this.origin.y = this.origin.y || annotation.origin.y;\n      y += annotation.fontSize(ctxt) * (annotation.resize || 1) * this.lineHeight;\n    }\n  }\n\n  draw(ctxt) {\n    this.updateBounds();\n    this.annotations.forEach(function (annotation) {\n      annotation.draw(ctxt);\n    });\n    this.updateBounds(-1);\n  }\n\n  createSvgNode(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgNode(ctxt);\n    });\n    this.updateBounds(-1);\n    return result;\n  }\n  createSvgTree(ctxt) {\n    this.updateBounds();\n    var result = this.annotations.map(function (annotation) {\n      return annotation.createSvgTree(ctxt);\n    });\n    this.updateBounds(-1);\n    return { children: result };\n  }\n\n  createSvgFragment(ctxt) {\n    this.updateBounds();\n    var result = this.annotations\n      .map(function (annotation) {\n        return annotation.createSvgFragment(ctxt);\n      })\n      .join(\"\");\n    this.updateBounds(-1);\n    return result;\n  }\n}\n\nexport class ChantNotationElement extends ChantLayoutElement {\n  constructor() {\n    super();\n\n    //double\n    this.leadingSpace = 0.0;\n    this.trailingSpace = DefaultTrailingSpace;\n    this.keepWithNext = false;\n    this.needsLayout = true;\n\n    this.lyrics = [];\n\n    /**\n     * @type {ChantScore}\n     */\n    this.score = null; // the ChantScore\n\n    /**\n     * @type {ChantLine}\n     */\n    this.line = null; // the ChantLine\n\n    this.visualizers = [];\n  }\n\n  hasLyrics() {\n    return this.lyrics.length !== 0;\n  }\n\n  getAllLyricsLeft() {\n    if (this.lyrics.length === 0) return this.bounds.right();\n\n    var x = Number.MAX_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i]) x = Math.min(x, this.lyrics[i].bounds.x);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  getAllLyricsRight() {\n    if (this.lyrics.length === 0) return this.bounds.x;\n\n    var x = Number.MIN_VALUE;\n    for (var i = 0; i < this.lyrics.length; i++) {\n      if (this.lyrics[i])\n        x = Math.max(x, this.lyrics[i].bounds.x + this.lyrics[i].bounds.width);\n    }\n\n    return this.bounds.x + x;\n  }\n\n  // used by subclasses while building up the chant notations.\n  addVisualizer(chantLayoutElement) {\n    if (!chantLayoutElement.ignoreBounds) {\n      if (this.bounds.isEmpty())\n        this.bounds = chantLayoutElement.bounds.clone();\n      else this.bounds.union(chantLayoutElement.bounds);\n    }\n\n    this.visualizers.push(chantLayoutElement);\n  }\n\n  // same as addVisualizer, except the element is unshifted to the front\n  // of the visualizer array rather than the end. This way, some\n  // visualizers can be placed behind the others...ledger lines for example.\n  prependVisualizer(chantLayoutElement) {\n    if (this.bounds.isEmpty()) this.bounds = chantLayoutElement.bounds.clone();\n    else this.bounds.union(chantLayoutElement.bounds);\n\n    this.visualizers.unshift(chantLayoutElement);\n  }\n\n  // chant notation elements are given an opportunity to perform their layout via this function.\n  // subclasses should call this function first in overrides of this function.\n  // on completion, exsurge presumes that the bounds, the origin, and the fragment objects are\n  // all valid and prepared for higher level layout.\n  performLayout(ctxt) {\n    if (typeof this.trailingSpace === \"function\")\n      this.calculatedTrailingSpace = this.trailingSpace(ctxt);\n    else this.calculatedTrailingSpace = this.trailingSpace;\n\n    // reset the bounds and the staff notations before doing a layout\n    this.visualizers = [];\n    this.bounds = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n\n    for (var i = 0; i < this.lyrics.length; i++)\n      this.lyrics[i].recalculateMetrics(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        this.alText[i].recalculateMetrics(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].recalculateMetrics(ctxt);\n  }\n\n  // some subclasses have internal dependencies on other notations (for example,\n  // a custos can depend on a later neume which it uses to set its height).\n  // subclasses can override this function so that when the notations are\n  // altered, the subclass can correctly invalidate (and later restore) its own\n  // depedencies\n  resetDependencies() {}\n\n  // a helper function for subclasses to call after they are done performing layout...\n  finishLayout(ctxt) {\n    this.bounds.x = 0;\n\n    let language =\n      (this.lyrics[0] && this.lyrics[0].language) || ctxt.defaultLanguage;\n    // center the neume itself over the syllable, or just the first punctum\n    // if the neume is wider than the syllable + the width of a punctum, we always revert to centering just over the punctum\n    let calculateLyricX = language.centerNeume\n      ? (lyric) =>\n          (lyric.bounds.x =\n            this.bounds.width + ctxt.staffInterval < lyric.vowelSegmentWidth\n              ? this.bounds.width / 2 - lyric.origin.x\n              : this.origin.x - lyric.origin.x)\n      : (lyric) => (lyric.bounds.x = this.origin.x - lyric.origin.x);\n    this.lyrics.forEach(calculateLyricX);\n\n    this.needsLayout = false;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, 0);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      this.visualizers[i].draw(ctxt);\n\n    for (i = 0; i < this.lyrics.length; i++) this.lyrics[i].draw(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        this.translationText[i].draw(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++) this.alText[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, 0);\n  }\n\n  getInnerSvgNodes(ctxt, functionName = \"createSvgNode\") {\n    var inner = [];\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner.push(this.lyrics[i][functionName](ctxt));\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner.push(this.translationText[i][functionName](ctxt));\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner.push(this.alText[i][functionName](ctxt));\n\n    if (this.visualizers.length) {\n      let visualizers = [];\n      for (var i = 0; i < this.visualizers.length; i++)\n        visualizers.push(this.visualizers[i][functionName](ctxt, this));\n\n      if (functionName === \"createSvgTree\") {\n        inner.push(\n          QuickSvg.createSvgTree(\"g\", { class: \"Notations\" }, ...visualizers)\n        );\n      } else {\n        inner.push(\n          QuickSvg.createNode(\"g\", { class: \"Notations\" }, visualizers)\n        );\n      }\n    }\n    return inner;\n  }\n\n  getSvgProps() {\n    return {\n      // this.constructor.name will not be the same after being mangled by UglifyJS\n      class: \"ChantNotationElement \" + (this.cssClass || this.constructor.name),\n      transform: \"translate(\" + this.bounds.x + \",\" + 0 + \")\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgNode\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createNode(\"g\", svgProps, inner);\n  }\n  createSvgTree(ctxt) {\n    var inner = this.getInnerSvgNodes(ctxt, \"createSvgTree\");\n    var svgProps = this.getSvgProps();\n    svgProps.source = this;\n    return QuickSvg.createSvgTree(\"g\", svgProps, ...inner);\n  }\n\n  createSvgFragment(ctxt) {\n    var inner = \"\";\n\n    for (i = 0; i < this.lyrics.length; i++)\n      inner += this.lyrics[i].createSvgFragment(ctxt);\n\n    if (this.translationText)\n      for (i = 0; i < this.translationText.length; i++)\n        inner += this.translationText[i].createSvgFragment(ctxt);\n\n    if (this.alText)\n      for (i = 0; i < this.alText.length; i++)\n        inner += this.alText[i].createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.visualizers.length; i++)\n      inner += this.visualizers[i].createSvgFragment(ctxt, this);\n\n    return QuickSvg.createFragment(\"g\", this.getSvgProps(), inner);\n  }\n}\n\nconst __connectorSpan = new TextSpan(\" • \");\nconst __mergeAnnotationWithTextLeft = (...annotationSpans) =>\n    annotationSpans.reduce((result, spans) => {\n      if (result && result.length) {\n        if (spans && spans.length) return result.concat(__connectorSpan, spans);\n        else return result;\n      } else if (spans && spans.length) {\n        return spans;\n      }\n      return [];\n    });\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Drawing.js","export const addAccent = (vowel) =>\n  ({\n    \"Æ\": \"Ǽ\",\n    \"Œ\": \"Œ́\",\n    \"A\": \"Á\",\n    \"E\": \"É\",\n    \"I\": \"Í\",\n    \"O\": \"Ó\",\n    \"U\": \"Ú\",\n    \"Y\": \"Ý\",\n    \"æ\": \"ǽ\",\n    \"œ\": \"œ́\",\n    \"a\": \"á\",\n    \"e\": \"é\",\n    \"i\": \"í\",\n    \"o\": \"ó\",\n    \"u\": \"ú\",\n    \"y\": \"ý\"\n  }[vowel] || vowel);\n\n\n\n// WEBPACK FOOTER //\n// ./src/addAccent.js","export const makeLigature = (vowels) =>\n  ({\n    AE: \"Æ\",\n    Ae: \"Æ\",\n    ae: \"æ\",\n    OE: \"Œ\",\n    Oe: \"Œ\",\n    oe: \"œ\"\n  }[vowels] || vowels);\n\n\n\n// WEBPACK FOOTER //\n// ./src/makeLigature.js","export const greextraGlyphs = {\n  MedicaeaFlat: \"\",\n  HufnagelCustosUpShort: \"\",\n  HufnagelCustosUpLong: \"\",\n  HufnagelCustosUpMedium: \"\",\n  HufnagelCustosDownShort: \"\",\n  HufnagelCustosDownLong: \"\",\n  HufnagelCustosDownMedium: \"\",\n  MedicaeaCustosUpShort: \"\",\n  MedicaeaCustosUpLong: \"\",\n  MedicaeaCustosUpMedium: \"\",\n  MedicaeaCustosDownShort: \"\",\n  MedicaeaCustosDownLong: \"\",\n  MedicaeaCustosDownMedium: \"\",\n  MensuralCustosUpShort: \"\",\n  MensuralCustosUpLong: \"\",\n  MensuralCustosUpMedium: \"\",\n  MensuralCustosDownShort: \"\",\n  MensuralCustosDownLong: \"\",\n  MensuralCustosDownMedium: \"\",\n  MensuralFlat: \"\",\n  HufnagelFlat: \"\",\n  MedicaeaCClef: \"\",\n  MedicaeaCClefChange: \"\",\n  MedicaeaFClef: \"\",\n  MedicaeaFClefChange: \"\",\n  HufnagelCClef: \"\",\n  HufnagelCClefChange: \"\",\n  HufnagelFClef: \"\",\n  HufnagelFClefChange: \"\",\n  HugnagelCFClef: \"\",\n  HufnagelCFClefChange: \"\",\n  MensuralFlatHole: \"\",\n  HufnagelFlatHole: \"\",\n  MedicaeaFlatHole: \"\",\n  StarSix: \"\",\n  Dagger: \"\",\n  \"Bar.alt\": \"\",\n  StarHeight: \"\",\n  Cross: \"\",\n  \"RBar.alt\": \"\",\n  \"VBar.alt\": \"\",\n  Drawing1: \"\",\n  Drawing2: \"\",\n  RWithBarGoth: \"\",\n  VWithBarGoth: \"\",\n  Line1: \"\",\n  Line2: \"\",\n  Line3: \"\",\n  Line4: \"\",\n  Line5: \"\",\n  \"Cross.alt\": \"\",\n  ABarCaption: \"\",\n  RBarCaption: \"\",\n  VBarCaption: \"\",\n  ABarCaptionSC: \"\",\n  RBarCaptionSC: \"\",\n  VBarCaptionSC: \"\",\n  ABar: \"\",\n  RBar: \"\",\n  VBar: \"\",\n  ABarSC: \"\",\n  RBarSC: \"\",\n  VBarSC: \"\",\n  ABarSmall: \"\",\n  RBarSmall: \"\",\n  VBarSmall: \"\",\n  ABarSmallSC: \"\",\n  RBarSmallSC: \"\",\n  VBarSmallSC: \"\",\n  \"RBar.alt2\": \"\",\n  \"VBar.alt2\": \"\",\n  ABarCaptionSlant: \"\",\n  RBarCaptionSlant: \"\",\n  VBarCaptionSlant: \"\",\n  ABarSlant: \"\",\n  RBarSlant: \"\",\n  VBarSlant: \"\",\n  ABarSmallSlant: \"\",\n  RBarSmallSlant: \"\",\n  VBarSmallSlant: \"\"\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/greextraGlyphs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { ChantLine } from \"./Exsurge.Chant.ChantLine.js\";\nimport { InsertionCursor } from \"./Exsurge.Chant.Signs.js\";\nimport { Pitch, Rect, Step } from \"./Exsurge.Core.js\";\nimport {\n  Annotation, ChantLayoutElement,\n  ChantNotationElement,\n  GlyphCode,\n  GlyphVisualizer, QuickSvg, TextLeftRight,\n  TextSpan\n} from \"./Exsurge.Drawing.js\";\nimport { Gabc } from \"./Exsurge.Gabc.js\";\nimport { Titles } from \"./Exsurge.Titles.js\";\n\nexport var LiquescentType = {\n  None: 0,\n\n  // flags that can be combined, though of course it\n  // it doesn't make sense to combine some!\n  Large: 1 << 0,\n  Small: 1 << 1,\n  Ascending: 1 << 2,\n  Descending: 1 << 3,\n  InitioDebilis: 1 << 4,\n\n  // handy liquescent types\n  LargeAscending: (1 << 0) | (1 << 2),\n  LargeDescending: (1 << 0) | (1 << 3),\n  SmallAscending: (1 << 1) | (1 << 2),\n  SmallDescending: (1 << 1) | (1 << 3)\n};\n\nexport var NoteShape = {\n  // shapes\n  Default: 0,\n  Virga: 1,\n  Inclinatum: 2,\n  Quilisma: 3,\n  Stropha: 4,\n  Oriscus: 5\n};\n\nexport var NoteShapeModifiers = {\n  // flags which modify the shape\n  // not all of them apply to every shape of course\n  None: 0,\n  Ascending: 1 << 0,\n  Descending: 1 << 1,\n  Cavum: 1 << 2,\n  Stemmed: 1 << 3,\n  Linea: 1 << 4,\n  Reverse: 1 << 5\n};\n\n/**\n * @class\n */\nexport class Note extends ChantLayoutElement {\n  /**\n   * @para {Pitch} pitch\n   */\n  constructor(pitch) {\n    super();\n\n    if (typeof pitch !== \"undefined\") this.pitch = pitch;\n    else this.pitch = null;\n\n    this.glyphVisualizer = null;\n\n    // The staffPosition on a note is an integer that indicates the vertical position on the staff.\n    // 0 is the space just below the lowest line on the staff (equivalent to gabc 'c'). Positive numbers go up\n    // the staff, and negative numbers go down, i.e., 1 is gabc 'd', 2 is gabc 'e', -1 is gabc 'b', etc.\n    this.staffPosition = 4;\n    this.liquescent = LiquescentType.None;\n    this.shape = NoteShape.Default;\n    this.shapeModifiers = NoteShapeModifiers.None;\n\n    // notes keep track of the neume they belong to in order to facilitate layout\n    // this.neume gets set when a note is added to a neume via Neume.addNote()\n    this.neume = null;\n\n    // various markings that can exist on a note, organized by type\n    // for faster access and simpler code logic\n    this.episemata = [];\n    this.morae = []; // silly to have an array of these, but gabc allows multiple morae per note!\n\n    // these are set on the note when they are needed, otherwise, they're undefined\n    // this.ictus\n    // this.accuteAccent\n    // this.braceStart\n    // this.braceEnd\n  }\n\n  setGlyph(ctxt, glyphCode) {\n    if (this.glyphVisualizer) this.glyphVisualizer.setGlyph(ctxt, glyphCode);\n    else this.glyphVisualizer = new GlyphVisualizer(ctxt, glyphCode);\n\n    this.glyphVisualizer.setStaffPosition(ctxt, this.staffPosition);\n\n    // assign glyphvisualizer metrics to this note\n    this.bounds.x = this.glyphVisualizer.bounds.x;\n    this.bounds.y = this.glyphVisualizer.bounds.y;\n    this.bounds.width = this.glyphVisualizer.bounds.width;\n    this.bounds.height = this.glyphVisualizer.bounds.height;\n\n    this.origin.x = this.glyphVisualizer.origin.x;\n    this.origin.y = this.glyphVisualizer.origin.y;\n  }\n\n  // a utility function for modifiers\n  shapeModifierMatches(shapeModifier) {\n    if (shapeModifier === NoteShapeModifiers.None)\n      return this.shapeModifier === NoteShapeModifiers.None;\n    else return this.shapeModifier & (shapeModifier !== 0);\n  }\n\n  draw(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n\n    this.glyphVisualizer.draw(ctxt);\n  }\n\n  createSvgNode(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    this.svgNode = this.glyphVisualizer.createSvgNode(ctxt, this);\n    return this.svgNode;\n  }\n  createSvgTree(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgTree(ctxt, this);\n  }\n\n  createSvgFragment(ctxt) {\n    this.glyphVisualizer.bounds.x = this.bounds.x;\n    this.glyphVisualizer.bounds.y = this.bounds.y;\n    return this.glyphVisualizer.createSvgFragment(ctxt, this);\n  }\n}\n\nexport class Clef extends ChantNotationElement {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super();\n\n    this.isClef = true;\n    this.staffPosition = staffPosition;\n    this.octave = octave;\n    this.defaultAccidental = defaultAccidental;\n    this.activeAccidental = defaultAccidental;\n    this.keepWithNext = true;\n  }\n\n  resetAccidentals() {\n    this.activeAccidental = this.defaultAccidental;\n  }\n\n  pitchToStaffPosition(pitch) {}\n\n  performLayout(ctxt) {\n    ctxt.activeClef = this;\n\n    if (this.defaultAccidental) this.defaultAccidental.performLayout(ctxt);\n\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    // if we have a default accidental, then add a glyph for it now\n    if (this.defaultAccidental) {\n      var accidentalGlyph = this.defaultAccidental.createGlyphVisualizer(ctxt);\n      accidentalGlyph.bounds.x +=\n        this.visualizers[0].bounds.right() + ctxt.intraNeumeSpacing;\n      this.addVisualizer(accidentalGlyph);\n    }\n\n    super.finishLayout(ctxt);\n  }\n\n  static default() {\n    return __defaultDoClef;\n  }\n\n  clone() {\n    if (this.model) return this.model.clone();\n    let clone = new this.constructor(\n      this.staffPosition,\n      this.octave,\n      this.defaultAccidental\n    );\n    clone.sourceGabc = this.sourceGabc;\n    clone.sourceIndex = this.sourceIndex;\n    clone.elementIndex = this.elementIndex;\n    clone.model = this;\n    return clone;\n  }\n}\n\nexport class DoClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.leadingSpace = 0.0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Do)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition;\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.DoClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\nvar __defaultDoClef = new DoClef(7, 2);\n\nexport class FaClef extends Clef {\n  constructor(staffPosition, octave, defaultAccidental = null) {\n    super(staffPosition, octave, defaultAccidental);\n\n    this.octave = octave;\n\n    this.leadingSpace = 0;\n  }\n\n  pitchToStaffPosition(pitch) {\n    return (\n      (pitch.octave - this.octave) * 7 +\n      this.staffPosition +\n      Pitch.stepToStaffOffset(pitch.step) -\n      Pitch.stepToStaffOffset(Step.Fa)\n    );\n  }\n\n  staffPositionToPitch(staffPosition) {\n    var offset = staffPosition - this.staffPosition + 3; // + 3 because it's a fa clef (3 == offset from Do)\n    var octaveOffset = Math.floor(offset / 7);\n\n    var step = Pitch.staffOffsetToStep(offset);\n\n    if (\n      this.activeAccidental &&\n      this.activeAccidental.staffPosition === staffPosition\n    )\n      step += this.activeAccidental.accidentalType;\n\n    return new Pitch(step, this.octave + octaveOffset);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.FaClef);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TextOnly\n */\nexport class TextOnly extends ChantNotationElement {\n  constructor(sourceIndex, sourceLength) {\n    super();\n    this.sourceIndex = sourceIndex;\n    this.sourceLength = sourceLength;\n    this.sourceGabc = \"\";\n    this.trailingSpace = 0;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // add an empty glyph as a placeholder\n    this.addVisualizer(new GlyphVisualizer(ctxt, GlyphCode.None));\n\n    this.origin.x = 0;\n    this.origin.y = -ctxt.staffInterval;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport class ChantLineBreak extends ChantNotationElement {\n  constructor(justify) {\n    super();\n    this.calculatedTrailingSpace = this.trailingSpace = 0;\n    this.justify = justify;\n  }\n\n  performLayout(ctxt) {\n    // reset the bounds before doing a layout\n    this.bounds = new Rect(0, 0, 0, 0);\n  }\n\n  clone() {\n    var lb = new ChantLineBreak();\n    lb.justify = this.justify;\n\n    return lb;\n  }\n}\n\n// a chant mapping is a lightweight format independent way of\n// tracking how a chant language (e.g., gabc) has been\n// mapped to exsurge notations.\nexport class ChantMapping {\n  // source can be any object type. in the case of gabc, source is a text\n  // string that maps to a gabc word (e.g.: \"no(g)bis(fg)\").\n  // notations is an array of ChantNotationElements\n  constructor(source, notations, sourceIndex) {\n    this.source = source;\n    this.notations = notations;\n    this.sourceIndex = sourceIndex;\n  }\n}\n\n/*\n * Score, document\n */\nexport class ChantScore {\n  // mappings is an array of ChantMappings.\n  constructor(ctxt, mappings = [], useDropCap) {\n    this.mappings = mappings;\n\n    this.lines = [];\n    this.notes = [];\n    this.staffLineCount = 4;\n    if (ctxt) this.titles = new Titles(ctxt, this);\n\n    this.startingClef = null;\n\n    this.useDropCap = useDropCap;\n    this.dropCap = null;\n\n    this.annotation = null;\n\n    this.compiled = false;\n\n    this.autoColoring = true;\n    this.needsLayout = true;\n\n    // valid after chant lines are created...\n    this.bounds = new Rect();\n\n    if (ctxt) this.updateNotations(ctxt);\n  }\n\n  /**\n   * Make a copy of the score, only including the specified lines\n   * @param  {number} startLine starting index\n   * @param  {number} endLine   ending index\n   * @return {ChantScore}           the partial score\n   */\n  copyLines(startLine, endLine) {\n    let result = new ChantScore();\n    result.lines = this.lines.slice(startLine, endLine);\n    result.bounds = this.bounds.clone();\n    let lastLine = result.lines.slice(-1)[0];\n    result.bounds.height = lastLine.bounds.bottom() - lastLine.origin.y;\n    if (startLine === 0) {\n      result.titles = this.titles;\n      result.dropCap = this.dropCap;\n      result.annotation = this.annotation;\n    }\n    return result;\n  }\n\n  updateSelection(selection) {\n    this.selection = selection;\n    const elementSelection = (selection && selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let insertion = elementSelection.insertion;\n    if (\n      !insertion &&\n      selectedIndices.length === 1 &&\n      this.notes[selectedIndices[0]] instanceof TextOnly\n    ) {\n      // if there is only one selection, and its a text only, it should display as an insertion cursor:\n      insertion = { afterElementIndex: selectedIndices[0] };\n    }\n    // update the selected elements so that they can be given a .selected class when rendered\n    for (let i = 0; i < this.notes.length; ++i) {\n      let element = this.notes[i];\n      element.selected = selectedIndices.includes(i);\n    }\n    (\n      this.startingClef.model || this.startingClef\n    ).selected = selectedIndices.includes(-1);\n    for (let i = 0; i < this.lines.length; ++i) {\n      this.lines[i].insertionCursor = null;\n    }\n    // update the insertion cursor, so it can be drawn on the correct system\n    this.insertionElement = null;\n    let insertionLine = null;\n    if (insertion) {\n      if (typeof insertion.chantLine === \"number\") {\n        insertionLine = this.lines[insertion.chantLine];\n        this.insertionElement = insertionLine.startingClef;\n        insertionLine.insertionCursor = new InsertionCursor();\n      } else if (typeof insertion.afterElementIndex === \"number\") {\n        this.insertionElement = this.notes[insertion.afterElementIndex];\n        if (!this.insertionElement) {\n          insertionLine = this.lines[0];\n          this.insertionElement = insertionLine.startingClef;\n        } else if (this.insertionElement.neume) {\n          this.insertionElement = this.insertionElement.neume;\n        }\n        if (!insertionLine) {\n          insertionLine = this.insertionElement.line || this.lines[this.lines.length - 1];\n        }\n        insertionLine.insertionCursor = new InsertionCursor();\n      }\n    }\n  }\n\n  updateNotations(ctxt) {\n    var i, j, mapping, notation;\n\n    // flatten all mappings into one array for N(0) access to notations\n    this.notations = [];\n    this.notes = [];\n    this.hasLyrics = false;\n    this.hasAboveLinesText = false;\n    this.hasTranslations = false;\n    const elementSelection = (this.selection && this.selection.element) || {\n      indices: []\n    };\n    const selectedIndices = elementSelection.indices;\n    let nonNoteElementCount = 0;\n\n    // find the starting clef...\n    // start with a default clef in case the notations don't provide one.\n    this.startingClef = null;\n\n    for (i = 0; i < this.mappings.length; i++) {\n      mapping = this.mappings[i];\n      for (j = 0; j < mapping.notations.length; j++) {\n        notation = mapping.notations[j];\n        notation.score = this;\n        notation.mapping = mapping;\n\n        if (!this.startingClef) {\n          if (notation.isNeume) {\n            this.startingClef = Clef.default();\n          } else if (notation.isClef) {\n            this.startingClef = notation;\n            continue;\n          }\n        }\n\n        notation.notationIndex = this.notations.push(notation) - 1;\n        if (!this.hasLyrics && notation.hasLyrics()) this.hasLyrics = true;\n        if (!this.hasAboveLinesText && notation.alText)\n          this.hasAboveLinesText = true;\n        if (!this.hasTranslations && notation.translationText)\n          this.hasTranslations = true;\n\n        // Update this.notes and find element indices:\n        let elements = notation.notes || [notation];\n        for (let element of elements) {\n          let elementIndex = (element.elementIndex =\n            this.notes.push(element) - 1);\n          if (element instanceof Note) {\n            element.noteIndex = elementIndex - nonNoteElementCount;\n          } else {\n            ++nonNoteElementCount;\n          }\n          \n          element.selected = selectedIndices.includes(elementIndex);\n        }\n      }\n    }\n\n    // if we've reached this far and we *still* don't have a clef, then there aren't even\n    // any neumes in the score. still, set the default clef just for good measure\n    if (!this.startingClef) this.startingClef = Clef.default();\n    this.startingClef.elementIndex = -1;\n\n    // update drop cap\n    if (this.useDropCap) this.recreateDropCap(ctxt);\n    else this.dropCap = null;\n\n    this.needsLayout = true;\n  }\n\n  recreateDropCap(ctxt) {\n    this.dropCap = null;\n\n    // find the first notation with lyrics to use\n    for (var i = 0; i < this.notations.length; i++) {\n      if (\n        this.notations[i].hasLyrics() &&\n        this.notations[i].lyrics[0] !== null &&\n        this.notations[i].lyrics[0].spans &&\n        this.notations[i].lyrics[0].spans.length\n      ) {\n        let notation = this.notations[i],\n          lyrics = notation.lyrics[0];\n        if (this.useDropCap) {\n          this.dropCap = lyrics.generateDropCap(ctxt);\n        } else {\n          lyrics.dropCap = null;\n          lyrics.generateSpansFromText(ctxt, lyrics.originalText);\n        }\n        notation.needsLayout = true;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Shared layout initialization method for performLayout() and performLayoutAsync()\n   * @param  {ChantContext} ctxt\n   */\n  initializeLayout(ctxt) {\n    // setup the context\n    ctxt.activeClef = this.startingClef;\n    ctxt.notations = this.notations;\n    ctxt.currNotationIndex = 0;\n    ctxt.staffLineCount = this.staffLineCount;\n\n    if (this.dropCap) this.dropCap.recalculateMetrics(ctxt);\n\n    if (this.annotation) this.annotation.recalculateMetrics(ctxt);\n  }\n\n  // this is the the synchronous version of performLayout that\n  // process everything without yielding to any other workers/threads.\n  // good for server side processing or very small chant pieces.\n  performLayout(ctxt, force) {\n    if (!force && this.needsLayout === false) return; // nothing to do here!\n\n    ctxt.updateHyphenWidth();\n\n    this.initializeLayout(ctxt);\n\n    for (let i = 0; i < this.notations.length; i++) {\n      let notation = this.notations[i];\n      if (force || notation.needsLayout) {\n        ctxt.currNotationIndex = i;\n        notation.performLayout(ctxt);\n      }\n    }\n\n    this.needsLayout = false;\n  }\n\n  // for web applications, probably performLayoutAsync would be more\n  // apppropriate that the above performLayout, since it will process\n  // the notations without locking up the UI thread.\n  performLayoutAsync(ctxt, finishedCallback) {\n    if (this.needsLayout === false) {\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return; // nothing to do here!\n    }\n\n    if (ctxt.onFontLoaded) {\n      ctxt.onFontLoaded.push(() =>\n        this.performLayoutAsync(ctxt, finishedCallback)\n      );\n      return;\n    }\n\n    // check for sane value of hyphen width:\n    ctxt.updateHyphenWidth();\n    if (\n      !ctxt.hyphenWidth ||\n      ctxt.hyphenWidth / ctxt.textStyles.lyric.size > 0.6\n    ) {\n      setTimeout(() => {\n        this.performLayoutAsync(ctxt, finishedCallback);\n      }, 100);\n      return;\n    }\n\n    this.initializeLayout(ctxt);\n\n    setTimeout(() => this.layoutElementsAsync(ctxt, 0, finishedCallback), 0);\n  }\n\n  layoutElementsAsync(ctxt, index, finishedCallback) {\n    if (index >= this.notations.length) {\n      this.needsLayout = false;\n\n      if (finishedCallback) setTimeout(() => finishedCallback(), 0);\n\n      return;\n    }\n\n    if (index === 0) ctxt.activeClef = this.startingClef;\n\n    var timeout = new Date().getTime() + 50; // process for fifty milliseconds\n    do {\n      var notation = this.notations[index];\n      if (notation.needsLayout) {\n        ctxt.currNotationIndex = index;\n        notation.performLayout(ctxt);\n      }\n\n      index++;\n    } while (index < this.notations.length && new Date().getTime() < timeout);\n\n    // schedule the next block of processing\n    setTimeout(\n      () => this.layoutElementsAsync(ctxt, index, finishedCallback),\n      0\n    );\n  }\n\n  layoutChantLines(ctxt, width, finishedCallback) {\n    this.lines = [];\n\n    if (ctxt.mergeAnnotationWithTextLeft && this.annotation && !this.dropCap) {\n      let annotation = this.annotation,\n        annotationSpans = annotation.annotations\n          ? annotation.annotations.map((annotation) => annotation.spans)\n          : [annotation.spans];\n      this.overrideTextLeft = new TextLeftRight(ctxt, \"\", \"textLeft\");\n      if (ctxt.mapAnnotationSpansToTextLeft) {\n        annotationSpans = annotationSpans.map(ctxt.mapAnnotationSpansToTextLeft);\n      }\n      this.overrideTextLeft.spans = ctxt.mergeAnnotationWithTextLeft(\n        ...annotationSpans,\n        this.titles.textLeft && this.titles.textLeft.spans\n      );\n    } else {\n      this.overrideTextLeft = null;\n    }\n\n    var y = width > 0 ? this.titles.layoutTitles(ctxt, width) : 0;\n    var currIndex = 0;\n\n    ctxt.activeClef = this.startingClef;\n\n    var spaceBetweenSystems = ctxt.staffInterval * ctxt.spaceBetweenSystems;\n\n    do {\n      var line = new ChantLine(this);\n\n      line.buildFromChantNotationIndex(ctxt, currIndex, width);\n      currIndex = line.notationsStartIndex + line.numNotationsOnLine;\n      line.performLayout(ctxt);\n      line.elementIndex = this.lines.length;\n      this.lines.push(line);\n\n      line.bounds.y = -line.bounds.y + y;\n      y += line.bounds.height + spaceBetweenSystems;\n    } while (currIndex < this.notations.length);\n\n    var lastLine = this.lines[this.lines.length - 1];\n\n    this.bounds.x = 0;\n    this.bounds.y = 0;\n    this.bounds.width = lastLine.bounds.width;\n    this.bounds.height = y - spaceBetweenSystems;\n\n    this.pages = [this];\n\n    if (this.selection) {\n      this.updateSelection(this.selection);\n    }\n\n    if (finishedCallback) finishedCallback(this);\n  }\n\n  paginate(height) {\n    if (!height) return;\n    this.pages = [];\n    let pageHeightOffset = 0,\n      startLineIndex = 0;\n    for (let i = 1; i < this.lines.length; ++i) {\n      let line = this.lines[i];\n      let pageHeight = line.bounds.bottom() - pageHeightOffset - line.origin.y;\n\n      if (pageHeight > height) {\n        // this line will be the first on the new page\n        this.pages.push(this.copyLines(startLineIndex, i));\n        startLineIndex = i;\n        pageHeightOffset = line.bounds.y - line.origin.y;\n        line.bounds.y = line.origin.y;\n      } else {\n        // not a new page yet...update the bounds:\n        line.bounds.y -= pageHeightOffset;\n      }\n    }\n    this.pages.push(this.copyLines(startLineIndex, this.lines.length));\n  }\n\n  draw(ctxt, scale = 1) {\n    ctxt.setCanvasSize(this.bounds.width, this.bounds.height, scale);\n\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    if (this.titles) this.titles.draw(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++) this.lines[i].draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getSvgProps(ctxt, zoom) {\n    let width =\n        typeof zoom === \"number\"\n          ? zoom * this.bounds.width\n          : zoom\n          ? undefined\n          : this.bounds.width,\n      height = zoom ? undefined : this.bounds.height;\n\n    return {\n      xmlns: QuickSvg.ns,\n      \"xmlns:xlink\": QuickSvg.xlink,\n      version: \"1.1\",\n      class: \"Exsurge ChantScore\" + (ctxt.editable ? \" EditableChantScore\" : \"\"),\n      width,\n      height,\n      viewBox: [0, 0, this.bounds.width, this.bounds.height].join(\" \")\n    };\n  }\n\n  createSvgNode(ctxt) {\n    // create defs section\n    var node = [ctxt.defsNode.cloneNode(true)];\n    node[0].appendChild(ctxt.createStyleNode());\n\n    if (this.titles) node.push(this.titles.createSvgNode(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgNode(ctxt));\n\n    node = QuickSvg.createNode(\"g\", {}, node);\n\n    node = QuickSvg.createNode(\"svg\", this.getSvgProps(ctxt), node);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt, zoom) {\n    // create defs section\n    var node = [\n      QuickSvg.createSvgTree(\n        \"defs\",\n        {},\n        ...ctxt.makeDefs.map((makeDef) => makeDef.makeSvgTree()),\n        ctxt.createStyleTree()\n      )\n    ];\n\n    if (this.titles) node.push(this.titles.createSvgTree(ctxt));\n\n    for (var i = 0; i < this.lines.length; i++)\n      node.push(this.lines[i].createSvgTree(ctxt));\n\n    node = QuickSvg.createSvgTree(\"g\", {}, ...node);\n    let svgProps = this.getSvgProps(ctxt, zoom);\n    svgProps.source = this;\n    node = QuickSvg.createSvgTree(\"svg\", svgProps, node);\n\n    return node;\n  }\n\n  createSvg(ctxt) {\n    var fragment = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragment += ctxt.defs[def];\n    fragment += ctxt.createStyle();\n\n    fragment = QuickSvg.createFragment(\"defs\", {}, fragment);\n\n    if (this.titles) fragment += this.titles.createSvgFragment(ctxt);\n\n    for (var i = 0; i < this.lines.length; i++)\n      fragment += this.lines[i].createSvgFragment(ctxt);\n\n    fragment = QuickSvg.createFragment(\"g\", {}, fragment);\n\n    fragment = QuickSvg.createFragment(\"svg\", this.getSvgProps(ctxt), fragment);\n\n    return fragment;\n  }\n\n  createSvgNodeForEachLine(ctxt) {\n    var node = [];\n\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment = [\n        ctxt.defsNode.cloneNode(true),\n        this.lines[i].createSvgNode(ctxt, top)\n      ];\n      lineFragment[0].appendChild(ctxt.createStyleNode());\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createNode(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createNode(\n        \"svg\",\n        {\n          xmlns: QuickSvg.ns,\n          version: \"1.1\",\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height,\n          viewBox: [0, 0, this.bounds.width, height].join(\" \")\n        },\n        lineFragment\n      );\n      node.push(lineFragment);\n      top += height;\n    }\n    return node;\n  }\n\n  createSvgForEachLine(ctxt) {\n    var fragment = \"\",\n      fragmentDefs = \"\";\n\n    // create defs section\n    for (var def in ctxt.defs)\n      if (ctxt.defs.hasOwnProperty(def)) fragmentDefs += ctxt.defs[def];\n    fragmentDefs += ctxt.createStyle();\n\n    fragmentDefs = QuickSvg.createFragment(\"defs\", {}, fragmentDefs);\n    var top = 0;\n    for (var i = 0; i < this.lines.length; i++) {\n      var lineFragment =\n        fragmentDefs + this.lines[i].createSvgFragment(ctxt, top);\n      var height = this.lines[i].bounds.height + ctxt.staffInterval * 1.5;\n      lineFragment = QuickSvg.createFragment(\"g\", {}, lineFragment);\n      lineFragment = QuickSvg.createFragment(\n        \"svg\",\n        {\n          xmlns: QuickSvg.ns,\n          version: \"1.1\",\n          \"xmlns:xlink\": QuickSvg.xlink,\n          class: \"Exsurge ChantScore\",\n          width: this.bounds.width,\n          height: height\n        },\n        lineFragment\n      );\n      fragment += lineFragment;\n      top += height;\n    }\n    return fragment;\n  }\n\n  unserializeFromJson(data, ctxt) {\n    this.autoColoring = data[\"auto-coloring\"];\n\n    if (data.annotation !== null && data.annotation !== \"\") {\n      // create the annotation\n      this.annotation = new Annotation(ctxt, data.annotation);\n    } else this.annotation = null;\n\n    var createDropCap = data[\"drop-cap\"] === \"auto\" ? true : false;\n\n    Gabc.parseChantNotations(data.notations, this, createDropCap);\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    data[\"type\"] = \"score\";\n    data[\"auto-coloring\"] = true;\n\n    if (this.annotation !== null)\n      data.annotation = this.annotation.unsanitizedText;\n    else data.annotation = \"\";\n\n    return data;\n  }\n}\n\nexport class ChantDocument {\n  constructor() {\n    var defaults = {\n      layout: {\n        units: \"mm\",\n        \"default-font\": {\n          \"font-family\": \"Crimson\",\n          \"font-size\": 14\n        },\n        page: {\n          width: 8.5,\n          height: 11,\n          \"margin-left\": 0,\n          \"margin-top\": 0,\n          \"margin-right\": 0,\n          \"margin-bottom\": 0\n        }\n      },\n      scores: []\n    };\n\n    // default layout\n    this.copyLayout(this, defaults);\n\n    this.scores = defaults.scores;\n  }\n\n  copyLayout(to, from) {\n    to.layout = {\n      units: from.layout.units,\n      \"default-font\": {\n        \"font-family\": from.layout[\"default-font\"][\"font-family\"],\n        \"font-size\": from.layout[\"default-font\"][\"font-size\"]\n      },\n      page: {\n        width: from.layout.page.width,\n        height: from.layout.page.height,\n        \"margin-left\": from.layout.page[\"margin-left\"],\n        \"margin-top\": from.layout.page[\"margin-top\"],\n        \"margin-right\": from.layout.page[\"margin-right\"],\n        \"margin-bottom\": from.layout.page[\"margin-bottom\"]\n      }\n    };\n  }\n\n  unserializeFromJson(data) {\n    this.copyLayout(this, data);\n\n    this.scores = [];\n\n    // read in the scores\n    for (var i = 0; i < data.scores.length; i++) {\n      var score = new ChantScore();\n\n      score.unserializeFromJson(data.scores[i]);\n      this.scores.push(score);\n    }\n  }\n\n  serializeToJson() {\n    var data = {};\n\n    this.copyLayout(data, this);\n\n    data.scores = [];\n\n    // save scores...\n    for (var i = 0; i < this.scores.length; i++)\n      data.scores.push(this.scores[i].serializeToJson());\n\n    return data;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { ChantLineBreak, NoteShape, TextOnly } from \"./Exsurge.Chant.js\";\nimport {\n  BraceAttachment, BracePoint, BraceShape, HorizontalEpisemaAlignment\n} from \"./Exsurge.Chant.Markings.js\";\nimport {\n  Custos,\n  DoubleBar,\n  FullBar\n} from \"./Exsurge.Chant.Signs.js\";\nimport { Point, Rect } from \"./Exsurge.Core.js\";\nimport {\n  ChantLayoutElement, CurlyBraceVisualizer, GlyphCode, Lyric,\n  LyricArray,\n  LyricType, MarkingPositionHint, QuickSvg, RoundBraceVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\n// a chant line represents one staff line on the page. ChantLines are created by the score\n// and laid out by the page\nexport class ChantLine extends ChantLayoutElement {\n  constructor(score) {\n    super();\n\n    this.score = score;\n\n    this.notationsStartIndex = 0;\n    this.numNotationsOnLine = 0;\n    this.notationBounds = null; // Rect\n\n    this.staffLeft = 0;\n    this.staffRight = 0;\n\n    this.startingClef = null; // necessary for the layout process\n    this.custos = null;\n\n    this.justify = true;\n\n    // these are markings that exist at the chant line level rather than at the neume level.\n    this.ledgerLines = [];\n    this.braces = [];\n\n    this.nextLine = null;\n    this.previousLine = null; // for layout assistance\n\n    this.lyricLineHeight = 0; // height of each text line\n    this.lyricLineBaseline = 0; // offsets from the top of the text line to the baseline\n    this.numLyricLines = 0; // maximum count of lyrics on the same syllable\n\n    // fixme: make these configurable values from the score\n    this.spaceAfterNotations = 0; // the space between the notation bounds and the first text track\n    this.spaceBetweenTextTracks = 0; // spacing between each text track\n\n    this.lastLyrics = [];\n  }\n\n  get staffSpaces() {\n    return this.score.staffLineCount - 1;\n  }\n\n  performLayout(ctxt) {\n    // start off with a rectangle that holds at least the four staff lines\n    const staffSpaces = this.staffSpaces;\n    const staffLineCount = this.score.staffLineCount;\n    this.notationBounds = new Rect(\n      this.staffLeft,\n      -(ctxt.staffLineWeight / 2 + staffLineCount * 2 - 1 + ctxt.minSpaceAboveStaff) *\n        ctxt.staffInterval,\n      this.staffRight - this.staffLeft,\n      (ctxt.staffLineWeight + (staffSpaces * 2) + ctxt.minSpaceAboveStaff) * ctxt.staffInterval\n    );\n\n    // run through all the elements of the line and calculate the bounds of the notations,\n    // as well as the bounds of each text track we will use\n    var i;\n    var notations = this.score.notations;\n    var lastNeumeIndex =\n      this.extraTextOnlyIndex === null\n        ? this.notationsStartIndex + this.numNotationsOnLine\n        : this.extraTextOnlyIndex;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var notation = null;\n\n    this.notationBounds.union(this.startingClef.bounds);\n\n    // reset the lyric line offsets before we [re]calculate them now\n    this.lyricLineHeight = ctxt.textStyles.lyric.size * (ctxt.textStyles.lyric.lineHeight || 1.1);\n    this.lyricLineBaseline = 0;\n    this.numLyricLines = 0;\n\n    this.altLineHeight = 0;\n    this.altLineBaseline = 0;\n    this.numAltLines = 0;\n\n    this.translationLineHeight = ctxt.textStyles.translation.size * (ctxt.textStyles.translation.lineHeight || 1.1);\n    this.translationLineBaseline = 0;\n    this.numTranslationLines = 0;\n\n    const aboveLinesLineHeight = ctxt.textStyles.al.size * (ctxt.textStyles.al.lineHeight || 1.1);\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n\n      if (notation.bounds.height || notation.bounds.width)\n        this.notationBounds.union(notation.bounds);\n\n      // keep track of lyric line offsets\n      if (notation.lyrics.length && notation.lyrics[0].text) {\n        // if (notation.lyrics[0].bounds.height > this.lyricLineHeight)\n        //   this.lyricLineHeight = notation.lyrics[0].bounds.height;\n        if (notation.lyrics[0].origin.y > this.lyricLineBaseline)\n          this.lyricLineBaseline = notation.lyrics[0].origin.y;\n        if (notation.lyrics.length > this.numLyricLines)\n          this.numLyricLines = notation.lyrics.length;\n      }\n\n      if (notation.alText && this.numAltLines < notation.alText.length) {\n        if (notation.alText[0].bounds.height > this.altLineHeight)\n          this.altLineHeight = notation.alText[0].bounds.height;\n        if (notation.alText[0].origin.y > this.altLineBaseline)\n          this.altLineBaseline = notation.alText[0].origin.y;\n        if (notation.alText.length > this.numAltLines)\n          this.numAltLines = notation.alText.length;\n      }\n\n      if (\n        notation.translationText &&\n        notation.translationText[0] &&\n        notation.translationText[0].text\n      ) {\n        // if (\n        //   notation.translationText[0].bounds.height > this.translationLineHeight\n        // )\n        //   this.translationLineHeight =\n        //     notation.translationText[0].bounds.height;\n        if (notation.translationText[0].origin.y > this.translationLineBaseline)\n          this.translationLineBaseline = notation.translationText[0].origin.y;\n        if (notation.translationText.length > this.numTranslationLines)\n          this.numTranslationLines = notation.translationText.length;\n      }\n    }\n\n    if (this.custos) this.notationBounds.union(this.custos.bounds);\n\n    // add any braces to the notationBounds as well\n    for (i = 0; i < this.braces.length; i++)\n      this.notationBounds.union(this.braces[i].bounds);\n\n    // finalize the lyrics placement\n    var notationBoundsOffset =\n      this.notationBounds.bottom() +\n      ctxt.minSpaceBelowStaff * ctxt.staffInterval;\n    this.lyricLineBaseline += notationBoundsOffset;\n    this.translationLineBaseline += notationBoundsOffset;\n    this.altLineBaseline +=\n      this.notationBounds.y - this.altLineHeight - ctxt.staffInterval * 0.5;\n\n    for (i = this.notationsStartIndex; i < lastNeumeIndex; i++) {\n      notation = notations[i];\n      var offset = 0;\n      for (var j = 0; j < notation.lyrics.length; j++) {\n        notation.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n\n      if (notation.translationText) {\n        for (j = 0; j < notation.translationText.length; j++) {\n          notation.translationText[j].bounds.y =\n            offset + this.translationLineBaseline;\n          offset += this.translationLineHeight;\n        }\n      }\n\n      if (notation.alText) {\n        offset = 0;\n        for (j = 0; j < notation.alText.length; j++) {\n          notation.alText[j].bounds.y = offset + this.altLineBaseline;\n          offset -= aboveLinesLineHeight;\n        }\n      }\n    }\n\n    this.extraTextOnlyHeight = 0;\n    // handle placement of extra TextOnly elements:\n    if (ctxt.useExtraTextOnly) {\n      var extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n      if (this.extraTextOnlyIndex === null) {\n        // even if extraTextOnlyIndex is null, there might be extra lines on the last lyric if it is TextOnly:\n        let lastNotation = notations[lastNeumeIndex - 1] || {};\n        if (lastNotation.constructor === ChantLineBreak)\n          lastNotation = notations[lastNeumeIndex - 2];\n        if (\n          lastNotation.constructor === TextOnly &&\n          lastNotation.lyrics.length === 1 &&\n          lastNotation.lyrics[0].bounds.height > this.lyricLineHeight\n        ) {\n          this.extraTextOnlyHeight = this.lyricLineHeight;\n        }\n      } else {\n        let lastLyrics = null;\n        let xOffset = 0;\n        offset = (this.numLyricLines - 1) * this.lyricLineHeight;\n        offset += this.numTranslationLines * this.translationLineHeight;\n        let extraLines = 0;\n        for (i = this.extraTextOnlyIndex; i < lastIndex; i++) {\n          notation = notations[i];\n          if (!notation.lyrics[extraTextOnlyLyricIndex]) continue;\n          lastLyrics = notation.lyrics[extraTextOnlyLyricIndex];\n          if (lastLyrics.lineWidth) {\n            xOffset = this.staffRight - lastLyrics.lineWidth;\n            offset += this.lyricLineHeight;\n            extraLines++;\n          }\n          extraLines += lastLyrics.numLines - 1;\n          lastLyrics.bounds.y = offset + this.lyricLineBaseline;\n          notation.bounds.x += xOffset;\n        }\n        this.extraTextOnlyHeight = this.lyricLineHeight * extraLines;\n      }\n    }\n\n    if (this.startingClef.hasLyrics()) {\n      offset = 0;\n      for (j = 0; j < this.startingClef.lyrics.length; j++) {\n        this.startingClef.lyrics[j].bounds.y = offset + this.lyricLineBaseline;\n        offset += this.lyricLineHeight;\n      }\n    }\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.annotation !== null) {\n        // annotations use dominant-baseline to align text to the top\n        this.score.annotation.bounds.x = this.staffLeft / 2;\n        this.score.annotation.bounds.y = -ctxt.staffInterval * (staffLineCount * 2 - 1);\n        if (this.score.dropCap !== null) {\n          var lowestPossibleAnnotationY =\n            this.lyricLineBaseline -\n            this.score.annotation.bounds.height -\n            ctxt.staffInterval * ctxt.textStyles.annotation.padding -\n            this.score.dropCap.origin.y;\n          // if the annotation would overlap with the drop cap, move the annotation higher.\n          // otherwise, center the annotation in the vertical space between the top of the drop cap and the top of the staff.\n          if (lowestPossibleAnnotationY < this.score.annotation.bounds.y) {\n            this.score.annotation.bounds.y = lowestPossibleAnnotationY;\n          } else {\n            this.score.annotation.bounds.y =\n              (this.score.annotation.bounds.y + lowestPossibleAnnotationY) / 2;\n          }\n          if (this.score.annotation.bounds.y < this.notationBounds.y) {\n            this.notationBounds.y = this.score.annotation.bounds.y;\n            this.notationBounds.height +=\n              this.notationBounds.y - this.score.annotation.bounds.y;\n          }\n        }\n        this.score.annotation.bounds.y += this.score.annotation.origin.y;\n      }\n\n      if (this.score.dropCap !== null) {\n        // drop caps and annotations are drawn from their center, so aligning them\n        // horizontally is as easy as this.staffLeft / 2\n        this.score.dropCap.bounds.x = this.staffLeft / 2;\n        this.score.dropCap.bounds.y =\n          this.lyricLineBaseline - this.score.dropCap.origin.y;\n        this.notationBounds.union(this.score.dropCap.bounds);\n        this.score.dropCap.bounds.y = this.lyricLineBaseline;\n      }\n    }\n\n    if (this.numLyricLines > 0) {\n      // add up the lyric line heights to get the total height of the chant line\n      var lyricAndTextRect = new Rect(\n        0,\n        notationBoundsOffset,\n        0,\n        this.lyricLineHeight * this.numLyricLines +\n          this.extraTextOnlyHeight +\n          this.translationLineHeight * this.numTranslationLines\n      );\n      this.notationBounds.union(lyricAndTextRect);\n    }\n    if (this.numAltLines > 0) {\n      var altLineTextRect = new Rect(\n        0,\n        this.notationBounds.y -\n          this.altLineHeight -\n          0.5 * ctxt.staffInterval -\n          aboveLinesLineHeight * (this.numAltLines - 1),\n        0,\n        aboveLinesLineHeight * this.numAltLines\n      );\n      this.notationBounds.union(altLineTextRect);\n    }\n    // Ensure that there is at least minSpaceBelowStaff below the lowest staff line:\n    this.notationBounds.union(\n      new Rect(\n        0,\n        -ctxt.staffInterval, // lowest staff line\n        0,\n        (ctxt.staffLineWeight / 2 + ctxt.minSpaceBelowStaff) *\n          ctxt.staffInterval\n      )\n    );\n    var totalHeight = this.notationBounds.height;\n\n    this.bounds.x = 0;\n    this.bounds.y = this.notationBounds.y;\n    this.bounds.width = this.notationBounds.right();\n    this.bounds.height = totalHeight;\n\n    // the origin of the chant line's coordinate space is at the center line of the left extremity of the staff\n    this.origin = new Point(this.staffLeft, -this.notationBounds.y);\n  }\n\n  // TODO: remove if not necsessary\n  layoutInsertionCursor(ctxt) {\n    if (this.insertionCursor) {\n      // we have either a Notation to draw the cursor after, or the ChantLine itself when the cursor is the first thing on the line\n      this.insertionCursor.performLayout(ctxt);\n      this.insertionCursor.bounds.x =\n        this.score.insertionElement.bounds.right() +\n        ((this.score.insertionElement.trailingSpace &&\n          this.score.insertionElement.calculatedTrailingSpace) ||\n          0) /\n          2 -\n        this.insertionCursor.origin.x;\n    }\n    return this.insertionCursor;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    // draw the staff lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight,\n      y;\n    canvasCtxt.lineWidth = ctxt.staffLineWeight;\n    canvasCtxt.strokeStyle = ctxt.staffLineColor;\n\n    for (i = this.score.staffLineCount * -2 + 1; i < 0; i += 2) {\n      y = ctxt.staffInterval * i;\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(x1, y);\n      canvasCtxt.lineTo(x2, y);\n      canvasCtxt.stroke();\n    }\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      this.insertionCursor.draw(ctxt);\n    }\n\n    // draw the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      canvasCtxt.beginPath();\n      canvasCtxt.moveTo(ledgerLine.x1, y);\n      canvasCtxt.lineTo(ledgerLine.x2, y);\n      canvasCtxt.stroke();\n    }\n\n    // fixme: draw the braces\n\n    // draw the dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null) this.score.dropCap.draw(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        this.score.annotation.draw(ctxt);\n    }\n\n    // draw the notations\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      notations[i].draw(ctxt);\n\n    this.startingClef.draw(ctxt);\n\n    if (this.custos) this.custos.draw(ctxt);\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(\n    ctxt,\n    top = 0,\n    functionNames = { quickSvg: \"createNode\", elements: \"createSvgNode\" }\n  ) {\n    var inner = [];\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n    const staffSpaces = this.staffSpaces;\n    if (ctxt.editable) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"rect\", {\n          key: \"insertion\",\n          x: x1,\n          y: ctxt.staffInterval * this.score.staffLineCount * -2 + 1,\n          width: x2 - x1,\n          height: ctxt.staffInterval * 2 * staffSpaces,\n          fill: \"none\"\n        })\n      );\n    }\n\n    // create the staff lines\n    for (i = this.score.staffLineCount * -2 + 1; i < 0; i += 2) {\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          key: i,\n          x1: x1,\n          y1: ctxt.staffInterval * i,\n          x2: x2,\n          y2: ctxt.staffInterval * i,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"staffLine\"\n        })\n      );\n    }\n\n    inner = [\n      QuickSvg[functionNames.quickSvg](\"g\", { class: \"staffLines\" }, inner)\n    ];\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner.push(this.insertionCursor[functionNames.elements](ctxt));\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner.push(\n        QuickSvg[functionNames.quickSvg](\"line\", {\n          x1: ledgerLine.x1,\n          y1: y,\n          x2: ledgerLine.x2,\n          y2: y,\n          stroke: ctxt.staffLineColor,\n          \"stroke-width\": ctxt.staffLineWeight,\n          class: \"ledgerLine\"\n        })\n      );\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner.push(this.braces[i][functionNames.elements](ctxt));\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner.push(this.score.dropCap[functionNames.elements](ctxt));\n\n      if (\n        this.score.annotation !== null &&\n        (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner = inner.concat(\n          this.score.annotation[functionNames.elements](ctxt)\n        );\n    }\n\n    inner.push(this.startingClef[functionNames.elements](ctxt));\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner.push(notations[i][functionNames.elements](ctxt));\n\n    if (this.custos) inner.push(this.custos[functionNames.elements](ctxt));\n    return inner;\n  }\n\n  createSvgNode(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createNode\",\n      elements: \"createSvgNode\"\n    });\n\n    return QuickSvg.createNode(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex,\n        source: this\n      },\n      inner\n    );\n  }\n\n  createSvgTree(ctxt, top = 0) {\n    let inner = this.getInnerNodes(ctxt, top, {\n      quickSvg: \"createSvgTree\",\n      elements: \"createSvgTree\"\n    });\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      ...inner\n    );\n  }\n\n  createSvgFragment(ctxt, top = 0) {\n    var inner = \"\";\n\n    // add the chant lines\n    var i,\n      x1 = this.staffLeft,\n      x2 = this.staffRight;\n\n    // create the staff lines\n    for (i = this.score.staffLineCount * -2 + 1; i < 0; i += 2) {\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: x1,\n        y1: ctxt.staffInterval * i,\n        x2: x2,\n        y2: ctxt.staffInterval * i,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"staffLine\"\n      });\n    }\n\n    inner = QuickSvg.createFragment(\"g\", { class: \"staffLines\" }, inner);\n\n    if (this.layoutInsertionCursor(ctxt)) {\n      inner += this.insertionCursor.createSvgFragment(ctxt);\n    }\n\n    // create the ledger lines\n    for (i = 0; i < this.ledgerLines.length; i++) {\n      var ledgerLine = this.ledgerLines[i];\n      var y = ctxt.calculateHeightFromStaffPosition(ledgerLine.staffPosition);\n\n      inner += QuickSvg.createFragment(\"line\", {\n        x1: ledgerLine.x1,\n        y1: y,\n        x2: ledgerLine.x2,\n        y2: y,\n        stroke: ctxt.staffLineColor,\n        \"stroke-width\": ctxt.staffLineWeight,\n        class: \"ledgerLine\"\n      });\n    }\n\n    // add any braces\n    for (i = 0; i < this.braces.length; i++)\n      inner += this.braces[i].createSvgFragment(ctxt);\n\n    // dropCap and the annotations\n    if (this.notationsStartIndex === 0) {\n      if (this.score.dropCap !== null)\n        inner += this.score.dropCap.createSvgFragment(ctxt);\n\n      if (\n        this.score.annotation !== null &&\n        (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        // only draw it if there is a dropCap or there is no mergeAnnotationWithTextLeft\n        inner += this.score.annotation.createSvgFragment(ctxt);\n    }\n\n    inner += this.startingClef.createSvgFragment(ctxt);\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // add all of the notations\n    for (i = this.notationsStartIndex; i < lastIndex; i++)\n      inner += notations[i].createSvgFragment(ctxt);\n\n    if (this.custos) inner += this.custos.createSvgFragment(ctxt);\n\n    return QuickSvg.createFragment(\n      \"g\",\n      {\n        class: \"chantLine\",\n        transform:\n          \"translate(\" + this.bounds.x + \",\" + (this.bounds.y - top) + \")\",\n        \"element-index\": this.elementIndex\n      },\n      inner\n    );\n  }\n\n  // code below based on code by: https://gist.github.com/alexhornbake\n  //\n  // optimized for braces that are only drawn horizontally.\n  // returns svg path string ready to insert into svg doc\n  generateCurlyBraceDrawable(ctxt, x1, x2, y, isAbove) {\n    var h;\n\n    if (isAbove) h = -ctxt.staffInterval / 2;\n    else h = ctxt.staffInterval / 2;\n\n    // and q factor, .5 is normal, higher q = more expressive bracket\n    var q = 0.6;\n\n    var len = x2 - x1;\n\n    //Calculate Control Points of path,\n    var qx1 = x1;\n    var qy1 = y + q * h;\n    var qx2 = x1 + 0.25 * len;\n    var qy2 = y + (1 - q) * h;\n    var tx1 = x1 + 0.5 * len;\n    var ty1 = y + h;\n    var qx3 = x2;\n    var qy3 = y + q * h;\n    var qx4 = x1 + 0.75 * len;\n    var qy4 = y + (1 - q) * h;\n    var d =\n      \"M \" +\n      x1 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx1 +\n      \" \" +\n      qy1 +\n      \" \" +\n      qx2 +\n      \" \" +\n      qy2 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1 +\n      \" M \" +\n      x2 +\n      \" \" +\n      y +\n      \" Q \" +\n      qx3 +\n      \" \" +\n      qy3 +\n      \" \" +\n      qx4 +\n      \" \" +\n      qy4 +\n      \" T \" +\n      tx1 +\n      \" \" +\n      ty1;\n\n    return QuickSvg.createFragment(\"path\", {\n      d: d,\n      stroke: ctxt.neumeLineColor,\n      \"stroke-width\": ctxt.neumeLineWeight + \"px\",\n      fill: \"none\"\n    });\n  }\n\n  buildFromChantNotationIndex(ctxt, newElementStart, width) {\n    // todo: reset / clear the children we have in case they have data\n    var notations = this.score.notations,\n      beginningLyrics = null,\n      prev = null,\n      prevNeume = null,\n      prevLyrics = [];\n    var condensableSpaces = [];\n    this.notationsStartIndex = newElementStart;\n    this.numNotationsOnLine = 0;\n\n    this.staffLeft = 0;\n    this.paddingLeft = 0;\n\n    this.extraTextOnlyIndex = null;\n    this.extraTextOnlyLyricIndex = 0;\n\n    if (width > 0) this.staffRight = width;\n    else this.staffRight = Infinity; // no limit to staff size\n\n    // If this is the first chant line, then we have to make room for a\n    // drop cap and/or annotation, if present\n    if (this.notationsStartIndex === 0) {\n      var padding = 0;\n\n      if (this.score.dropCap !== null)\n        padding =\n          this.score.dropCap.bounds.width + this.score.dropCap.padding * 2;\n\n      if (\n        this.score.annotation !== null &&\n        (!ctxt.mergeAnnotationWithTextLeft || this.score.dropCap)\n      )\n        padding = Math.max(\n          padding,\n          this.score.annotation.bounds.width + this.score.annotation.padding * 2\n        );\n\n      this.staffLeft += padding;\n      if (this.score.dropCap !== null)\n        this.paddingLeft = (padding - this.score.dropCap.bounds.width) / 2;\n    } else {\n      prev = notations[newElementStart - 1];\n      if (\n        prev.constructor === DoubleBar &&\n        prev.hasLyrics() &&\n        (prev.lyrics.length > 1 || !prev.lyrics[0].text.match(/^(i\\.?)+j\\.?/))\n      ) {\n        beginningLyrics = prev.lyrics.map(function(lyric) {\n          var newLyric = new Lyric(\n            ctxt,\n            lyric.originalText,\n            lyric.lyricType,\n            lyric.notation,\n            lyric.notations,\n            lyric.sourceIndex\n          );\n          newLyric.elidesToNext = lyric.elidesToNext;\n          // Hide the original lyric by setting its bounds.y to an extremely high number.\n          // If the chant is re-laid out, this value will be recalculated so that it won't stay hidden.\n          lyric.bounds.y = Number.MAX_SAFE_INTEGER;\n          return newLyric;\n        });\n        var minX = beginningLyrics\n          .map(function(l) {\n            return l.bounds.x;\n          })\n          .reduce(function(a, b) {\n            return a < b ? a : b;\n          });\n        beginningLyrics.forEach(function(l) {\n          l.bounds.x -= minX;\n        });\n      }\n    }\n\n    // set up the clef...\n    // if the first notation on the line is a starting clef, then we treat it a little differently...\n    // the clef becomes this line's starting clef and we skip over the clef in the notations array\n    if (notations.length && notations[newElementStart].isClef) {\n      ctxt.activeClef = notations[newElementStart];\n      newElementStart++;\n      this.notationsStartIndex++;\n    }\n\n    // make a copy for this line to use at the beginning\n    this.startingClef = ctxt.activeClef.clone();\n    this.startingClef.performLayout(ctxt);\n    this.startingClef.bounds.x = this.staffLeft;\n\n    var curr = this.startingClef;\n\n    if (beginningLyrics) {\n      LyricArray.setNotation(beginningLyrics, curr);\n    }\n\n    // estimate how much space we have available to us\n    var rightNotationBoundary =\n      this.staffRight - Glyphs.CustosLong.bounds.width * ctxt.glyphScaling; // possible custos on the line\n    var lastTranslationTextWithEndNeume = null;\n\n    // iterate through the notations, fittng what we can on this line\n    var i,\n      j,\n      lastNotationIndex = notations.length - 1;\n\n    if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n    // if we already have a start brace on the context, we must be continuing it from the previous system.\n    if (ctxt.lastStartBrace && !ctxt.lastStartBrace.note) {\n      ctxt.lastStartBrace.note = this.startingClef;\n    }\n    var lastLyricsBeforeTextOnly;\n    var textOnlyStartIndex;\n\n    for (i = newElementStart; i <= lastNotationIndex; i++) {\n      prev = curr;\n      if (curr.constructor !== TextOnly) prevNeume = curr;\n\n      curr = notations[i];\n\n      var actualRightBoundary;\n      if (\n        i === lastNotationIndex ||\n        curr.constructor === Custos ||\n        (prev.constructor === Custos && curr.isDivider) ||\n        (curr.constructor === ChantLineBreak &&\n          prevNeume.constructor === Custos)\n      ) {\n        // on the last notation of the score, we don't need a custos or trailing space, so we use staffRight as the\n        // right boundary.\n        // Also, if the current notation is a divider and the previous was a custos, we don't need extra space\n        // because if the following notation won't fit, we can switch the order and use the custos as the end-of-the-line custos\n        // Ditto in the case of the current element being a chant line break and the previous neume a custos, because that custos will become our end-of-line custos\n        actualRightBoundary = this.staffRight;\n      } else if (i === lastNotationIndex - 1) {\n        // on the penultimate notation, make sure there is at least enough room for whichever takes up less space,\n        // between the final notation and a custos:\n        actualRightBoundary = Math.max(\n          rightNotationBoundary,\n          this.staffRight - notations[lastNotationIndex].bounds.width\n        );\n      } else {\n        // Otherwise, we use rightNotationBoundary, which leaves room for a custos...\n        actualRightBoundary = rightNotationBoundary;\n      }\n\n      // First check if we're already beyond the rightNotationBoundary (due to condensing that hasn't yet happened) and have a good element to end with\n      // but if we have 2 or fewer elements, or if the current element is a line break or a custos, we'll go ahead and try for them anyway.\n      var forceBreak =\n        !curr.isDivider &&\n        curr.constructor !== ChantLineBreak &&\n        curr.constructor !== Custos &&\n        !(\n          curr.constructor === TextOnly &&\n          curr.hasLyrics() &&\n          /^(?:[*†]|i+j\\.?)$/.test(curr.lyrics[0].text)\n        ) &&\n        lastNotationIndex - i > 1 &&\n        !prevNeume.keepWithNext &&\n        prevNeume.bounds.right() >= rightNotationBoundary;\n\n      // also force a break if we've run into extra TextOnly elements, but the current notation is not a TextOnly and has lyrics\n      forceBreak =\n        forceBreak ||\n        (this.extraTextOnlyIndex !== null &&\n          curr.constructor !== TextOnly &&\n          curr.constructor !== ChantLineBreak &&\n          curr.constructor !== Custos &&\n          curr.hasLyrics());\n\n      if (curr instanceof TextOnly && prev === prevNeume) {\n        lastLyricsBeforeTextOnly = this.lastLyrics.slice();\n        textOnlyStartIndex = i;\n      }\n      if (\n        curr instanceof TextOnly &&\n        notations[textOnlyStartIndex] &&\n        !notations[textOnlyStartIndex].hasLyrics()\n      ) {\n        // we want textOnlyStartIndex to be the first TextOnly that actually has lyrics,\n        // so if the current \"textOnlyStart\" element does not have lyrics, and we have another textOnly\n        // that does have lyrics, we will use it instead\n        textOnlyStartIndex = i;\n      }\n\n      if (curr.hasLyrics() && curr.lyrics[0].needsLayout) {\n        curr.lyrics[0].recalculateMetrics(ctxt);\n      }\n\n      // try to fit the curr element on this line.\n      // if it doesn't fit, we finish up here.\n      var fitsOnLine =\n        !forceBreak &&\n        this.positionNotationElement(\n          ctxt,\n          this.lastLyrics,\n          prevNeume,\n          curr,\n          actualRightBoundary,\n          this.extraTextOnlyIndex ? [] : condensableSpaces // no spaces are condensable once we are on extra text only lyrics\n        );\n      var candidateForExtraTextOnlyLine =\n        ctxt.useExtraTextOnly &&\n        curr.constructor === TextOnly &&\n        LyricArray.hasOnlyOneLyric(curr.lyrics) &&\n        (fitsOnLine === false || this.extraTextOnlyIndex !== null);\n      var extraTextOnlyLyricIndex;\n      if (candidateForExtraTextOnlyLine && this.extraTextOnlyIndex === null) {\n        // check to make sure there is enough text to put on the text only line:\n        extraTextOnlyLyricIndex = LyricArray.indexOfLyric(curr.lyrics);\n        if (textOnlyStartIndex === i) {\n          var currentLyric = notations[i].lyrics[extraTextOnlyLyricIndex].text;\n          if (currentLyric.length <= 1) {\n            var nextNotation = notations[i + 1];\n            candidateForExtraTextOnlyLine =\n              nextNotation &&\n              nextNotation.constructor === TextOnly &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex] &&\n              nextNotation.lyrics[extraTextOnlyLyricIndex].text.length > 0;\n          }\n        }\n      }\n      if (candidateForExtraTextOnlyLine) {\n        // a special case for TextOnly elements that don't fit on the line: since they don't have neumes associated with them, we can place this\n        // and any additional TextOnly elements just below the current lyric lines, but we can only do this if the TextOnly elements have only one\n        // line of lyrics associated with them.\n        var firstOnLine;\n        extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex;\n        if (\n          this.extraTextOnlyIndex === null &&\n          notations[textOnlyStartIndex].lyrics.length\n        ) {\n          if (\n            textOnlyStartIndex === this.notationsStartIndex ||\n            !ctxt.startExtraTextOnlyFromFirst\n          ) {\n            textOnlyStartIndex = i;\n            let lastNotationWithLyrics = notations\n              .slice(this.notationsStartIndex, i)\n              .reverse()\n              .find(notation => notation.hasLyrics());\n            lastLyricsBeforeTextOnly =\n              (lastNotationWithLyrics &&\n                lastNotationWithLyrics.lyrics.slice()) ||\n              [];\n          }\n          // go back to the first in this string of consecutive TextOnly elements.\n          this.extraTextOnlyIndex = textOnlyStartIndex;\n          extraTextOnlyLyricIndex = this.extraTextOnlyLyricIndex = LyricArray.indexOfLyric(\n            curr.lyrics\n          );\n          this.lastLyricsBeforeTextOnly = lastLyricsBeforeTextOnly;\n          this.lastLyrics = [];\n          i = textOnlyStartIndex - 1;\n          this.numNotationsOnLine =\n            textOnlyStartIndex - this.notationsStartIndex;\n          continue;\n        }\n        delete curr.lyrics[extraTextOnlyLyricIndex].lineWidth;\n        if (!fitsOnLine || i === this.extraTextOnlyIndex) {\n          curr.bounds.x = curr.lyrics[extraTextOnlyLyricIndex].origin.x;\n          let lastLyricRight = ctxt.startExtraTextOnlyFromFirst\n            ? LyricArray.getRight(this.lastLyrics) +\n              (ctxt.minLyricWordSpacing || 0)\n            : 0;\n          curr.lyrics[extraTextOnlyLyricIndex].setMaxWidth(\n            ctxt,\n            this.staffRight,\n            this.staffRight - lastLyricRight\n          );\n          firstOnLine = curr;\n        }\n        if (firstOnLine)\n          firstOnLine.lyrics[extraTextOnlyLyricIndex].lineWidth = curr.lyrics[\n            extraTextOnlyLyricIndex\n          ].getRight();\n      } else if (fitsOnLine === false) {\n        const isTextOnlyBeforeDivider = (i) => {\n          const curr = notations[i];\n          if (curr.constructor !== TextOnly) return false;\n          const firstDivider = notations.slice(i + 1).findIndex(notation => notation.isDivider);\n          if (firstDivider < 0) return false;\n          return notations.slice(i + 1, i + 1 + firstDivider).every(notation => notation.constructor === TextOnly);\n        }\n        // first check for elements that cannot begin a system: dividers and custodes\n        while (\n          this.numNotationsOnLine > 1 &&\n          (curr.isDivider || curr.constructor === Custos || isTextOnlyBeforeDivider(i))\n        ) {\n          curr = notations[--i];\n          this.numNotationsOnLine--;\n          if (this.lastLyricsBeforeTextOnly && isTextOnlyBeforeDivider(i)) {\n            delete this.lastLyricsBeforeTextOnly;\n          }\n        }\n\n        if (lastTranslationTextWithEndNeume) {\n          // console.info(notations[i - 1], lastTranslationTextWithEndNeume);\n          // TODO?: need to go back to before the last translation text start:\n        }\n\n        // count syllables and notes\n        const notationsAfterBreak = notations.slice(i + 1);\n        let countSyllables = 0;\n        let countNotes = 0;\n        if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n          countSyllables = notationsAfterBreak.filter(notation => notation.hasLyrics()).length;\n          countNotes = notationsAfterBreak.flatMap(notation => notation.notes).filter(note => !!note).length;\n        }\n\n        // check if the prev elements want to be kept with this one\n        for (j = i - 1; j > this.notationsStartIndex; j--) {\n          var cne = notations[j];\n          curr = notations[j + 1];\n\n          // curr is the first notation on the next line\n          // cne is the last notation on this line\n          if (ctxt.minSyllablesLastLine && ctxt.minNotesLastLine) {\n            countSyllables += curr.hasLyrics() ? 1 : 0;\n            countNotes += (curr.notes || []).length;\n          }\n\n          if (cne.firstWithNoWidth) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // don't let a line break occur in the middle of a translation\n          if (lastTranslationTextWithEndNeume) {\n            this.numNotationsOnLine--;\n            if (cne === lastTranslationTextWithEndNeume) {\n              lastTranslationTextWithEndNeume = null;\n            }\n            continue;\n          }\n\n          // force any notations starting with a quilisma or inclinatum (diamond) to be kept with the previous notation:\n          if (\n            curr &&\n            curr.notes &&\n            (curr.notes[0].shape === NoteShape.Quilisma ||\n              curr.notes[0].shape === NoteShape.Inclinatum)\n          ) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          if (countSyllables < ctxt.minSyllablesLastLine && countNotes < ctxt.minNotesLastLine) {\n            this.numNotationsOnLine--;\n            continue;\n          }\n\n          // if the line break is allowed (cne.allowLineBreakBeforeNext), keep this number of notations around so we can check during justification\n          // whether there would be too much space introduced between\n          if (cne.keepWithNext === true) {\n            if (cne.allowLineBreakBeforeNext && !this.maxNumNotationsOnLine)\n              this.maxNumNotationsOnLine = this.numNotationsOnLine;\n            this.numNotationsOnLine--;\n          } else break;\n        }\n        if (this.extraTextOnlyIndex && (this.notationsStartIndex + this.numNotationsOnLine) <= this.extraTextOnlyIndex) {\n          // we've cut back to before the extra text only index, so we have to remove it:\n          this.extraTextOnlyIndex = null;\n        }\n\n        // if for some reason not a single notation can fit on the line, we'd better put it on anyway, to avoid an infinite loop:\n        if (this.numNotationsOnLine === 0) this.numNotationsOnLine = 1;\n\n        // determine the neumes we can space apart, if we do end up justifying\n        curr = this.findNeumesToJustify(prevLyrics);\n\n        this.lastLyrics = prevLyrics;\n        if (this.maxNumNotationsOnLine) {\n          // Check whether we should squeeze some extra notations on the line to avoid too much space after justification:\n          // Check how much space we would have without the extra notations\n          var extraSpace = this.getWhitespaceOnRight(ctxt);\n          if (\n            extraSpace / this.toJustify.length >\n            ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals\n          ) {\n            LyricArray.mergeInArray(\n              prevLyrics,\n              notations.slice(\n                this.notationsStartIndex + this.numNotationsOnLine,\n                this.notationsStartIndex + this.maxNumNotationsOnLine\n              )\n            );\n            this.numNotationsOnLine = this.maxNumNotationsOnLine;\n            delete this.maxNumNotationsOnLine;\n          }\n        }\n\n        // if the next line begins with a fresh word, than there can be extra space between the last notation on this line and the custos:\n        let next = this.score.notations[\n          this.extraTextOnlyIndex === null\n            ? this.notationsStartIndex + this.numNotationsOnLine\n            : this.extraTextOnlyIndex\n        ];\n        if (\n          next &&\n          next.hasLyrics() &&\n          (next.lyrics[0].lyricType === LyricType.BeginningSyllable ||\n            next.lyrics[0].lyricType === LyricType.SingleSyllable)\n        ) {\n          this.toJustify.push(this.custos);\n        }\n\n        if (\n          j >= 1 &&\n          notations[j].isDivider &&\n          notations[j - 1].constructor === Custos\n        ) {\n          // reverse the order: put the divider first, and end the line with the custos.\n          prevLyrics = [];\n          for (i = j - 2; i >= this.notationsStartIndex; i--) {\n            if (notations[i].hasLyrics()) {\n              LyricArray.mergeIn(prevLyrics, notations[i].lyrics);\n              break;\n            }\n          }\n          // remove the custos and divider from the condensable spaces list, before adding the divider back, when repositioning it.\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          condensableSpaces.sum -= condensableSpaces.pop().condensable;\n          this.positionNotationElement(\n            ctxt,\n            prevLyrics,\n            notations[j - 2],\n            notations[j],\n            this.staffRight,\n            condensableSpaces\n          );\n          this.custos = notations[j - 1];\n          this.custos.bounds.x =\n            this.staffRight -\n            this.custos.bounds.width -\n            this.custos.leadingSpace;\n        }\n\n        // we are at the end of the line!\n        break;\n      }\n\n      if (curr.hasLyrics()) LyricArray.mergeIn(this.lastLyrics, curr.lyrics);\n\n      if (\n        lastTranslationTextWithEndNeume &&\n        curr === lastTranslationTextWithEndNeume.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = null;\n      } else if (\n        curr.translationText &&\n        curr.translationText.length &&\n        curr.translationText[0].endNeume\n      ) {\n        lastTranslationTextWithEndNeume = curr;\n      }\n\n      curr.line = this;\n      this.numNotationsOnLine++;\n\n      if (curr.isClef) ctxt.activeClef = curr;\n\n      // line breaks are a special case indicating to stop processing here\n      if (curr.constructor === ChantLineBreak && width > 0) {\n        this.justify =\n          curr.justify ||\n          this.extraTextOnlyIndex !== null ||\n          this.getWhitespaceOnRight(ctxt) < 0;\n        if (this.justify) this.findNeumesToJustify(prevLyrics);\n        break;\n      }\n\n      if (curr.constructor === Custos) {\n        this.custos = curr;\n      } else if (curr.isNeume) {\n        this.custos = null;\n      }\n    }\n\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine - 1;\n    var last = notations[lastIndex] || {};\n    while (\n      lastIndex > 0 &&\n      (last.constructor === ChantLineBreak ||\n        last.constructor === Custos ||\n        last.constructor === TextOnly)\n    ) {\n      last = notations[--lastIndex];\n    }\n    var isLastLine =\n      this.notationsStartIndex + this.numNotationsOnLine === notations.length;\n    if (\n      (this.justify && this.extraTextOnlyIndex !== null) ||\n      (width > 0 && isLastLine)\n    ) {\n      // this is the last chant line, or it has extra TextOnly elements at the end\n      if (!this.toJustify) this.findNeumesToJustify(prevLyrics);\n      this.justify =\n        (!isLastLine || last.isDivider) &&\n        this.getWhitespaceOnRight(ctxt) / (this.toJustify.length || 1) <=\n          ctxt.staffInterval * ctxt.maxExtraSpaceInStaffIntervals;\n    }\n\n    if (!this.custos) {\n      // create the automatic custos at the end of the line if there are neumes left in the notations\n      for (\n        i = this.notationsStartIndex + this.numNotationsOnLine;\n        i < notations.length;\n        i++\n      ) {\n        var notation = notations[i];\n\n        if (notation.isNeume) {\n          this.custos = new Custos(true);\n          ctxt.currNotationIndex = i - 1; // make sure the context knows where the custos is\n          this.custos.performLayout(ctxt);\n\n          if (this.justify) {\n            // Put the custos at the very end of the line\n            this.custos.bounds.x =\n              this.staffRight -\n              this.custos.bounds.width -\n              this.custos.leadingSpace;\n          } else {\n            this.custos.bounds.x =\n              prevNeume.bounds.right() + prevNeume.calculatedTrailingSpace;\n          }\n          // nothing more to see here...\n          break;\n        }\n      }\n    }\n\n    if (this.lastLyricsBeforeTextOnly) {\n      this.lastLyrics = this.lastLyricsBeforeTextOnly;\n      delete this.lastLyricsBeforeTextOnly;\n    }\n\n    // find the final lyric and mark it as connecting if needed.\n    if (width > 0) {\n      var whitespace = this.getWhitespaceOnRight();\n      var rightEdge = this.staffRight;\n      if (whitespace < 0) {\n        rightEdge -= whitespace;\n      }\n    }\n    i = 0;\n    while (this.lastLyrics && this.lastLyrics[i]) {\n      let lyrics = this.lastLyrics[i];\n      if (lyrics.allowsConnector()) {\n        lyrics.setNeedsConnector(true, 0);\n        if (width > 0 && ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n          whitespace = rightEdge - lyrics.getRight();\n          // shrink the hyphen if we are already out of whitespace or if we would be if we used a regular hyphen:\n          if (whitespace < 0) {\n            var minHyphenWidth = Math.max(\n              ctxt.hyphenWidth + whitespace,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n      }\n      ++i;\n    }\n\n    // if the provided width is less than zero, then set the width of the line\n    // based on the last notation\n    if (width <= 0) {\n      this.staffRight = notations[\n        this.notationsStartIndex + this.numNotationsOnLine - 1\n      ].bounds.right();\n      this.justify = false;\n    }\n\n    // Justify the line if we need to\n    this.justifyElements(ctxt, this.justify, condensableSpaces);\n\n    this.centerDividers();\n\n    this.finishLayout(ctxt);\n  }\n\n  centerDividers() {\n    var lastIndex =\n        this.extraTextOnlyIndex === null\n          ? this.notationsStartIndex + this.numNotationsOnLine\n          : this.extraTextOnlyIndex,\n      curr;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      curr = this.score.notations[i];\n\n      if (curr && curr.isDivider) {\n        var j = 1;\n        var prev = this.score.notations[i - 1];\n        var next =\n          i + 1 === lastIndex ? this.custos : this.score.notations[i + 1];\n        if (prev === next && next === this.custos) {\n          prev = this.score.notations[i - 2];\n          // force custos to right edge in this case, since it is a custos that exists\n          // regardless of line break, and would normally be before the double bar, but in this case it ends the line:\n          next.bounds.x = this.staffRight - next.bounds.width;\n        }\n        if (prev && next) {\n          //if (prev instanceof TextOnly || next instanceof TextOnly) continue;\n          var oldBoundsX = curr.bounds.x;\n          var barWidth = curr.bounds.width;\n          var leftPoint =\n              prev instanceof TextOnly && prev.hasLyrics()\n                ? prev.lyrics[0].getRight()\n                : prev.bounds.right(),\n            rightPoint =\n              next instanceof TextOnly && next.hasLyrics()\n                ? next.lyrics[0].getLeft()\n                : next.bounds.x;\n          if (prev instanceof TextOnly) {\n            let prev = this.score.notations.slice(this.notationsStartIndex, i).reverse().find(notation => !(notation instanceof TextOnly));\n            leftPoint = prev ? prev.bounds.right() : 0;\n          }\n          if (leftPoint) {\n            curr.bounds.x = (leftPoint + rightPoint - barWidth) / 2;\n          }\n          if (curr.hasLyrics()) {\n            var offset = oldBoundsX - curr.bounds.x;\n            for (j = curr.lyrics.length - 1; j >= 0; j--) {\n              curr.lyrics[j].bounds.x += offset;\n              curr.lyrics[j].needsLayout = true;\n            }\n          }\n        } else if (\n          i === lastIndex - 1 &&\n          this.justify &&\n          (curr.constructor === DoubleBar || curr.constructor === FullBar)\n        ) {\n          curr.bounds.x = this.staffRight - curr.bounds.width;\n        }\n      }\n    }\n  }\n\n  findNeumesToJustify(prevLyrics) {\n    this.toJustify = [];\n    var prev,\n      curr = null,\n      next = null,\n      nextOrCurr = null,\n      lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = nextOrCurr;\n      curr = this.score.notations[i];\n      next = curr.isAccidental && this.score.notations[++i];\n      nextOrCurr = next || curr;\n      var hasLyrics = nextOrCurr.hasLyrics();\n\n      if (!curr || !prev) continue;\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      )\n        continue;\n\n      if (prev !== null) {\n        LyricArray.mergeIn(prevLyrics, prev.lyrics);\n        if (prev.keepWithNext === true) continue;\n      }\n\n      if (\n        !curr.isDivider &&\n        prevLyrics.length &&\n        prevLyrics[0].allowsConnector() &&\n        hasLyrics\n      )\n        continue;\n\n      if (nextOrCurr.constructor === ChantLineBreak) continue;\n\n      if (nextOrCurr === this.custos && !hasLyrics) continue;\n\n      if (i === 0 && this.score.useDropCap && hasLyrics) continue;\n\n      // otherwise, we can add space before this element\n      this.toJustify.push(curr);\n    }\n    if (nextOrCurr !== null) LyricArray.mergeIn(prevLyrics, nextOrCurr.lyrics);\n    return nextOrCurr;\n  }\n\n  getWhitespaceOnRight(ctxt) {\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n    var last = notations[lastIndex - 1];\n    if (this.extraTextOnlyIndex !== null && last.constructor === TextOnly) {\n      lastIndex = this.extraTextOnlyIndex;\n      last = notations[lastIndex - 1];\n    }\n    var lastRightNeume = last\n      ? last.bounds.right() + last.calculatedTrailingSpace\n      : 0;\n    var lastLyrics = this.lastLyricsBeforeTextOnly || this.lastLyrics;\n    var lastRightLyric = lastLyrics.length\n      ? LyricArray.getRight(lastLyrics)\n      : 0;\n\n    if (this.custos) {\n      lastRightNeume += this.custos.bounds.width + this.custos.leadingSpace;\n      if (this.custos.hasLyrics()) {\n        lastRightLyric = LyricArray.getRight(this.custos.lyrics);\n      }\n    } else if (ctxt && lastIndex < notations.length) {\n      lastRightNeume += Glyphs.CustosLong.bounds.width * ctxt.glyphScaling;\n    }\n    return this.staffRight - Math.max(lastRightLyric, lastRightNeume);\n  }\n\n  justifyElements(ctxt, doJustify, condensableSpaces) {\n    var i;\n    var toJustify = this.toJustify || [];\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // if it wasn't an ideal line break, and the last note is further from the custos than it would have been from its next punctum,\n    // move the custos over.\n    // We do this first so that if it opens up any new whitespace, that gets accounted for when we do the justification\n    var lastNotation =\n      notations[this.notationsStartIndex + this.numNotationsOnLine - 1];\n    var extraSpaceBeforeCustos =\n      this.staffRight < Infinity &&\n      this.custos &&\n      lastNotation.keepWithNext &&\n      this.custos.bounds.x -\n        lastNotation.bounds.right() -\n        lastNotation.calculatedTrailingSpace;\n    if (extraSpaceBeforeCustos > 0) {\n      // first, shrink the hyphen(s) if applicable, to move the neumes closer to the custos:\n      i = 0;\n      while (this.lastLyrics && this.lastLyrics[i]) {\n        let lyrics = this.lastLyrics[i];\n        if (lyrics.allowsConnector()) {\n          var connectorWidth = lyrics.getConnectorWidth();\n          if (ctxt.minLyricWordSpacing < connectorWidth) {\n            var minHyphenWidth = Math.max(\n              connectorWidth - extraSpaceBeforeCustos,\n              this.lastLyrics.length > 1\n                ? ctxt.intraNeumeSpacing\n                : ctxt.minLyricWordSpacing\n            );\n            // we might not need to shift the syllable, but we do want to shrink the hyphen...\n            lyrics.setConnectorWidth(minHyphenWidth);\n          }\n        }\n        ++i;\n      }\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n\n    // first step of justification is to determine how much space we have to use up\n    var extraSpace = this.getWhitespaceOnRight();\n\n    if (\n      Math.abs(extraSpace) < 0.5 ||\n      (extraSpace > 0 && ((doJustify && toJustify.length === 0) || !doJustify))\n    )\n      return;\n\n    this.condensableSpaces = condensableSpaces;\n\n    var curr, prev;\n    var offset = 0;\n    var increment = extraSpace / toJustify.length;\n    var multiplier = 0;\n    var toJustifyIndex = 0;\n    if (extraSpace < 0) {\n      toJustify = condensableSpaces.filter(s => s.condensable > 0);\n      multiplier = extraSpace / condensableSpaces.sum;\n      increment = 0;\n    }\n    var nextToJustify = toJustify[toJustifyIndex++];\n    var incrementOffsetAtNextChance = false;\n    for (i = this.notationsStartIndex; i < lastIndex; i++) {\n      prev = curr;\n      curr = notations[i];\n\n      if (\n        this.extraTextOnlyIndex !== null &&\n        i >= this.extraTextOnlyIndex &&\n        curr.constructor === TextOnly\n      ) {\n        continue;\n      }\n\n      if (!multiplier && curr === this.custos) {\n        if (curr.hasLyrics()) {\n          curr.bounds.x = Math.min(\n            curr.bounds.x +\n              (this.staffRight - LyricArray.getRight(curr.lyrics)),\n            this.staffRight - curr.bounds.width\n          );\n          offset += increment;\n        } else {\n          curr.bounds.x = Math.min(\n            curr.bounds.x + offset,\n            this.staffRight - curr.bounds.width\n          );\n        }\n        continue;\n      }\n\n      if (multiplier) {\n        if (nextToJustify && nextToJustify.notation === curr) {\n          offset += multiplier * nextToJustify.condensable;\n          nextToJustify = toJustify[toJustifyIndex++];\n        }\n      } else if (nextToJustify === curr) {\n        if (prev.hasNoWidth) {\n          incrementOffsetAtNextChance = true;\n        } else {\n          offset += increment;\n        }\n        nextToJustify = toJustify[toJustifyIndex++];\n      } else if (incrementOffsetAtNextChance && !prev.hasNoWidth) {\n        incrementOffsetAtNextChance = false;\n        offset += increment;\n      }\n\n      curr.bounds.x += offset;\n    }\n\n    if (extraSpaceBeforeCustos > 0) {\n      this.custos.bounds.x =\n        lastNotation.bounds.right() + lastNotation.calculatedTrailingSpace;\n    }\n  }\n\n  handleEndBrace(ctxt, note, i) {\n    var startBrace = ctxt.lastStartBrace;\n    if (!startBrace) return;\n    // calculate the y value of the brace by iterating over all notations\n    // under/over the brace.\n    var y;\n    var k = startBrace.notationIndex;\n    var notations = this.score.notations;\n    var dy = ctxt.intraNeumeSpacing / 2; // some safe space between brace and notes.\n    var startNote = startBrace.note;\n\n    if (startBrace.isAbove) {\n      y = Math.min(\n        ctxt.calculateHeightFromStaffPosition(this.score.staffLineCount * 2),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.y - dy)\n      );\n    } else {\n      y = Math.max(\n        ctxt.calculateHeightFromStaffPosition(0),\n        ...[startNote, note]\n          .concat(notations.slice(k, i + 1))\n          .map(n => n.bounds.bottom() + dy)\n      );\n    }\n\n    var addAcuteAccent = false;\n\n    if (startBrace.shape === BraceShape.RoundBrace) {\n      this.braces.push(\n        new RoundBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove\n        )\n      );\n    } else {\n      if (startBrace.shape === BraceShape.AccentedCurlyBrace)\n        addAcuteAccent = true;\n\n      this.braces.push(\n        new CurlyBraceVisualizer(\n          ctxt,\n          startBrace.getAttachmentX(startNote),\n          note.braceEnd.getAttachmentX(note),\n          y,\n          startBrace.isAbove,\n          addAcuteAccent\n        )\n      );\n    }\n\n    delete ctxt.lastStartBrace;\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = []; // clear any existing ledger lines\n\n    var notations = this.score.notations;\n    var lastIndex = this.notationsStartIndex + this.numNotationsOnLine;\n\n    // an element needs to have a staffPosition property, as well as the standard\n    // bounds property. so it could be a note, or it could be a custos\n    // offsetX can be used to add to the position info for the element,\n    // useful in the case of notes.\n    var processElementForLedgerLine = (\n      element,\n      endElem = element,\n      staffPosition = element.staffPosition,\n      offsetX = element.neume ? element.neume.bounds.x : 0\n    ) => {\n      // do we need a ledger line for this note?\n      const ledgerLinePositionAbove = ctxt.staffLineCount * 2 + 1;\n      if (staffPosition >= ledgerLinePositionAbove || staffPosition <= -1) {\n        var x1 = offsetX + element.bounds.x - ctxt.intraNeumeSpacing;\n        var x2 =\n          offsetX +\n          endElem.bounds.x +\n          endElem.bounds.width +\n          ctxt.intraNeumeSpacing;\n\n        // round the staffPosition to the nearest line\n        if (staffPosition > 0)\n          staffPosition = staffPosition - ((staffPosition - 1) % 2);\n        else staffPosition = staffPosition - ((staffPosition + 1) % 2);\n\n        // if we have a ledger line close by, then average out the distance between the two\n        var minLedgerSeparation = ctxt.staffInterval * ctxt.minLedgerSeparation;\n\n        if (\n          this.ledgerLines.length > 0 &&\n          this.ledgerLines[this.ledgerLines.length - 1].x2 +\n            minLedgerSeparation >=\n            x1\n        ) {\n          // average out the distance\n          var half =\n            (x1 - this.ledgerLines[this.ledgerLines.length - 1].x2) / 2;\n          this.ledgerLines[this.ledgerLines.length - 1].x2 += half;\n          x1 -= half;\n        }\n\n        // never let a ledger line extend past the staff width\n        if (x2 > this.staffRight) x2 = this.staffRight;\n\n        // finally, add the ledger line\n        this.ledgerLines.push({\n          x1,\n          x2,\n          staffPosition\n        });\n      }\n    };\n\n    var episemata = []; // keep track of episemata in case we can connect some\n    var startBrace = null;\n    var minY = Number.MAX_VALUE,\n      maxY = Number.MIN_VALUE; // for braces\n\n    var positionNonLyricText = (text, neume, rightX) => {\n      text.setMaxWidth(ctxt, this.staffRight);\n      //text.bounds.x = neume.hasLyrics()? Math.min(...neume.lyrics.map(l => l.bounds.x)) : 0;\n      text.bounds.x = 0;\n      if (rightX)\n        text.bounds.x = (text.bounds.x + rightX - text.bounds.width) / 2;\n      var beyondStaffRight =\n        neume.bounds.x + text.bounds.right() - this.staffRight;\n      if (beyondStaffRight > 0) {\n        text.bounds.x -= beyondStaffRight;\n      }\n      if (neume.bounds.x + text.bounds.x < 0) {\n        text.bounds.x = -neume.bounds.x;\n      }\n    };\n\n    // make a final pass over all of the notes to add any necessary\n    // ledger lines and to smooth out episemata\n    for (var i = this.notationsStartIndex; i < lastIndex; i++) {\n      var neume = notations[i];\n\n      minY = Math.min(minY, neume.bounds.y);\n      maxY = Math.max(maxY, neume.bounds.bottom());\n\n      if (neume.constructor === Custos) {\n        processElementForLedgerLine(neume);\n        continue;\n      }\n\n      // if the AboveLinesText would extend beyond the right edge of the staff, right align it instead\n      if (neume.alText) {\n        for (var j = 0; j < neume.alText.length; j++) {\n          positionNonLyricText(neume.alText[j], neume);\n        }\n      }\n\n      // set up horizontal position of translations\n      if (neume.translationText) {\n        for (j = 0; j < neume.translationText.length; j++) {\n          var text = neume.translationText[j];\n          if (text.endNeume) {\n            var rightX = text.endNeume.hasLyrics()\n              ? text.endNeume.bounds.x +\n                Math.max(...text.endNeume.lyrics.map(l => l.bounds.right()))\n              : text.endNeume.bounds.right();\n            rightX -= neume.bounds.x;\n            positionNonLyricText(text, neume, rightX);\n          } else {\n            positionNonLyricText(text, neume);\n          }\n        }\n      }\n\n      // if it's not a neume then just skip here\n      if (!neume.isNeume) continue;\n\n      for (j = 0; j < neume.ledgerLines.length; j++) {\n        var ll = neume.ledgerLines[j];\n        processElementForLedgerLine(ll.element, ll.endElem, ll.staffPosition);\n      }\n\n      for (j = 0; j < neume.notes.length; j++) {\n        var k,\n          note = neume.notes[j];\n\n        // blend episemata as we're able\n        if (note.episemata.length === 0) episemata = [];\n        for (k = 0; k < note.episemata.length; k++) {\n          var episema = note.episemata[k];\n\n          var spaceBetweenEpisemata = 0;\n\n          // calculate the distance between the last episemata and this one...\n          // lots of code for a simple: currEpisemata.left - prevEpisemata.right\n          if (episemata.length > 0)\n            spaceBetweenEpisemata =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.right());\n\n          // we try to blend the episema if we're able.\n          if (\n            episemata.length === 0 ||\n            episemata[episemata.length - 1].positionHint !==\n              episema.positionHint ||\n            episemata[episemata.length - 1].terminating === true ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Left ||\n            episemata[episemata.length - 1].alignment ===\n              HorizontalEpisemaAlignment.Center ||\n            episema.alignment === HorizontalEpisemaAlignment.Right ||\n            episema.alignment === HorizontalEpisemaAlignment.Center ||\n            (spaceBetweenEpisemata > ctxt.intraNeumeSpacing * 2 &&\n              note.glyphVisualizer.glyphCode !== GlyphCode.None)\n          ) {\n            // start a new set of episemata to potentially blend\n            episemata = [episema];\n          } else {\n            // blend all previous with this one\n            var newY;\n\n            if (episema.positionHint === MarkingPositionHint.Below)\n              newY = Math.max(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n            else\n              newY = Math.min(\n                episema.bounds.y,\n                episemata[episemata.length - 1].bounds.y\n              );\n\n            if (episema.bounds.y !== newY) episema.bounds.y = newY;\n            else {\n              for (var l = 0; l < episemata.length; l++)\n                episemata[l].bounds.y = newY;\n            }\n\n            // extend the last episema to meet the new one\n            var newWidth =\n              neume.bounds.x +\n              episema.bounds.x -\n              (episemata[episemata.length - 1].note.neume.bounds.x +\n                episemata[episemata.length - 1].bounds.x);\n            if (newWidth < 0) {\n              newWidth *= -1;\n              episemata[episemata.length - 1].bounds.x -= newWidth;\n            }\n            episemata[episemata.length - 1].bounds.width = newWidth;\n\n            episemata.push(episema);\n          }\n        }\n\n        if (note.braceEnd) this.handleEndBrace(ctxt, note, i);\n\n        if (note.braceStart) {\n          ctxt.lastStartBrace = startBrace = note.braceStart;\n          startBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // if we still have an active brace, that means it spands two chant lines!\n    if (startBrace !== null) {\n      if (this.custos) {\n        // if the next end brace is on the first note following the line break, simply use it with the custos\n        // Do the same if there is only an accidental between\n        // otherwise, make a new end brace to work for this one, and a new start brace for the next line.\n        var nextNotation = notations[lastIndex];\n        var nextNote = nextNotation.notes && nextNotation.notes[0];\n        var nextNotationButOne = notations[lastIndex + 1];\n        var nextNoteButOne =\n          nextNotationButOne &&\n          nextNotationButOne.notes &&\n          nextNotationButOne.notes[0];\n        var braceEnd =\n          (nextNote && nextNote.braceEnd) ||\n          (nextNotation.isAccidental &&\n            nextNoteButOne &&\n            nextNoteButOne.braceEnd);\n        if (braceEnd) {\n          this.custos.braceEnd = braceEnd;\n          this.handleEndBrace(ctxt, this.custos, i);\n        } else {\n          this.braceStart = startBrace;\n          this.custos.braceEnd = new BracePoint(\n            this.custos,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Right\n          );\n          this.handleEndBrace(ctxt, this.custos, i - 1);\n          ctxt.lastStartBrace = new BracePoint(\n            null,\n            startBrace.isAbove,\n            startBrace.shape,\n            BraceAttachment.Left\n          );\n          ctxt.lastStartBrace.notationIndex = i;\n        }\n      }\n    }\n\n    // don't forget to also include the final custos, which may need a ledger line too\n    if (this.custos) processElementForLedgerLine(this.custos);\n  }\n\n  // this is where the real core of positioning neumes takes place\n  // returns true if positioning was able to fit the neume before rightNotationBoundary.\n  // returns false if cannot fit before given right margin.\n  // fixme: if this returns false, shouldn't we set the connectors on prev to be activated?!\n  positionNotationElement(\n    ctxt,\n    prevLyrics,\n    prev,\n    curr,\n    rightNotationBoundary,\n    condensableSpaces = []\n  ) {\n    if (!condensableSpaces.hasOwnProperty(\"sum\")) condensableSpaces.sum = 0;\n    var i,\n      space = { notation: curr },\n      fixedX = false;\n\n    // To begin we just place the current notation right after the previous,\n    // irrespective of lyrics.\n    // But if the previous neume was part of a polyphonic \"no width\" group and the current is not, or is of a separate group,\n    // we force it to have the same x as the previous group.\n    if (\n      (!curr.hasNoWidth || curr.firstWithNoWidth === curr) &&\n      prev.firstWithNoWidth\n    ) {\n      curr.bounds.x = prev.firstWithNoWidth.bounds.x;\n      fixedX = true;\n    } else {\n      curr.bounds.x = prev.bounds.right();\n    }\n\n    if (\n      (curr.constructor === TextOnly && this.extraTextOnlyIndex === null) ||\n      (!curr.hasLyrics() && prev.calculatedTrailingSpace < 0)\n    ) {\n      // We transfer over the trailing space from the previous neume if the current neume is text only,\n      // so that the text only neume has a better chance at not needing a connector.\n      curr.calculatedTrailingSpace = prev.calculatedTrailingSpace;\n      if (curr.hasLyrics())\n        curr.calculatedTrailingSpace -= curr.lyrics[0].bounds.width;\n      if (curr.constructor === TextOnly && curr.lyrics.length === 1) {\n        curr.lyrics[0].setMaxWidth(\n          ctxt,\n          this.staffRight,\n          this.staffRight -\n            LyricArray.getRight(prevLyrics) -\n            ctxt.minLyricWordSpacing\n        );\n      }\n    } else if (!fixedX) {\n      curr.bounds.x += prev.calculatedTrailingSpace;\n    }\n\n    if (\n      curr.hasLyrics() &&\n      !prev.isDivider &&\n      !prev.isAccidental &&\n      this.numNotationsOnLine > 0 &&\n      (curr.lyrics[0].lyricType === LyricType.SingleSyllable ||\n        curr.lyrics[0].lyricType === LyricType.BeginningSyllable)\n    ) {\n      curr.bounds.x += ctxt.intraNeumeSpacing * ctxt.interVerbalMultiplier;\n    }\n    if (curr.hasNoWidth || fixedX) {\n      space.total = space.condensable = 0;\n    } else if (\n      this.extraTextOnlyIndex !== null &&\n      curr.constructor === TextOnly\n    ) {\n      curr.bounds.x = 0;\n      space.total = space.condensable = 0;\n    } else {\n      space.total = curr.bounds.x - prev.bounds.right();\n      space.condensable = space.total * ctxt.condensingTolerance;\n    }\n\n    // if the previous notation has no lyrics, then we simply make sure the\n    // current notation with lyrics is in the bounds of the line\n    if (prevLyrics.length === 0) {\n      var maxRight = curr.bounds.right() + curr.calculatedTrailingSpace;\n\n      // if the lyric left is negative, then offset the neume appropriately\n      for (i = 0; i < curr.lyrics.length; i++) {\n        let currLyric = curr.lyrics[i];\n        // we hope for the best!\n        // but always use a connector if the lyric has original text that was all used up for the drop cap.\n        let needsConnector =\n          currLyric.allowsConnector() &&\n          currLyric.dropCap &&\n          currLyric.originalText &&\n          !currLyric.text;\n        currLyric.setNeedsConnector(needsConnector);\n        let minLeft = this.staffLeft - this.paddingLeft;\n\n        if (currLyric.getLeft() < minLeft)\n          curr.bounds.x -= currLyric.getLeft() - minLeft;\n\n        space.condensable = Math.min(\n          space.condensable,\n          currLyric.getLeft() - minLeft\n        );\n        maxRight = Math.max(maxRight, currLyric.getRight());\n      }\n\n      if (\n        maxRight >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    } else {\n      if (curr.firstOfSyllable && prevLyrics.length && !curr.hasLyrics()) {\n        curr.bounds.x = Math.max(curr.bounds.x, prevLyrics[0].getRight());\n        space.total = curr.bounds.x - prev.bounds.right();\n        space.condensable = space.total * ctxt.condensingTolerance;\n      }\n    }\n\n    // if the curr notation has no lyrics, then simply check whether there is enough room\n    if (curr.hasLyrics() === false) {\n      if (\n        curr.bounds.right() + curr.calculatedTrailingSpace >\n        rightNotationBoundary + condensableSpaces.sum + space.condensable\n      )\n        return false;\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we have multiple lyrics on the current or the previous notation,\n    // we will have to run several passes over each set of lyrics:\n\n    // on the first pass, we will check the absolute left-most placement of the new syllables\n    // we will make additional passes until everything is stable\n    do {\n      var hasShifted = false;\n      var atLeastOneWithoutConnector = false;\n      for (i = 0; i < curr.lyrics.length; i++) {\n        if (!curr.lyrics[i].originalText) continue;\n        var prevLyricRight = 0;\n        let condensableSpacesSincePrevLyric = [];\n        let condensableSpaceSincePrevLyric = null;\n        if (i < prevLyrics.length && prevLyrics[i]) {\n          prevLyricRight = prevLyrics[i].getRight();\n          let notationI = condensableSpaces\n            .map(s => s.notation)\n            .lastIndexOf(prevLyrics[i].notation);\n          if (notationI >= 0) {\n            condensableSpacesSincePrevLyric = condensableSpaces.slice(\n              notationI + 1\n            );\n            condensableSpacesSincePrevLyric.sum = condensableSpacesSincePrevLyric\n              .map(s => s.condensable)\n              .reduce((a, b) => a + b, 0);\n          } else {\n            condensableSpacesSincePrevLyric.sum = 0;\n          }\n        }\n\n        curr.lyrics[i].setNeedsConnector(false); // we hope for the best!\n        var currLyricLeft = curr.lyrics[i].getLeft();\n        if (!prevLyrics[i] || prevLyrics[i].allowsConnector() === false) {\n          // No connector needed, but include space between words if necessary!\n          let extraSpace = currLyricLeft - prevLyricRight - ctxt.minLyricWordSpacing;\n          if (extraSpace < 0) {\n            // push the current element over a bit.\n            let shift =\n              prevLyricRight + ctxt.minLyricWordSpacing - currLyricLeft;\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            hasShifted = shift > 0.5;\n          } else {\n            condensableSpaceSincePrevLyric = extraSpace;\n          }\n        } else {\n          // we may need a connector yet...\n          if (\n            prevLyricRight + 0.1 >\n            currLyricLeft -\n              condensableSpacesSincePrevLyric.sum -\n              space.condensable\n          ) {\n            // in this case, the lyric elements actually overlap.\n            // so nope, no connector needed. instead, we just place the lyrics together\n            // fixme: for better text layout, we could actually use the kerning values\n            // between the prev and curr lyric elements!\n            let shift = prevLyricRight - currLyricLeft;\n            if (shift < -0.1) {\n              // in this case, the spacing needs to be condensed in the neumes since the last lyric...\n              let multiplier =\n                shift /\n                (condensableSpacesSincePrevLyric.sum + space.condensable);\n              let offset = 0;\n              condensableSpacesSincePrevLyric.forEach(s => {\n                offset += multiplier * s.condensable;\n                s.notation.bounds.x += offset;\n              });\n            }\n            curr.bounds.x += shift;\n            condensableSpaceSincePrevLyric = 0;\n            atLeastOneWithoutConnector = true;\n            hasShifted = shift > 0.5;\n          } else {\n            // bummer, looks like we couldn't merge the syllables together. Better add a connector...\n            if (ctxt.minLyricWordSpacing < ctxt.hyphenWidth) {\n              var spaceBetweenSyls = currLyricLeft - prevLyricRight;\n              if (spaceBetweenSyls < ctxt.hyphenWidth) {\n                var minHyphenWidth =\n                  prevLyrics.length > 1\n                    ? ctxt.intraNeumeSpacing\n                    : ctxt.minLyricWordSpacing;\n                // we might not need to shift the syllable, but we do want to shrink the hyphen...\n                prevLyrics[i].setConnectorWidth(\n                  Math.max(minHyphenWidth, spaceBetweenSyls)\n                );\n              }\n            }\n            prevLyrics[i].setNeedsConnector(true);\n            prevLyricRight = prevLyrics[i].getRight();\n\n            if (prevLyricRight + 0.1 > currLyricLeft) {\n              let shift = prevLyricRight - currLyricLeft;\n              curr.bounds.x += shift;\n              condensableSpaceSincePrevLyric = 0;\n              hasShifted = shift > 0.5;\n            } else {\n              condensableSpaceSincePrevLyric = currLyricLeft - prevLyricRight;\n            }\n          }\n        }\n\n        if (condensableSpaceSincePrevLyric !== null) {\n          if (\n            condensableSpaceSincePrevLyric <\n            condensableSpacesSincePrevLyric.sum + space.condensable\n          ) {\n            // reduce condensable space so that lyrics retain at least the width of a space character between words:\n            let multiplier = condensableSpaceSincePrevLyric / (condensableSpacesSincePrevLyric.sum + space.condensable);\n            space.condensable *= multiplier;\n            if (condensableSpacesSincePrevLyric.sum) {\n              condensableSpacesSincePrevLyric.forEach(space => {\n                space.condensable *= multiplier;\n              });\n              condensableSpaces.sum = condensableSpaces\n                .map(s => s.condensable)\n                .reduce((a, b) => a + b, 0);\n            }\n          }\n        }\n      }\n    } while (\n      curr.lyrics.length > 1 &&\n      hasShifted &&\n      atLeastOneWithoutConnector\n    );\n\n    for (i = Math.min(curr.lyrics.length, prevLyrics.length) - 1; i >= 0; i--) {\n      let pLyrics = prevLyrics[i];\n      if (pLyrics.needsConnector && pLyrics.connectorWidth) {\n        currLyricLeft = curr.lyrics[i].getLeft();\n        prevLyricRight = pLyrics.getRight() - pLyrics.connectorWidth;\n        spaceBetweenSyls = currLyricLeft - prevLyricRight;\n        if (spaceBetweenSyls >= ctxt.hyphenWidth) spaceBetweenSyls = 0;\n        pLyrics.setConnectorWidth(spaceBetweenSyls);\n      }\n    }\n\n    if (\n      curr.bounds.right() + curr.calculatedTrailingSpace <\n        rightNotationBoundary + condensableSpaces.sum + space.condensable &&\n      LyricArray.getRight(curr.lyrics, true) <=\n        this.staffRight + condensableSpaces.sum + space.condensable\n    ) {\n      if (prev.isAccidental) {\n        // move the previous accidental up next to the current note:\n        let shift =\n          curr.bounds.x -\n          prev.bounds.width -\n          prev.calculatedTrailingSpace -\n          prev.bounds.x;\n        prev.bounds.x += shift;\n        if (Math.abs(shift) > 0.1) {\n          let lastCondensable = condensableSpaces[condensableSpaces.length - 1];\n          condensableSpaces.sum -= lastCondensable.condensable;\n          lastCondensable.condensable = 0;\n        }\n      }\n      condensableSpaces.push(space);\n      condensableSpaces.sum += space.condensable;\n      return true;\n    }\n\n    // if we made it this far, then the element won't fit on this line.\n    return false;\n  }\n\n  /**\n   * Find the notation closest to x without going past it\n   * @param {number} x\n   */\n  bisectNotationAtX(x, useMidpoint = true) {\n    let minIndex = -1,\n      maxIndex = Math.min(this.numNotationsOnLine, Infinity),\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1),\n      notations = this.score.notations.slice(\n        this.notationsStartIndex,\n        this.notationsStartIndex + this.numNotationsOnLine\n      );\n\n    while (minIndex < curIndex) {\n      let notation = notations[curIndex];\n      let notationX = notation.bounds.x;\n      if (notationX > x) {\n        maxIndex = curIndex;\n      } else {\n        minIndex = curIndex;\n      }\n      curIndex = minIndex + ((maxIndex - minIndex) >> 1);\n    }\n    let notation = notations[curIndex];\n    if (\n      useMidpoint &&\n      notation &&\n      notation.bounds.width === 0 &&\n      curIndex + 1 < notations.length\n    ) {\n      let nextNotation = notations[curIndex + 1],\n        closenessToLeft = x - notation.bounds.x,\n        closenessToRight = nextNotation.bounds.x - x;\n      if (nextNotation.bounds.width === 0 && closenessToRight < closenessToLeft)\n        ++curIndex;\n    }\n    return notations[curIndex];\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.ChantLine.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { NoteShape } from \"./Exsurge.Chant.js\";\nimport {\n  ChantLayoutElement,\n  GlyphCode,\n  GlyphVisualizer,\n  MarkingPositionHint,\n  QuickSvg\n} from \"./Exsurge.Drawing.js\";\n\nexport class Accent extends GlyphVisualizer {\n  constructor(ctxt, note, glyphCode = GlyphCode.AcuteAccent) {\n    super(ctxt, glyphCode);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Above;\n  }\n\n  performLayout(ctxt) {\n    this.bounds.x = this.note.bounds.x + this.bounds.width / 2; // center on the note itself\n\n    // this puts the acute accent either over the staff lines, or over the note if the\n    // note is above the staff lines\n    this.setStaffPosition(ctxt, Math.max(this.note.staffPosition + 1, 2 * ctxt.staffLineCount));\n  }\n}\n\n// for positioning markings on notes\nexport var HorizontalEpisemaAlignment = {\n  Default: 0,\n  Left: 1,\n  Center: 2,\n  Right: 3\n};\n\n/*\n * HorizontalEpisema\n *\n * A horizontal episema marking is it's own visualizer (that is, it implements createSvgFragment)\n */\nexport class HorizontalEpisema extends ChantLayoutElement {\n  constructor(note) {\n    super();\n\n    this.note = note;\n\n    this.positionHint = MarkingPositionHint.Default;\n    this.terminating = false; // indicates if this episema should terminate itself or not\n    this.alignment = HorizontalEpisemaAlignment.Default;\n  }\n\n  performLayout(ctxt) {\n    // following logic helps to keep the episemata away from staff lines if they get too close\n\n    var y = 0,\n      step;\n    var minDistanceAway = ctxt.staffInterval * 0.25; // min distance from neume\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    var ledgerLine = this.note.neume.ledgerLines[0] || {};\n    var punctumInclinatumShorten = false;\n\n    if (glyphCode === GlyphCode.PunctumInclinatum) {\n      let notes = this.note.neume.notes,\n        index = notes.indexOf(this.note),\n        prevNote = notes[index - 1];\n      if (\n        prevNote &&\n        prevNote.glyphVisualizer.glyphCode === GlyphCode.PunctumInclinatum &&\n        prevNote.staffPosition - this.note.staffPosition === 1\n      ) {\n        punctumInclinatumShorten = true;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Below) {\n      y = this.note.bounds.bottom() + minDistanceAway; // the highest the line could be at\n      // convert y to be based around center Y between top and bottom staff lines so that it is symmetric:\n      y += ctxt.staffLineCount * ctxt.staffInterval;\n\n      if (glyphCode === GlyphCode.None)\n        // correction for episema under the second note of a porrectus\n        y += ctxt.staffInterval / 2;\n      step = Math.ceil(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step + 3 / 4 + (y - minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.ceil((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // if it's an odd step, that means we're on a staff line,\n        // so we shift to between the staff line\n        if (Math.abs(step) % 2 === 1) {\n          if (Math.abs(step) < ctxt.staffLineCount || ctxt.convertStaffPositionToSymmetric(ledgerLine.staffPosition) === -step) {\n            step += 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step += 1 / 3;\n          }\n        }\n      }\n    } else {\n      y = this.note.bounds.y - minDistanceAway; // the lowest the line could be at\n      // convert y to be based around center Y between top and bottom staff lines so that it is symmetric:\n      y += ctxt.staffLineCount * ctxt.staffInterval;\n\n      step = Math.floor(y / ctxt.staffInterval);\n      // if there's enough space, center the episema between the punctum and the next staff line\n      if (step % 2 === 0) {\n        step = (step - 3 / 4 + (y + minDistanceAway) / ctxt.staffInterval) / 2;\n      } else {\n        // otherwise, find nearest acceptable third between staff lines (or staff line)\n        step = (Math.floor((1.5 * y) / ctxt.staffInterval - 0.5) * 2 + 1) / 3;\n\n        // find nearest acceptable third between staff lines (or staff line)\n        if (Math.abs(step) % 2 === 1) {\n          // if it was a staff line, we need to adjust\n          if (Math.abs(step) < ctxt.staffLineCount || ctxt.convertStaffPositionToSymmetric(ledgerLine.staffPosition) === -step) {\n            step -= 2 / 3;\n          } else {\n            // no ledger line, but we don't want the episema to be at exactly the same height the ledger line would occupy:\n            step -= 1 / 3;\n          }\n        }\n      }\n    }\n\n    y = (step - ctxt.staffLineCount) * ctxt.staffInterval;\n\n    var width = this.note.bounds.width;\n    var x = this.note.bounds.x;\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      width = ctxt.staffInterval;\n    else if (glyphCode === GlyphCode.None) {\n      width = ctxt.staffInterval;\n      x -= width;\n    } else if (punctumInclinatumShorten) {\n      width *= 2 / 3;\n      x += 0.5 * width;\n    } else if (glyphCode === GlyphCode.PunctumInclinatumLiquescent) {\n      width *= 2 / 3;\n      x += 0.25 * width;\n    }\n\n    // also, the position hint can affect the x/width of the episema\n    if (this.alignment === HorizontalEpisemaAlignment.Left) {\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Center) {\n      x += width * 0.1;\n      width *= 0.8;\n    } else if (this.alignment === HorizontalEpisemaAlignment.Right) {\n      x += width * 0.2;\n      width *= 0.8;\n    }\n\n    this.bounds.x = x;\n    this.bounds.y = y - ctxt.episemaLineWeight / 2;\n    this.bounds.width = width;\n    this.bounds.height = ctxt.episemaLineWeight;\n\n    this.origin.x = 0;\n    this.origin.y = 0;\n  }\n\n  draw(ctxt) {\n    var canvasCtxt = ctxt.canvasCtxt;\n\n    canvasCtxt.fillStyle = ctxt.neumeLineColor;\n\n    canvasCtxt.fillRect(\n      this.bounds.x,\n      this.bounds.y,\n      this.bounds.width,\n      this.bounds.height\n    );\n  }\n\n  getSvgProps(ctxt) {\n    return {\n      x: this.bounds.x,\n      y: this.bounds.y,\n      width: this.bounds.width,\n      height: this.bounds.height,\n      fill: ctxt.neumeLineColor,\n      class: \"horizontalEpisema\"\n    };\n  }\n\n  createSvgNode(ctxt) {\n    return QuickSvg.createNode(\"rect\", this.getSvgProps(ctxt));\n  }\n  createSvgTree(ctxt) {\n    return QuickSvg.createSvgTree(\"rect\", this.getSvgProps(ctxt));\n  }\n\n  createSvgFragment(ctxt) {\n    return QuickSvg.createFragment(\"rect\", this.getSvgProps(ctxt));\n  }\n}\n\n/*\n * Ictus\n */\nexport class Ictus extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.VerticalEpisemaAbove);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n  }\n\n  performLayout(ctxt) {\n    var glyphCode = this.note.glyphVisualizer.glyphCode;\n    // we have to place the ictus further from the note in some cases to avoid a collision with an episema on the same note:\n    var positionHint = this.positionHint || MarkingPositionHint.Below;\n    var staffPosition =\n      this.note.staffPosition +\n      (positionHint === MarkingPositionHint.Above ? 1 : -1);\n    var collisionWithEpisema =\n      this.note.episemata.length > 0 &&\n      (this.note.episemata[0].positionHint || MarkingPositionHint.Above) ===\n        positionHint;\n    var horizontalOffset;\n    var verticalOffset = 1;\n    var shortOffset = -0.2;\n    var extraOffset = 0;\n    var collisionWithStaffLine =\n      staffPosition % 2 &&\n      (Math.abs(ctxt.convertStaffPositionToSymmetric(staffPosition)) < ctxt.staffLineCount ||\n        (this.note.neume.ledgerLines[0] || {}).staffPosition === staffPosition);\n\n    // The porrectus requires special handling of the note width,\n    // otherwise the width is just that of the note itself\n    if (\n      glyphCode === GlyphCode.Porrectus1 ||\n      glyphCode === GlyphCode.Porrectus2 ||\n      glyphCode === GlyphCode.Porrectus3 ||\n      glyphCode === GlyphCode.Porrectus4\n    )\n      horizontalOffset = ctxt.staffInterval / 2;\n    else if (glyphCode === GlyphCode.None) {\n      horizontalOffset = -ctxt.staffInterval / 2;\n    } else {\n      horizontalOffset = this.note.bounds.width / 2;\n      if (\n        glyphCode === GlyphCode.PunctumInclinatum &&\n        !collisionWithStaffLine &&\n        !collisionWithEpisema\n      ) {\n        extraOffset = 0.3;\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      glyphCode = GlyphCode.VerticalEpisemaAbove;\n      verticalOffset *= -1;\n    } else {\n      glyphCode = GlyphCode.VerticalEpisemaBelow;\n    }\n    if (collisionWithEpisema) {\n      extraOffset = 0.4;\n    }\n    verticalOffset *=\n      ctxt.staffInterval *\n      (extraOffset + (collisionWithStaffLine ? 0.3 : shortOffset));\n\n    this.setGlyph(ctxt, glyphCode);\n    this.setStaffPosition(ctxt, staffPosition);\n\n    this.bounds.x = this.note.bounds.x + horizontalOffset - this.origin.x;\n    this.bounds.y += verticalOffset;\n  }\n}\n\n/*\n * Mora\n */\nexport class Mora extends GlyphVisualizer {\n  constructor(ctxt, note) {\n    super(ctxt, GlyphCode.Mora);\n    this.note = note;\n    this.positionHint = MarkingPositionHint.Default;\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n  }\n\n  performLayout(ctxt) {\n    this.setGlyph(ctxt, this.glyphCode);\n    this.horizontalOffset = ctxt.staffInterval / 2 + this.origin.x;\n    var staffPosition = this.note.staffPosition;\n\n    this.setStaffPosition(ctxt, staffPosition);\n\n    var verticalOffset = 0;\n    // First, we need to find the next note in the neume.\n    var noteIndex = this.note.neume.notes.indexOf(this.note);\n    var nextNote;\n    if (noteIndex >= 0) {\n      ++noteIndex;\n      if (this.note.neume.notes.length > noteIndex) {\n        nextNote = this.note.neume.notes[noteIndex];\n        if (\n          nextNote.morae &&\n          nextNote.morae.length &&\n          this.note.neume.notes.length === noteIndex + 1\n        ) {\n          // this note is the second to last in its neume, and the last note also has a mora\n          this.horizontalOffset +=\n            nextNote.bounds.right() - this.note.bounds.right();\n        } else if (nextNote.bounds.right() > this.note.bounds.right()) {\n          // center the dot over the following note.\n          this.horizontalOffset =\n            (nextNote.bounds.right() -\n              this.note.bounds.right() -\n              this.bounds.right()) /\n            2;\n        } else {\n          nextNote = null;\n        }\n      } else if (this.note.neume.notes.length === noteIndex) {\n        // this note is the last in its neume:\n        if (this.note.neume.trailingSpace === 0) {\n          // if this was the last note in its neume, we only care about the next note if there is no trailing space at the end of this neume.\n          var notationIndex = this.note.neume.score.notations.indexOf(\n            this.note.neume\n          );\n          if (notationIndex >= 0) {\n            var nextNotation = this.note.neume.score.notations[\n              notationIndex + 1\n            ];\n            if (nextNotation && nextNotation.notes) {\n              nextNote = nextNotation.notes[0];\n            }\n          }\n        } else if (this.note.shape !== NoteShape.Inclinatum) {\n          this.note.neume.calculatedTrailingSpace += this.origin.x;\n        }\n      }\n    }\n\n    if (this.positionHint === MarkingPositionHint.Above) {\n      if (staffPosition % 2 === 0) verticalOffset -= ctxt.staffInterval * 1.75;\n      else verticalOffset -= ctxt.staffInterval * 0.75;\n    } else if (this.positionHint === MarkingPositionHint.Below) {\n      if (staffPosition % 2 === 0) verticalOffset += ctxt.staffInterval * 1.75;\n      else verticalOffset += ctxt.staffInterval * 0.75;\n    } else {\n      if (staffPosition % 2 === 0) {\n        // if the note is in a space and followed by a note on the line below, we often want to move the mora dot up slightly so that it is centered\n        // between the top of the note's space and the top of the following note.\n        if (nextNote && nextNote.staffPosition === staffPosition - 1) {\n          verticalOffset -= ctxt.staffInterval * 0.25;\n        }\n      } else {\n        verticalOffset -= ctxt.staffInterval * 0.75;\n      }\n    }\n    this.bounds.x = this.horizontalOffset + this.note.bounds.right();\n    this.bounds.y += verticalOffset;\n  }\n}\n\n// indicates the shape of the brace\nexport var BraceShape = {\n  RoundBrace: 0,\n  CurlyBrace: 1,\n  AccentedCurlyBrace: 2\n};\n\n// indicates how the brace is alignerd to the note to which it's connected\nexport var BraceAttachment = {\n  Left: 0,\n  Right: 1\n};\n\nexport class BracePoint extends ChantLayoutElement {\n  constructor(note, isAbove, shape, attachment) {\n    super();\n\n    this.note = note;\n    this.isAbove = isAbove;\n    this.shape = shape;\n    this.attachment = attachment;\n  }\n\n  getAttachmentX(note) {\n    if (!note) note = this.note;\n    if (this.attachment === BraceAttachment.Left)\n      return (note.neume ? note.neume.bounds.x : 0) + note.bounds.x;\n    else return (note.neume ? note.neume.bounds.x : 0) + note.bounds.right();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Markings.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Step } from \"./Exsurge.Core.js\";\nimport {\n  ChantNotationElement, DividerLineVisualizer, GlyphCode,\n  GlyphVisualizer\n} from \"./Exsurge.Drawing.js\";\n\n/*\n *\n */\nexport class Custos extends ChantNotationElement {\n  // if auto is true, then the custos will automatically try to determine it's height based on\n  // subsequent notations\n  constructor(auto = false) {\n    super();\n    this.auto = auto;\n    this.staffPosition = 2; // default sane value\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    if (this.auto) {\n      var neume = ctxt.findNextNeume();\n\n      if (neume)\n        this.staffPosition = ctxt.activeClef.pitchToStaffPosition(\n          neume.notes[0].pitch\n        );\n\n      // in case there was a weird fa/do clef change, let's sanitize the staffPosition by making sure it is\n      // within reasonable bounds\n      while (this.staffPosition < -2) this.staffPosition += 7;\n\n      while (this.staffPosition > 2 * ctxt.staffLineCount + 2) this.staffPosition -= 7;\n    }\n\n    var glyph = new GlyphVisualizer(\n      ctxt,\n      Custos.getGlyphCode(this.staffPosition, ctxt.staffLineCount)\n    );\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n    this.addVisualizer(glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  // called when layout has changed and our dependencies are no longer good\n  resetDependencies() {\n    // we only need to resolve new dependencies if we're an automatic custos\n    if (this.auto) this.needsLayout = true;\n  }\n\n  /**\n   * \n   * @param {number} staffPosition position of custos\n   * @param {number} staffLineCount number of lines on staff\n   * @returns \n   */\n  static getGlyphCode(staffPosition, staffLineCount = 4) {\n    if (staffPosition <= staffLineCount * 2 - 2) {\n      // ascending custos\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosLong;\n      else return GlyphCode.CustosShort;\n    } else {\n      // descending custos\n      if (Math.abs(staffPosition) % 2 === 1) return GlyphCode.CustosDescLong;\n      else return GlyphCode.CustosDescShort;\n    }\n  }\n}\n\n/*\n * Divider\n */\nexport class Divider extends ChantNotationElement {\n  constructor() {\n    super();\n\n    this.isDivider = true;\n    this.resetsAccidentals = true;\n  }\n}\n\n/*\n * QuarterBar\n */\nexport class QuarterBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    const top = ctxt.staffLineCount * 2;\n    this.addVisualizer(new DividerLineVisualizer(ctxt, top - 2, top, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * HalfBar\n */\nexport class HalfBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    const offset = ctxt.staffLineCount === 2 ? 1.5 : 2;\n    this.addVisualizer(new DividerLineVisualizer(ctxt, offset, ctxt.staffLineCount * 2 - offset, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * FullBar\n */\nexport class FullBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, 1, ctxt.staffLineCount * 2 - 1, this));\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Insertion Cursor\n */\nexport class InsertionCursor extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.cssClass = 'InsertionCursor';\n\n    this.addVisualizer(new DividerLineVisualizer(ctxt, 0, ctxt.staffLineCount * 2));\n\n    this.origin.x = this.bounds.width / 2;\n    this.bounds.width = 0;\n    this.bounds.height = 0;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DominicanBar\n */\nexport class DominicanBar extends Divider {\n  constructor(staffPosition) {\n    super();\n    var parity = (staffPosition + 1) % 2;\n\n    this.staffPosition = staffPosition - 2 * parity;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    this.addVisualizer(\n      new DividerLineVisualizer(\n        ctxt,\n        this.staffPosition,\n        this.staffPosition + 3,\n        this\n      )\n    );\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * DoubleBar\n */\nexport class DoubleBar extends Divider {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    const top = ctxt.staffLineCount * 2 - 1;\n    var line0 = new DividerLineVisualizer(ctxt, 1, top, this);\n    line0.bounds.x = 0;\n    this.addVisualizer(line0);\n\n    var line1 = new DividerLineVisualizer(ctxt, 1, top, this);\n    line1.bounds.x = ctxt.intraNeumeSpacing * 2 - line1.bounds.width;\n    this.addVisualizer(line1);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\nexport const AccidentalType = {\n  Flat: -1,\n  Natural: 0,\n  Sharp: 1\n};\n\n/*\n * Accidental\n */\nexport class Accidental extends ChantNotationElement {\n  constructor(staffPosition, accidentalType) {\n    super();\n    this.isAccidental = true;\n    this.keepWithNext = true; // accidentals should always stay connected...\n\n    this.staffPosition = staffPosition;\n    this.accidentalType = accidentalType;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.addVisualizer(this.createGlyphVisualizer(ctxt));\n\n    this.finishLayout(ctxt);\n  }\n\n  // creation of the glyph visualizer is refactored out or performLayout\n  // so that clefs can use the same logic for their accidental glyph\n  createGlyphVisualizer(ctxt) {\n    var glyphCode = GlyphCode.Flat;\n\n    switch (this.accidentalType) {\n      case AccidentalType.Natural:\n        glyphCode = GlyphCode.Natural;\n        break;\n      case AccidentalType.Sharp:\n        glyphCode = GlyphCode.Sharp;\n        break;\n      default:\n        glyphCode = GlyphCode.Flat;\n        break;\n    }\n\n    var glyph = new GlyphVisualizer(ctxt, glyphCode);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    return glyph;\n  }\n\n  adjustStep(step) {\n    switch (this.accidentalType) {\n      case AccidentalType.Flat:\n        if (step === Step.Ti) return Step.Te;\n        if (step === Step.Mi) return Step.Me;\n        break;\n      case AccidentalType.Sharp:\n        if (step === Step.Do) return Step.Du;\n        if (step === Step.Fa) return Step.Fu;\n        break;\n      case AccidentalType.Natural:\n        if (step === Step.Te) return Step.Ti;\n        if (step === Step.Me) return Step.Mi;\n        if (step === Step.Du) return Step.Do;\n        if (step === Step.Fu) return Step.Fa;\n        break;\n    }\n\n    // no adjustment needed\n    return step;\n  }\n\n  applyToPitch(pitch) {\n    // no adjusment needed\n    if (this.pitch.octave !== pitch.octave) return;\n\n    pitch.step = this.adjustStep(pitch.step);\n  }\n}\n\n/*\n * Virgula\n */\nexport class Virgula extends Divider {\n  constructor() {\n    super();\n\n    // unlike other dividers a virgula does not reset accidentals\n    this.resetsAccidentals = false;\n\n    // the staff position of the virgula is customizable, so that it\n    // can be placed on different lines (top or bottom) depending on the\n    // notation tradition of what is being notated (e.g., Benedictine has it\n    //  on top line, Norbertine at the bottom)\n    this.staffPosition = 3;\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var glyph = new GlyphVisualizer(ctxt, GlyphCode.Virgula);\n    glyph.setStaffPosition(ctxt, this.staffPosition);\n\n    this.addVisualizer(glyph);\n\n    this.origin.x = this.bounds.width / 2;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Signs.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  Units,\n  Pitch,\n  Point,\n  Rect,\n  Margins,\n  Size,\n  Step\n} from \"./Exsurge.Core.js\";\nimport {\n  MarkingPositionHint,\n  LyricType,\n  Lyric,\n  LyricArray,\n  AboveLinesText,\n  ChoralSign,\n  TranslationText,\n  DefaultTrailingSpace,\n  GlyphCode\n} from \"./Exsurge.Drawing.js\";\nimport {\n  Note,\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers,\n  ChantMapping,\n  ChantScore,\n  ChantDocument,\n  Clef,\n  DoClef,\n  FaClef,\n  TextOnly,\n  ChantLineBreak\n} from \"./Exsurge.Chant.js\";\nimport * as Markings from \"./Exsurge.Chant.Markings.js\";\nimport * as Signs from \"./Exsurge.Chant.Signs.js\";\nimport * as Neumes from \"./Exsurge.Chant.Neumes.js\";\n\n// reusable reg exps\nvar __syllablesRegex = /(?=\\S)((?:<v>[\\s\\S]*<\\/v>|[^(])*)(?:\\(?([^)]*)\\)?)?/g\nvar __altTranslationRegex = /<alt>(.*?)<\\/alt>|\\[(alt:)?(.*?)\\]/g;\n\nvar __notationsRegex = /z0|z|Z|::|:|[,;][1-8]?|`|[cf][1-5]|cb[1-5]|\\/+| |\\!|-?[a-mA-M][oOwWvVrRsxy#~\\+><_\\.'012345]*(?:\\[[^\\]]*\\]?)*|\\{([^}]+)\\}?/g;\nvar __notationsRegex_group_insideBraces = 1;\n\nvar __bracketedCommandRegex = /^([a-z]+):(.*)/;\n\n// for the brace string inside of [ and ] in notation data\n// the capturing groups are:\n//  1. o or u, to indicate over or under\n//  2. b, cb, or cba, to indicate the brace type\n//  3. 0 or 1 to indicate the attachment point\n//  4. { or } to indicate opening/closing (this group will be null if the metric version is used)\n//  5. a float indicating the millimeter length of the brace (not supported yet)\nvar __braceSpecRegex = /([ou])(b|cb|cba):([01])(?:([{}])|;(\\d*(?:\\.\\d+)?)mm)/;\n\nconst TrailingSpaceForAccidental = ctxt =>\n  ctxt.intraNeumeSpacing * ctxt.accidentalSpaceMultiplier;\nconst TrailingSpaceMultiple = multiplier => ctxt =>\n  ctxt.intraNeumeSpacing * multiplier;\n\nconst regexHeaderEnd = /(?:^|\\n)%%\\s?\\n/;\nconst regexHeaderLine = /^([\\w-_.]+):\\s*((?:[^;\\r\\n]|;[ \\t])*)(?:;|$)/i;\nconst regexHeaderComment = /^%.*/;\nexport class GabcHeader {\n  static getLength(gabc) {\n    let match = gabc.match(regexHeaderEnd);\n    return match ? match.index + match[0].length : 0;\n  }\n\n  constructor(text) {\n    if (typeof text !== \"string\") text = \"\";\n    this.comments = [];\n    this.cValues = {};\n    this.original = \"\";\n    let match = text.match(regexHeaderEnd);\n    if (match) {\n      let txtHeader = (this.original = text.slice(\n        0,\n        match.index + match[0].length\n      ));\n      var lines = txtHeader.split(/\\r?\\n/g);\n      for (var i = 0; i < lines.length; ++i) {\n        let line = lines[i],\n          match = regexHeaderLine.exec(line);\n        if (match) {\n          var key = match[1].replace(/-([a-z])/g, function(a, letter) {\n            return letter.toUpperCase();\n          });\n          if (this[match[1]]) {\n            var arrayName = match[1] + \"Array\";\n            if (!this[arrayName]) {\n              this[arrayName] = [this[match[1]]];\n            }\n            this[arrayName].push(match[2]);\n          } else {\n            this[match[1]] = match[2];\n          }\n          if (key !== match[1]) this[key] = this[match[1]];\n        } else if ((match = regexHeaderComment.exec(line))) {\n          if (line !== \"%%\") {\n            match = regexHeaderLine.exec(line.slice(1));\n            if (match) {\n              let key = match[1].replace(/-([a-z])/g, function(a, letter) {\n                return letter.toUpperCase();\n              });\n              this.cValues[match[1]] = match[2];\n              if (key !== match[1]) this.cValues[key] = match[2];\n            } else {\n              this.comments[i] = line;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  toString() {\n    var result = [];\n    for (let key in this) {\n      if (\n        typeof this[key] !== \"string\" ||\n        /^(length|original|comments|cValues)$/.test(key)\n      ) {\n        continue;\n      }\n      var alternateKey = key.replace(/[A-Z]/g, function(letter) {\n        return \"-\" + letter.toLowerCase();\n      });\n      if (alternateKey !== key && alternateKey in this) continue;\n      var array = this[key + \"Array\"];\n      if (array) {\n        for (var i = 0; i < array.length; ++i) {\n          result.push(key + \": \" + array[i] + \";\");\n        }\n      } else {\n        result.push(key + \": \" + this[key] + \";\");\n      }\n    }\n    for (let key in this.cValues) {\n      if (key.length === 0 || !this.cValues.hasOwnProperty(key)) continue;\n      result.push(\"%\" + key + \": \" + this.cValues[key] + \";\");\n    }\n    for (let i in this.comments) {\n      if (!this.comments.hasOwnProperty(i)) continue;\n      try {\n        result.splice(i, 0, this.comments[i]);\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n    return result.join(\"\\n\") + \"\\n%%\\n\";\n  }\n}\n\nvar elementCountForNotations = items =>\n  items.reduce((sum, item) => sum + (item.notes ? item.notes.length : 1), 0);\n\nexport class Gabc {\n  // takes gabc source code (without the header info) and returns an array\n  // of ChantMappings describing the chant. A chant score can then be created\n  // fron the chant mappings and later updated via updateMappings() if need\n  // be...\n  static createMappingsFromSource(ctxt, gabcSource) {\n    var headerLength = GabcHeader.getLength(gabcSource);\n    gabcSource = gabcSource.slice(headerLength);\n    var words = this.splitWords(gabcSource);\n\n    // set the default clef\n    ctxt.activeClef = Clef.default();\n\n    var mappings = this.createMappingsFromWords(\n      ctxt,\n      words,\n      clef => (ctxt.activeClef = clef)\n    );\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return mappings;\n  }\n\n  // A simple general purpose diff algorithm adapted here for comparing\n  // an array of existing mappings with an updated list of gabc words.\n  // note before is an array of mappings, and after is an array of strings\n  // (gabc words).\n  //\n  // This is definitely not the most effecient diff algorithm, but for our\n  // limited needs and source size it seems to work just fine...\n  //\n  // code is adapted from: https://github.com/paulgb/simplediff\n  //\n  // Returns:\n  //   A list of pairs, with the first part of the pair being one of three\n  //   strings ('-', '+', '=') and the second part being a list of values from\n  //   the original before and/or after lists. The first part of the pair\n  //   corresponds to whether the list of values is a deletion, insertion, or\n  //   unchanged, respectively.\n  static diffDescriptorsAndNewWords(before, after) {\n    // Create a map from before values to their indices\n    var oldIndexMap = {},\n      i;\n    for (i = 0; i < before.length; i++) {\n      oldIndexMap[before[i].source] = oldIndexMap[before[i].source] || [];\n      oldIndexMap[before[i].source].push(i);\n    }\n\n    var overlap = [],\n      startOld,\n      startNew,\n      subLength,\n      inew;\n\n    startOld = startNew = subLength = 0;\n\n    for (inew = 0; inew < after.length; inew++) {\n      var _overlap = [];\n      oldIndexMap[after[inew]] = oldIndexMap[after[inew]] || [];\n      for (i = 0; i < oldIndexMap[after[inew]].length; i++) {\n        var iold = oldIndexMap[after[inew]][i];\n        // now we are considering all values of val such that\n        // `before[iold] == after[inew]`\n        _overlap[iold] = ((iold && overlap[iold - 1]) || 0) + 1;\n        if (_overlap[iold] > subLength) {\n          // this is the largest substring seen so far, so store its indices\n          subLength = _overlap[iold];\n          startOld = iold - subLength + 1;\n          startNew = inew - subLength + 1;\n        }\n      }\n      overlap = _overlap;\n    }\n\n    if (subLength === 0) {\n      // If no common substring is found, we return an insert and delete...\n      var result = [];\n\n      if (before.length) result.push([\"-\", before]);\n\n      if (after.length) result.push([\"+\", after]);\n\n      return result;\n    }\n\n    // ...otherwise, the common substring is unchanged and we recursively\n    // diff the text before and after that substring\n    return [].concat(\n      this.diffDescriptorsAndNewWords(\n        before.slice(0, startOld),\n        after.slice(0, startNew)\n      ),\n      [[\"=\", after.slice(startNew, startNew + subLength)]],\n      this.diffDescriptorsAndNewWords(\n        before.slice(startOld + subLength),\n        after.slice(startNew + subLength)\n      )\n    );\n  }\n\n  // this function essentially performs and applies a rudimentary diff between a\n  // previously parsed set of mappings and between a new gabc source text.\n  // the mappings array passed in is changed in place to be updated from the\n  // new source\n  static updateMappingsFromSource(\n    ctxt,\n    mappings,\n    newGabcSource,\n    insertionIndex = null,\n    oldInsertionIndex = null\n  ) {\n    var headerLength = GabcHeader.getLength(newGabcSource);\n    newGabcSource = newGabcSource.slice(headerLength);\n    // always remove the last old mapping since it's spacing/trailingSpace is handled specially\n    mappings.pop();\n\n    if (insertionIndex === null) {\n      insertionIndex = NaN;\n    }\n    if (oldInsertionIndex === null) {\n      oldInsertionIndex = NaN;\n    }\n\n    var newWords = this.splitWords(newGabcSource);\n\n    var results = this.diffDescriptorsAndNewWords(mappings, newWords);\n\n    var index = 0,\n      j,\n      k,\n      l,\n      sourceIndex = 0,\n      wordLength = 0,\n      mapping,\n      elementIndex = 0;\n\n    ctxt.activeClef = Clef.default();\n\n    // apply the results to the mappings, marking notations that need to be processed\n    var lastTranslationNeumes = [];\n    for (var i = 0; i < results.length; i++) {\n      var resultCode = results[i][0];\n      var resultValues = results[i][1];\n\n      if (index > 0)\n        sourceIndex =\n          mappings[index - 1].sourceIndex +\n          mappings[index - 1].source.length +\n          1;\n      if (resultCode === \"=\") {\n        var sourceIndexDiff = sourceIndex - mappings[index].sourceIndex;\n        // skip over ones that haven't changed, but updating the clef and source\n        // index (and pitch in case clef or accidentals have changed) as we go\n        for (j = 0; j < resultValues.length; j++, index++) {\n          mapping = mappings[index];\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n          }\n          if (\n            insertionIndex >= elementIndex ||\n            oldInsertionIndex >= elementIndex\n          ) {\n            // check if the insertion index is within this mapping:\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (\n              (insertionIndex >= elementIndex &&\n                insertionIndex < elementIndex + elementCount) ||\n              (oldInsertionIndex >= elementIndex &&\n                oldInsertionIndex < elementIndex + elementCount)\n            ) {\n              // re-do this mapping:\n              // TODO: check sourceIndex\n              let sourceIndex = mapping.sourceIndex + sourceIndexDiff;\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n              mappings.splice(index, 1, mapping);\n\n              elementIndex += elementCount;\n              continue;\n            }\n            elementIndex += elementCount;\n          }\n          mapping.sourceIndex += sourceIndexDiff;\n          for (k = 0; k < mapping.notations.length; k++) {\n            var curNotation = mapping.notations[k];\n            var prevIsAccidental =\n              mapping.notations[k - 1] && mapping.notations[k - 1].isAccidental;\n            // notify the notation that its dependencies are no longer valid\n            curNotation.resetDependencies();\n\n            if (curNotation.isClef) {\n              ctxt.activeClef = mappings[index].notations[k];\n            }\n\n            if (curNotation.isAccidental) {\n              ctxt.activeClef.activeAccidental = curNotation;\n            } else if (\n              curNotation.resetsAccidentals ||\n              (!prevIsAccidental &&\n                curNotation.hasLyrics() &&\n                curNotation.lyrics[0].lyricType <= LyricType.BeginningSyllable)\n            ) {\n              ctxt.activeClef.resetAccidentals();\n            }\n\n            // update source index, pitch, and automatic braces\n            if (curNotation.notes) {\n              for (l = 0; l < curNotation.notes.length; ++l) {\n                let note = curNotation.notes[l];\n                note.sourceIndex += sourceIndexDiff;\n                note.pitch = ctxt.activeClef.staffPositionToPitch(\n                  note.staffPosition\n                );\n                if (note.braceEnd && note.braceEnd.automatic)\n                  delete note.braceEnd;\n                if (this.needToEndBrace && !note.braceStart && !note.braceEnd) {\n                  note.braceEnd = new Markings.BracePoint(\n                    note,\n                    this.needToEndBrace.isAbove,\n                    this.needToEndBrace.shape,\n                    this.needToEndBrace.attachment ===\n                    Markings.BraceAttachment.Left\n                      ? Markings.BraceAttachment.Right\n                      : Markings.BraceAttachment.Left\n                  );\n                  note.braceEnd.automatic = true;\n                  delete this.needToEndBrace;\n                } else if (note.braceStart && note.braceStart.automatic) {\n                  this.needToEndBrace = note.braceStart;\n                }\n              }\n            }\n            if (curNotation.translationText) {\n              for (l = 0; l < curNotation.translationText.length; ++l) {\n                let transText = curNotation.translationText[l];\n                delete transText.endNeume;\n                curNotation.translationText[l].sourceIndex += sourceIndexDiff;\n                if (\n                  transText.textAnchor === \"end\" &&\n                  lastTranslationNeumes[0]\n                ) {\n                  let lastTranslationText =\n                    lastTranslationNeumes[0].translationText[l];\n                  if (lastTranslationText)\n                    lastTranslationText.endNeume = curNotation;\n                }\n              }\n              lastTranslationNeumes[0] = curNotation;\n            }\n            if (sourceIndexDiff) {\n              if (typeof curNotation.sourceIndex === \"number\") {\n                curNotation.sourceIndex += sourceIndexDiff;\n              }\n              for (l = 0; l < curNotation.lyrics.length; ++l) {\n                curNotation.lyrics[l].sourceIndex += sourceIndexDiff;\n              }\n              if (curNotation.alText) {\n                for (l = 0; l < curNotation.alText.length; ++l) {\n                  curNotation.alText[l].sourceIndex += sourceIndexDiff;\n                }\n              }\n            }\n          }\n        }\n      } else if (resultCode === \"-\") {\n        // delete elements that no longer exist, but first notify all\n        // elements of the change\n        mappings.splice(index, resultValues.length);\n      } else if (resultCode === \"+\") {\n        // insert new ones\n        for (j = 0; j < resultValues.length; j++) {\n          wordLength = resultValues[j].length + 1;\n          mapping = this.createMappingFromWord(\n            ctxt,\n            resultValues[j],\n            sourceIndex,\n            lastTranslationNeumes,\n            insertionIndex - elementIndex\n          );\n\n          if (\n            elementIndex === 0 &&\n            mapping.notations.length &&\n            mapping.notations[0].isClef\n          ) {\n            // the first clef doesn't get kept as a notation:\n            elementIndex = -1;\n            let elementCount = elementCountForNotations(mapping.notations);\n            if (insertionIndex < elementCount) {\n              // re-do the first mapping, because it was broken up incorrectly, due to the presence of the initial clef\n              mapping = this.createMappingFromWord(\n                ctxt,\n                resultValues[j],\n                sourceIndex,\n                lastTranslationNeumes,\n                insertionIndex - elementIndex\n              );\n            }\n          }\n\n          for (k = 0; k < mapping.notations.length; k++) {\n            let curNotation = mapping.notations[k];\n            elementIndex += curNotation.notes ? curNotation.notes.length : 1;\n            if (curNotation.isClef) {\n              ctxt.activeClef = mapping.notations[k];\n            }\n          }\n\n          mappings.splice(index++, 0, mapping);\n          sourceIndex += wordLength;\n        }\n      }\n    }\n\n    // always set the last notation to have a trailingSpace of 0. This makes layout for the last chant line simpler\n    if (\n      mappings.length > 0 &&\n      mappings[mappings.length - 1].notations.length > 0\n    )\n      mappings[mappings.length - 1].notations[\n        mappings[mappings.length - 1].notations.length - 1\n      ].trailingSpace = 0;\n\n    return headerLength;\n  }\n\n  // takes an array of gabc words (like that returned by splitWords below)\n  // and returns an array of ChantMapping objects, one for each word.\n  static createMappingsFromWords(ctxt, words) {\n    var mappings = [];\n    var sourceIndex = 0,\n      wordLength = 0,\n      lastTranslationNeumes = [];\n\n    for (var i = 0; i < words.length; i++) {\n      sourceIndex += wordLength;\n      wordLength = words[i].length + 1;\n      var word = words[i].trim();\n\n      if (word === \"\") continue;\n\n      var mapping = this.createMappingFromWord(\n        ctxt,\n        word,\n        sourceIndex,\n        lastTranslationNeumes\n      );\n\n      if (mapping) mappings.push(mapping);\n    }\n\n    return mappings;\n  }\n\n  // takes a gabc word (like those returned by splitWords below) and returns\n  // a ChantMapping object that contains the gabc word source text as well\n  // as the generated notations.\n  static createMappingFromWord(\n    ctxt,\n    word,\n    sourceIndex,\n    lastTranslationNeumes,\n    insertionIndex\n  ) {\n    var matches = [];\n    var notations = [];\n    var currSyllable = 0;\n\n    while ((match = __syllablesRegex.exec(word))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyricText = match[1].replace(\n        /(^|<\\/sp>)([\\s\\S]*?)($|<sp>)/g,\n        (_, pre, main, post) => `${pre}${main.replace(/~/g, \" \")}${post}`\n      );\n      var alText = [];\n      var translationText = [];\n      var notationData = match[2];\n\n      // new words reset the accidentals, per the Solesmes style (see LU xviij)\n      // but we need to also make sure that there _is_ a word and that it has notes associated with it.\n      if (\n        currSyllable === 0 &&\n        /[a-z]/i.test(lyricText) &&\n        /[a-m]/i.test(notationData)\n      )\n        ctxt.activeClef.resetAccidentals();\n\n      var items = this.parseNotations(\n        ctxt,\n        notationData,\n        sourceIndex + match.index + match[1].length + 1,\n        insertionIndex\n      );\n\n      if (items.length === 0) continue;\n\n      if (insertionIndex >= 0)\n        insertionIndex -= elementCountForNotations(items);\n\n      items[0].firstOfSyllable = !!lyricText;\n      items[0].firstOfParentheses = true;\n      notations.push(...items);\n\n      // add the lyrics and/or alText to the first notation that makes sense...\n      var notationWithLyrics = null;\n      for (var i = 0; i < items.length; i++) {\n        var cne = items[i];\n\n        if (cne.isAccidental && i + 1 < items.length) continue;\n\n        notationWithLyrics = cne;\n        break;\n      }\n\n      var m = __altTranslationRegex.exec();\n      let indexOffset = 0;\n      while ((m = __altTranslationRegex.exec(lyricText))) {\n        let index = m.index;\n        lyricText =\n          lyricText.slice(0, index) + lyricText.slice(index + m[0].length);\n        index += sourceIndex + indexOffset + 1;\n        if (typeof m[1] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[1],\n            notationWithLyrics,\n            index + 4\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else if (typeof m[2] === \"string\") {\n          let elem = new AboveLinesText(\n            ctxt,\n            m[3],\n            notationWithLyrics,\n            index + m[2].length\n          );\n          elem.alIndex = alText.push(elem) - 1;\n        } else {\n          let elem = new TranslationText(ctxt, m[3], notationWithLyrics, index);\n          elem.translationIndex = translationText.push(elem) - 1;\n        }\n        indexOffset += m[0].length;\n        __altTranslationRegex.exec();\n      }\n      if (lyricText === \"\" && alText.length === 0) continue;\n\n      if (notationWithLyrics === null)\n        return new ChantMapping(word, notations, sourceIndex);\n\n      if (alText.length) notationWithLyrics.alText = alText;\n\n      if (translationText.length) {\n        notationWithLyrics.translationText = translationText;\n        for (i = 0; i < translationText.length; ++i) {\n          let transText = translationText[i];\n          if (transText.textAnchor === \"end\" && lastTranslationNeumes[0]) {\n            let lastTranslationText =\n              lastTranslationNeumes[0].translationText[i];\n            if (lastTranslationText)\n              lastTranslationText.endNeume = notationWithLyrics;\n          }\n        }\n        lastTranslationNeumes[0] = notationWithLyrics;\n      }\n\n      if (lyricText === \"\") continue;\n\n      var proposedLyricType;\n\n      // if it's not a neume or a TextOnly notation, then make the lyrics a directive\n      if (!cne.isNeume && cne.constructor !== TextOnly)\n        proposedLyricType = LyricType.Directive;\n      // otherwise trye to guess the lyricType for the first lyric anyway\n      else if (currSyllable === 0 && j === matches.length - 1)\n        proposedLyricType = LyricType.SingleSyllable;\n      else if (currSyllable === 0 && j < matches.length - 1)\n        proposedLyricType = LyricType.BeginningSyllable;\n      else if (j === matches.length - 1)\n        proposedLyricType = LyricType.EndingSyllable;\n      else proposedLyricType = LyricType.MiddleSyllable;\n\n      currSyllable++;\n\n      var lyrics = this.createSyllableLyrics(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notationWithLyrics,\n        items,\n        sourceIndex + match.index\n      );\n\n      if (lyrics === null || lyrics.length === 0) continue;\n\n      notationWithLyrics.lyrics = lyrics;\n    }\n\n    return new ChantMapping(word, notations, sourceIndex);\n  }\n\n  // returns an array of lyrics (an array because each syllable can have multiple lyrics)\n  static createSyllableLyrics(\n    ctxt,\n    text,\n    proposedLyricType,\n    notation,\n    notations,\n    sourceIndex\n  ) {\n    var lyrics = [];\n\n    // an extension to gabc: multiple lyrics per syllable can be separated by a |\n    var lyricTexts = text.split(\"|\");\n\n    for (var i = 0; i < lyricTexts.length; i++) {\n      var lyricText = lyricTexts[i];\n\n      if (i > 0) {\n        if (lyricText.match(/\\s$/)) {\n          lyricText = lyricText.replace(/s+$/, \"\");\n          proposedLyricType = LyricType.EndingSyllable;\n        } else {\n          proposedLyricType = LyricType.MiddleSyllable;\n        }\n      }\n\n      // gabc allows lyrics to indicate the centering part of the text by\n      // using braces to indicate how to center the lyric. So a lyric can\n      // look like \"f{i}re\" or \"{fenced}\" to center on the i or on the entire\n      // word, respectively. Here we determine if the lyric should be spaced\n      // manually with this method of using braces.\n      // however, we don't want to consider any braces inside of v tags, so we\n      // do a bit of text processing here:\n      var lyricTextWithoutVTags = lyricText;\n      const vtagRegex = /<v>[\\s\\S]*?<\\/v>/;\n      let match;\n      const vtags = [];\n      while ((match = vtagRegex.exec(lyricTextWithoutVTags))) {\n        let index = match.index;\n        let length = match[0].length;\n        vtags[index] = length;\n        lyricTextWithoutVTags = lyricTextWithoutVTags.slice(0, index) + lyricTextWithoutVTags.slice(index + length);\n      }\n      var centerStartIndex = lyricTextWithoutVTags.indexOf(\"{\");\n      var centerLength = 0;\n\n      if (centerStartIndex >= 0) {\n        let indexClosingBracket = lyricTextWithoutVTags.indexOf(\"}\");\n\n        if (\n          indexClosingBracket >= 0 &&\n          indexClosingBracket > centerStartIndex\n        ) {\n          const getTrueIndex = (indexWithoutVTags) => {\n            // map indices back to the lyricText with the V tags:\n            let accum = 0;\n            for (let index in vtags) {\n              if (vtags.hasOwnProperty(index) && indexWithoutVTags >= index) {\n                accum += vtags[index];\n              } else {\n                break;\n              }\n            }\n            return indexWithoutVTags + accum;\n          }\n          centerStartIndex = getTrueIndex(centerStartIndex);\n          indexClosingBracket = getTrueIndex(indexClosingBracket);\n          centerLength = indexClosingBracket - centerStartIndex - 1;\n\n          // strip out the brackets:\n          lyricText =\n            lyricText.substring(0, centerStartIndex) +\n            lyricText.substring(centerStartIndex + 1, indexClosingBracket) +\n            lyricText.substring(indexClosingBracket + 1, lyricText.length);\n        } else centerStartIndex = -1; // if there's no closing bracket, don't enable centering\n      }\n\n      var lyric = this.makeLyric(\n        ctxt,\n        lyricText,\n        proposedLyricType,\n        notation,\n        notations,\n        sourceIndex\n      );\n\n      if (centerStartIndex >= 0) {\n        // update indices in case there had been any tags, etc.\n        let textIndex = 0,\n          centerEndIndex = -1;\n        for (let span of lyric.spans) {\n          if (\n            centerStartIndex >= span.index &&\n            centerStartIndex <= span.index + span.text.length\n          ) {\n            centerEndIndex = centerStartIndex + centerLength;\n            centerStartIndex += textIndex - span.index;\n          }\n          if (\n            centerEndIndex >= 0 &&\n            centerEndIndex >= span.index &&\n            centerEndIndex <= span.index + span.text.length\n          ) {\n            centerEndIndex += textIndex - span.index;\n            centerLength = centerEndIndex - centerStartIndex;\n            centerEndIndex = -1;\n            break;\n          }\n          textIndex += span.text.length;\n        }\n        if (centerEndIndex >= 0) {\n          centerEndIndex = textIndex;\n          centerLength = centerEndIndex - centerStartIndex;\n        }\n      }\n\n      // if we have manual lyric centering, then set it now\n      if (centerStartIndex >= 0) {\n        lyric.centerStartIndex = centerStartIndex;\n        lyric.centerLength = centerLength;\n      }\n\n      lyric.lyricIndex = lyrics.push(lyric) - 1;\n      sourceIndex += lyricText.length + 1;\n    }\n    notation.lyrics = lyrics;\n    return lyrics;\n  }\n\n  static makeLyric(ctxt, text, lyricType, notation, notations, sourceIndex) {\n    var elides = false;\n    var forceConnector = false;\n    if (text.length > 1) {\n      if (text[text.length - 1] === \"-\") {\n        forceConnector = true;\n        if (lyricType === LyricType.EndingSyllable)\n          lyricType = LyricType.MiddleSyllable;\n        else if (lyricType === LyricType.SingleSyllable)\n          lyricType = LyricType.BeginningSyllable;\n\n        text = text.slice(0, -1);\n      } else if (text[text.length - 1] === \" \") {\n        if (lyricType === LyricType.MiddleSyllable)\n          lyricType = LyricType.EndingSyllable;\n        else if (lyricType === LyricType.BeginningSyllable)\n          lyricType = LyricType.SingleSyllable;\n\n        text = text.slice(0, -1);\n      } else if (/<\\/i>$/.test(text)) {\n        // must be an elision\n        elides = true;\n      }\n    }\n\n    if (text.match(/^(?:[*†]+|i+j|\\d+)\\.?$/)) lyricType = LyricType.Directive;\n\n    var lyric = new Lyric(\n      ctxt,\n      text,\n      lyricType,\n      notation,\n      notations,\n      sourceIndex\n    );\n    lyric.elidesToNext = elides;\n    if (forceConnector) lyric.setForceConnector(true);\n\n    return lyric;\n  }\n\n  // takes a string of gabc notations and creates exsurge objects out of them.\n  // returns an array of notations.\n  static parseNotations(ctxt, data, sourceIndex, insertionIndex) {\n    // if there is no data, then this must be a text only object\n    if (!data) return [new TextOnly(sourceIndex, 0)];\n\n    var baseSourceIndex = sourceIndex;\n    var sourceLength = 0;\n    var notations = [];\n    var notes = [];\n    var trailingSpace = DefaultTrailingSpace;\n\n    var addToLastSourceGabc = gabc => {\n      if (notes.length > 0) {\n        notes[notes.length - 1].sourceGabc += gabc;\n      }\n    };\n    var addNotation = notation => {\n      // first, if we have any notes left over, we create a neume out of them\n      if (notes.length > 0) {\n        // create neume(s)\n        var neumes = this.createNeumesFromNotes(ctxt, notes, trailingSpace);\n        for (var i = 0; i < neumes.length; i++) notations.push(neumes[i]);\n\n        notes = [];\n      }\n\n      // reset the trailing space\n      trailingSpace = DefaultTrailingSpace;\n\n      // then, if we're passed a notation, let's add it\n      // also, perform chant logic here\n      if (notation !== null) {\n        let prevNotation = notations[notations.length - 1];\n        notation.sourceIndex = sourceIndex;\n        notation.sourceGabc = match[0];\n        if (notation.isClef) {\n          ctxt.activeClef = notation;\n          if (\n            prevNotation &&\n            prevNotation.trailingSpace.isDefault &&\n            prevNotation.isDivider\n          ) {\n            prevNotation.trailingSpace = TrailingSpaceForAccidental;\n          }\n        } else if (notation.isAccidental) {\n          ctxt.activeClef.activeAccidental = notation;\n        } else if (\n          notation.trailingSpace.isDefault &&\n          notation instanceof Signs.Custos\n        ) {\n          notation.trailingSpace = TrailingSpaceForAccidental;\n        } else if (notation.resetsAccidentals)\n          ctxt.activeClef.resetAccidentals();\n\n        notations.push(notation);\n      }\n    };\n\n    var regex = new RegExp(__notationsRegex.source, \"g\");\n    var match;\n\n    while ((match = regex.exec(data))) {\n      sourceIndex = baseSourceIndex + match.index;\n      sourceLength = match[0].length;\n      var atom = match[0];\n\n      // handle the clefs and dividers here\n      switch (atom) {\n        case \",\":\n          addNotation(new Signs.QuarterBar());\n          break;\n        case \"`\":\n          addNotation(new Signs.Virgula());\n          break;\n        case \";\":\n          addNotation(new Signs.HalfBar());\n          break;\n        case \";1\":\n        case \";2\":\n        case \";3\":\n        case \";4\":\n        case \";5\":\n        case \";6\":\n        case \";7\":\n        case \";8\":\n        case \",1\":\n        case \",2\":\n        case \",3\":\n        case \",4\":\n        case \",5\":\n        case \",6\":\n        case \",7\":\n        case \",8\":\n          addNotation(new Signs.DominicanBar(parseInt(atom[1], 10)));\n          break;\n        case \":\":\n          addNotation(new Signs.FullBar());\n          break;\n        case \"::\":\n          addNotation(new Signs.DoubleBar());\n          break;\n        // other gregorio dividers are not supported yet\n\n        case \"c1\":\n        case \"c2\":\n        case \"c3\":\n        case \"c4\":\n        case \"c5\":\n          addNotation((ctxt.activeClef = new DoClef(2 * parseInt(atom[1], 10) - 1, 2)));\n          break;\n        case \"f1\":\n        case \"f2\":\n        case \"f3\":\n        case \"f4\":\n        case \"f5\":\n          addNotation((ctxt.activeClef = new FaClef(2 * parseInt(atom[1], 10) - 1, 2)));\n          break;\n        case \"cb1\":\n        case \"cb2\":\n        case \"cb3\":\n        case \"cb4\":\n        case \"cb5\":\n          {\n            const line = 2 * parseInt(atom[2], 10) - 1;\n            addNotation(\n              (ctxt.activeClef = new DoClef(\n                line,\n                2,\n                new Signs.Accidental(line - 1, Signs.AccidentalType.Flat)\n              ))\n            );\n          }\n          break;\n\n        case \"z\":\n          addNotation(new ChantLineBreak(true));\n          break;\n        case \"Z\":\n          addNotation(new ChantLineBreak(false));\n          break;\n        case \"z0\":\n          addNotation(new Signs.Custos(true));\n          break;\n\n        // spacing indicators\n        case \"!\":\n          trailingSpace = 0;\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n        case \" \":\n          // fixme: is this correct? logically what is the difference in gabc\n          // between putting a space between notes vs putting '//' between notes?\n          trailingSpace = TrailingSpaceMultiple(2);\n          addToLastSourceGabc(atom);\n          addNotation(null);\n          break;\n\n        default:\n          // might be a number of slashes, a custos, might be an accidental, or might be a note\n          if (atom[0] === \"/\") {\n            trailingSpace = TrailingSpaceMultiple(atom.length);\n            addToLastSourceGabc(atom);\n            addNotation(null);\n          } else if (atom.length > 1 && atom[1] === \"+\") {\n            // custos\n            var custos = new Signs.Custos();\n\n            custos.staffPosition = this.gabcHeightToExsurgeHeight(atom[0]);\n\n            addNotation(custos);\n          } else if (atom.length > 1 && /[xy#]/.test(atom[1])) {\n            var accidentalType;\n\n            switch (atom[1]) {\n              case \"y\":\n                accidentalType = Signs.AccidentalType.Natural;\n                break;\n              case \"#\":\n                accidentalType = Signs.AccidentalType.Sharp;\n                break;\n              default:\n                accidentalType = Signs.AccidentalType.Flat;\n                break;\n            }\n\n            var noteArray = [];\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              noteArray,\n              sourceIndex\n            );\n            var accidental = new Signs.Accidental(\n              noteArray[0].staffPosition,\n              accidentalType\n            );\n            accidental.pitch = this.gabcHeightToExsurgePitch(\n              ctxt.activeClef,\n              atom[0]\n            );\n            accidental.sourceIndex = sourceIndex;\n            accidental.sourceLength = sourceLength;\n            accidental.trailingSpace = TrailingSpaceForAccidental;\n\n            ctxt.activeClef.activeAccidental = accidental;\n\n            addNotation(accidental);\n          } else if (atom.length > 1 && atom[0] === \"{\") {\n            trailingSpace = 0;\n            addNotation(null);\n            let bracketedNotations = this.parseNotations(\n              ctxt,\n              match[__notationsRegex_group_insideBraces],\n              sourceIndex + 1\n            );\n            // Set the width of these notations to 0\n            bracketedNotations.forEach(neume => {\n              neume.hasNoWidth = true;\n              neume.firstWithNoWidth = bracketedNotations[0];\n            });\n            notations.push(...bracketedNotations);\n          } else {\n            // looks like it's a note\n            if (insertionIndex === -1) {\n              trailingSpace = TrailingSpaceMultiple(1);\n              addNotation(null);\n            }\n            this.createNoteFromData(\n              ctxt,\n              ctxt.activeClef,\n              atom,\n              notes,\n              sourceIndex\n            );\n            --insertionIndex;\n          }\n          break;\n      }\n    }\n\n    // finish up any remaining notes we have left\n    addNotation(null);\n\n    return notations;\n  }\n\n  static createNeumesFromNotes(ctxt, notes, finalTrailingSpace) {\n    var neumes = [];\n    var firstNoteIndex = 0;\n    var currNoteIndex = 0;\n\n    // here we use a simple finite state machine to create the neumes from the notes\n    // createNeume is helper function which returns the next state after a neume is created\n    // (unknownState). Each state object has a neume() function and a handle() function.\n    // neume() allows us to create the neume of the state in the event that we run out\n    // of notes. handle() gives the state an opportunity to examine the currNote and\n    // determine what to do...either transition to a different neume/state, or\n    // continue building the neume of that state. handle() returns the next state\n\n    var createNeume = function(neume, includeCurrNote, includePrevNote = true) {\n      // add the notes to the neume\n      var lastNoteIndex;\n      if (includeCurrNote) lastNoteIndex = currNoteIndex;\n      else if (includePrevNote) lastNoteIndex = currNoteIndex - 1;\n      else lastNoteIndex = currNoteIndex - 2;\n\n      if (lastNoteIndex < 0) return;\n\n      while (firstNoteIndex <= lastNoteIndex) {\n        let note = notes[firstNoteIndex++];\n        neume.addNote(note);\n        if (note.alText) {\n          if (!neume.alText) neume.alText = [];\n          neume.alText.push(note.alText);\n          note.alText.noteIndex = firstNoteIndex - 1;\n        }\n      }\n\n      neumes.push(neume);\n\n      if (includeCurrNote === false) {\n        currNoteIndex--;\n\n        if (includePrevNote === false) currNoteIndex--;\n\n        neume.keepWithNext = true;\n        if (notes[currNoteIndex + 1].shape === NoteShape.Quilisma)\n          neume.trailingSpace = 0;\n        else {\n          neume.trailingSpace = TrailingSpaceMultiple(1);\n          neume.allowLineBreakBeforeNext = true;\n        }\n      }\n\n      return unknownState;\n    };\n\n    var unknownState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Virga) return virgaState;\n        else if (currNote.shape === NoteShape.Stropha) return apostrophaState;\n        else if (currNote.shape === NoteShape.Oriscus) return oriscusState;\n        else if (currNote.shape === NoteShape.Inclinatum)\n          return punctaInclinataState;\n        else if (currNote.shapeModifiers & NoteShapeModifiers.Cavum)\n          return createNeume(new Neumes.Punctum(), true);\n        else return punctumState;\n      }\n    };\n\n    var punctumState = {\n      neume: function() {\n        return new Neumes.Punctum();\n      },\n      handle: function(currNote, prevNote, notesRemaining) {\n        if (currNote.shape || prevNote.liquescent === LiquescentType.Small) {\n          var neume = new Neumes.Punctum();\n          var state = createNeume(neume, false);\n          // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n          // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n          // Otherwise, we want no trailing space.\n          if (\n            currNote.staffPosition > prevNote.staffPosition &&\n            (currNote.staffPosition % 2 === 1 ||\n              prevNote.staffPosition !== currNote.staffPosition - 1 ||\n              !prevNote.morae ||\n              prevNote.morae.length === 0)\n          )\n            neume.trailingSpace = 0;\n          return state;\n        }\n\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return podatusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (currNote.shape === NoteShape.Inclinatum) return climacusState;\n          else {\n            return clivisState;\n          }\n        } else if (!prevNote.morae || !prevNote.morae.length) {\n          return distrophaState;\n        }\n        return createNeume(new Neumes.Punctum(), false);\n      }\n    };\n\n    var punctaInclinataState = {\n      neume: function() {\n        return new Neumes.PunctaInclinata();\n      },\n      handle: function() {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PunctaInclinata(), false);\n        else return punctaInclinataState;\n      }\n    };\n\n    var oriscusState = {\n      neume: function() {\n        return new Neumes.Oriscus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape === NoteShape.Default) {\n          if (currNote.staffPosition > prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Ascending;\n            return createNeume(new Neumes.PesQuassus(), true);\n          } else if (currNote.staffPosition < prevNote.staffPosition) {\n            prevNote.shapeModifiers |= NoteShapeModifiers.Descending;\n            return createNeume(new Neumes.Clivis(), true);\n          }\n        }\n        // stand alone oriscus\n        var neume = new Neumes.Oriscus(),\n          state = createNeume(neume, false);\n        // if the current note is on a space within the staff AND the previous note is on the line below AND the previous note has a mora,\n        // then we went the trailing space at its default of intraNeumeSpacing to prevent the dot from running up into the current note.\n        // Otherwise, we want no trailing space.\n        if (\n          currNote.staffPosition > prevNote.staffPosition &&\n          (currNote.staffPosition % 2 === 1 ||\n            prevNote.staffPosition !== currNote.staffPosition - 1 ||\n            !prevNote.morae ||\n            prevNote.morae.length === 0)\n        )\n          neume.trailingSpace = 0;\n        return state;\n      }\n    };\n\n    var podatusState = {\n      neume: function() {\n        return new Neumes.Podatus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition > prevNote.staffPosition) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          if (prevNote.ictus)\n            prevNote.ictus.positionHint = MarkingPositionHint.Below;\n\n          if (prevNote.shape === NoteShape.Oriscus) return salicusState;\n          else return scandicusState;\n        } else if (currNote.staffPosition < prevNote.staffPosition) {\n          if (currNote.shape === NoteShape.Inclinatum)\n            return pesSubpunctisState;\n          else return torculusState;\n        } else return createNeume(new Neumes.Podatus(), false);\n      }\n    };\n\n    var clivisState = {\n      neume: function() {\n        return new Neumes.Clivis();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          if (currNote.ictus)\n            currNote.ictus.positionHint = MarkingPositionHint.Above;\n          return porrectusState;\n        } else if (\n          currNote.staffPosition < prevNote.staffPosition &&\n          currNote.liquescent & LiquescentType.Small\n        ) {\n          return createNeume(new Neumes.Ancus(), true);\n        } else {\n          return createNeume(new Neumes.Clivis(), false);\n        }\n      }\n    };\n\n    var climacusState = {\n      neume: function() {\n        return new Neumes.Climacus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.Climacus(), false);\n        else return state;\n      }\n    };\n\n    var porrectusState = {\n      neume: function() {\n        return new Neumes.Porrectus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.PorrectusFlexus(), true);\n        else return createNeume(new Neumes.Porrectus(), false);\n      }\n    };\n\n    var pesSubpunctisState = {\n      neume: function() {\n        return new Neumes.PesSubpunctis();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.shape !== NoteShape.Inclinatum)\n          return createNeume(new Neumes.PesSubpunctis(), false);\n        else return state;\n      }\n    };\n\n    var salicusState = {\n      neume: function() {\n        return new Neumes.Salicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition < prevNote.staffPosition)\n          return salicusFlexusState;\n        else return createNeume(new Neumes.Salicus(), false);\n      }\n    };\n\n    var salicusFlexusState = {\n      neume: function() {\n        return new Neumes.SalicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.SalicusFlexus(), false);\n      }\n    };\n\n    var scandicusState = {\n      neume: function() {\n        return new Neumes.Scandicus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          prevNote.shape === NoteShape.Virga &&\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        ) {\n          // if we get here, then it seems we have a podatus, now being followed by a climacus\n          // rather than a scandicus. react accordingly\n          return createNeume(new Neumes.Podatus(), false, false);\n        } else if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return scandicusFlexusState;\n        else return createNeume(new Neumes.Scandicus(), false);\n      }\n    };\n\n    var scandicusFlexusState = {\n      neume: function() {\n        return new Neumes.ScandicusFlexus();\n      },\n      handle: function(currNote, prevNote) {\n        return createNeume(new Neumes.ScandicusFlexus(), false);\n      }\n    };\n\n    var virgaState = {\n      neume: function() {\n        return new Neumes.Virga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Inclinatum &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return climacusState;\n        else if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return bivirgaState;\n        else return createNeume(new Neumes.Virga(), false);\n      }\n    };\n\n    var bivirgaState = {\n      neume: function() {\n        return new Neumes.Bivirga();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Virga &&\n          currNote.staffPosition === prevNote.staffPosition\n        )\n          return createNeume(new Neumes.Trivirga(), true);\n        else return createNeume(new Neumes.Bivirga(), false);\n      }\n    };\n\n    var apostrophaState = {\n      neume: function() {\n        return new Neumes.Apostropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition)\n          return distrophaState;\n        else return createNeume(new Neumes.Apostropha(), false);\n      }\n    };\n\n    var distrophaState = {\n      neume: function() {\n        return new Neumes.Distropha();\n      },\n      handle: function(currNote, prevNote) {\n        if (currNote.staffPosition === prevNote.staffPosition) {\n          if (prevNote.morae && prevNote.morae.length) {\n            return createNeume(new Neumes.Distropha(), false);\n          } else {\n            return tristrophaState;\n          }\n        } else return createNeume(new Neumes.Apostropha(), false, false);\n      }\n    };\n\n    var tristrophaState = {\n      neume: function() {\n        return new Neumes.Tristropha();\n      },\n      handle: function(currNote, prevNote) {\n        // we only create a tristropha when the note run ends after three\n        // and the neume() function of this state is called. Otherwise\n        // we always interpret the third note to belong to the next sequence\n        // of notes.\n        //\n        // fixme: gabc allows any number of punctum/stropha in succession...\n        // is this a valid neume type? Or is it just multiple *stropha neumes\n        // in succession? Should we simplify the apostropha/distropha/\n        // tristropha classes to a generic stropha neume that can have 1 or\n        // more successive notes?\n        return createNeume(new Neumes.Distropha(), false, false);\n      }\n    };\n\n    var torculusState = {\n      neume: function() {\n        return new Neumes.Torculus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition > prevNote.staffPosition\n        ) {\n          let prevNoteButOne = notes[currNoteIndex - 2];\n          if (\n            prevNoteButOne &&\n            prevNoteButOne.staffPosition - prevNote.staffPosition <= 4\n          ) {\n            if (currNote.ictus)\n              currNote.ictus.positionHint = MarkingPositionHint.Above;\n            return torculusResupinusState;\n          }\n        }\n        return createNeume(new Neumes.Torculus(), false);\n      }\n    };\n\n    var torculusResupinusState = {\n      neume: function() {\n        return new Neumes.TorculusResupinus();\n      },\n      handle: function(currNote, prevNote) {\n        if (\n          currNote.shape === NoteShape.Default &&\n          currNote.staffPosition < prevNote.staffPosition\n        )\n          return createNeume(new Neumes.TorculusResupinusFlexus(), true);\n        else return createNeume(new Neumes.TorculusResupinus(), false);\n      }\n    };\n\n    var state = unknownState;\n\n    while (currNoteIndex < notes.length) {\n      var prevNote = currNoteIndex > 0 ? notes[currNoteIndex - 1] : null;\n      var currNote = notes[currNoteIndex];\n\n      state = state.handle(\n        currNote,\n        prevNote,\n        notes.length - 1 - currNoteIndex\n      );\n\n      // if we are on the last note, then try to create a neume if we need to.\n      if (currNoteIndex === notes.length - 1 && state !== unknownState)\n        createNeume(state.neume(), true);\n\n      currNoteIndex++;\n    }\n\n    if (neumes.length > 0) {\n      if (!finalTrailingSpace.isDefault) {\n        neumes[neumes.length - 1].trailingSpace = finalTrailingSpace;\n        neumes[neumes.length - 1].keepWithNext = true;\n\n        if (finalTrailingSpace > 0)\n          neumes[neumes.length - 1].allowLineBreakBeforeNext = neumes[\n            neumes.length - 1\n          ].keepWithNext = true;\n      }\n    }\n\n    return neumes;\n  }\n\n  // appends any notes created to the notes array argument\n  static createNoteFromData(ctxt, clef, data, notes, sourceIndex) {\n    var note = new Note();\n    note.sourceIndex = sourceIndex;\n    note.sourceGabc = data;\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    if (data[0] === \"-\") {\n      // liquescent initio debilis\n      note.liquescent = LiquescentType.InitioDebilis;\n      data = data.substring(1);\n    }\n\n    if (data.length < 1) throw \"Invalid note data: \" + data;\n\n    // the next char is always the pitch\n    var pitch = this.gabcHeightToExsurgePitch(clef, data[0]);\n\n    if (data[0] === data[0].toUpperCase()) note.shape = NoteShape.Inclinatum;\n\n    note.staffPosition = this.gabcHeightToExsurgeHeight(data[0]);\n    note.pitch = pitch;\n\n    var mark;\n\n    var episemaNoteIndex = notes.length;\n    var episemaNote = note;\n\n    // process the modifiers\n    for (var i = 1; i < data.length; i++) {\n      var c = data[i];\n      var lookahead = \"\\0\";\n\n      var haveLookahead = i + 1 < data.length;\n      if (haveLookahead) lookahead = data[i + 1];\n\n      switch (c) {\n        // rhythmic markings\n        case \".\":\n          mark = null;\n\n          // gabc supports putting up to two morae on each note, by repeating the\n          // period. here, we check to see if we've already created a mora for the\n          // note, and if so, we simply force the second one to have an Above\n          // position hint. if a user decides to try to put position indicators\n          // on the double morae (such as 1 or 2), then really the behavior is\n          // not defined by gabc, so it's on the user to figure it out.\n          if (note.morae.length > 0 && notes.length) {\n            var previousNote = notes.slice(-1)[0];\n            var previousMora = note.morae.slice(-1)[0];\n            previousMora.note = previousNote;\n          }\n\n          mark = new Markings.Mora(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n\n          note.morae.push(mark);\n          break;\n\n        case \"_\":\n          var episemaHadModifier = false;\n\n          mark = new Markings.HorizontalEpisema(episemaNote);\n          while (haveLookahead) {\n            if (lookahead === \"0\")\n              mark.positionHint = MarkingPositionHint.Below;\n            else if (lookahead === \"1\")\n              mark.positionHint = MarkingPositionHint.Above;\n            else if (lookahead === \"2\") mark.terminating = true;\n            // episema terminates\n            else if (lookahead === \"3\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Left;\n            else if (lookahead === \"4\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Center;\n            else if (lookahead === \"5\")\n              mark.alignment = Markings.HorizontalEpisemaAlignment.Right;\n            else break;\n\n            // the gabc definition for episemata is so convoluted...\n            // - double underscores create episemata over multiple notes.\n            // - unless the _ has a 0, 1, 3, 4, or 5 modifier, which means\n            //   another underscore puts a second episema on the same note\n            // - (when there's a 2 lookahead, then this is treated as an\n            //   unmodified underscore, so another underscore would be\n            //   added to previous notes\n            if (\n              mark.alignment !== Markings.HorizontalEpisemaAlignment.Default &&\n              mark.positionHint !== MarkingPositionHint.Below\n            )\n              episemaHadModifier = true;\n\n            i++;\n            haveLookahead = i + 1 < data.length;\n\n            if (haveLookahead) lookahead = data[i + 1];\n          }\n\n          // since gabc allows consecutive underscores which is a shortcut to\n          // apply the episemata to previous notes, we keep track of that here\n          // in order to add the new episema to the correct note.\n\n          if (episemaNote) episemaNote.episemata.push(mark);\n\n          if (episemaNote === note && episemaHadModifier) episemaNote = note;\n          else if (episemaNoteIndex >= 0 && notes.length > 0)\n            episemaNote = notes[--episemaNoteIndex];\n\n          break;\n\n        case \"'\":\n          mark = new Markings.Ictus(ctxt, note);\n          if (haveLookahead && lookahead === \"1\")\n            mark.positionHint = MarkingPositionHint.Above;\n          else if (haveLookahead && lookahead === \"0\")\n            mark.positionHint = MarkingPositionHint.Below;\n          else if (note.shape === NoteShape.Virga)\n            // ictus on a virga goes above by default:\n            mark.positionHint = MarkingPositionHint.Above;\n\n          note.ictus = mark;\n          break;\n\n        //note shapes\n        case \"r\":\n          if (haveLookahead && /^[0-5]$/.test(lookahead)) {\n            switch (lookahead) {\n              case \"0\":\n                note.shapeModifiers |= NoteShapeModifiers.Cavum;\n                note.shapeModifiers |= NoteShapeModifiers.Linea;\n                break;\n              case \"1\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.AcuteAccent\n                );\n                break;\n              case \"2\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.GraveAccent\n                );\n                break;\n              case \"3\":\n                note.accent = new Markings.Accent(ctxt, note, GlyphCode.Circle);\n                break;\n              case \"4\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.Semicircle\n                );\n                break;\n              case \"5\":\n                note.accent = new Markings.Accent(\n                  ctxt,\n                  note,\n                  GlyphCode.ReversedSemicircle\n                );\n                break;\n              default:\n            }\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Cavum;\n          break;\n        \n        case \"R\":\n          note.shapeModifiers |= NoteShapeModifiers.Linea;\n          break;\n\n        case \"s\":\n          if (note.shape === NoteShape.Stropha) {\n            // if we're already a stropha, that means this is gabc's\n            // quick stropha feature (e.g., gsss). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"s\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Stropha;\n          break;\n\n        case \"v\":\n          if (note.shape === NoteShape.Virga) {\n            // if we're already a stropha, that means this is gabc's\n            // quick virga feature (e.g., gvvv). create a new note\n            let newNote = new Note();\n            newNote.sourceIndex = sourceIndex + i;\n            newNote.sourceGabc = \"v\";\n            newNote.staffPosition = note.staffPosition;\n            newNote.pitch = note.pitch;\n            notes.push(note);\n            note = newNote;\n            episemaNoteIndex++; // since a new note was added, increase the index here\n          }\n\n          note.shape = NoteShape.Virga;\n          break;\n        \n        case \"V\":\n          note.shape = NoteShape.Virga;\n          note.shapeModifers |= NoteShapeModifiers.Reverse;\n          break;\n\n        case \"w\":\n          note.shape = NoteShape.Quilisma;\n          break;\n\n        case \"o\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |= NoteShapeModifiers.Ascending;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |= NoteShapeModifiers.Descending;\n            i++;\n          }\n          break;\n\n        case \"O\":\n          note.shape = NoteShape.Oriscus;\n          if (haveLookahead && lookahead === \"<\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Ascending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else if (haveLookahead && lookahead === \">\") {\n            note.shapeModifiers |=\n              NoteShapeModifiers.Descending | NoteShapeModifiers.Stemmed;\n            i++;\n          } else note.shapeModifiers |= NoteShapeModifiers.Stemmed;\n          break;\n\n        // liquescents\n        case \"~\":\n          if (note.shape === NoteShape.Inclinatum)\n            note.liquescent |= LiquescentType.Small;\n          else if (note.shape === NoteShape.Oriscus)\n            note.liquescent |= LiquescentType.Large;\n          else note.liquescent |= LiquescentType.Small;\n          break;\n        case \"<\":\n          note.liquescent |= LiquescentType.Ascending;\n          break;\n        case \">\":\n          note.liquescent |= LiquescentType.Descending;\n          break;\n\n        // accidentals\n        case \"x\":\n          if (note.pitch.step === Step.Mi) note.pitch.step = Step.Me;\n          else if (note.pitch.step === Step.Ti) note.pitch.step = Step.Te;\n          break;\n        case \"y\":\n          if (note.pitch.step === Step.Te) note.pitch.step = Step.Ti;\n          else if (note.pitch.step === Step.Me) note.pitch.step = Step.Mi;\n          else if (note.pitch.step === Step.Du) note.pitch.step = Step.Do;\n          else if (note.pitch.step === Step.Fu) note.pitch.step = Step.Fa;\n          break;\n        case \"#\":\n          if (note.pitch.step === Step.Do) note.pitch.step = Step.Du;\n          else if (note.pitch.step === Step.Fa) note.pitch.step = Step.Fu;\n          break;\n\n        // gabc special item groups\n        case \"[\":\n          // read in the whole group and parse it\n          var startIndex = ++i;\n          while (i < data.length && data[i] !== \"]\") i++;\n\n          this.processInstructionForNote(\n            ctxt,\n            note,\n            data.substring(startIndex, i),\n            startIndex\n          );\n          break;\n      }\n    }\n\n    if (\n      this.needToEndBrace &&\n      !note.braceStart &&\n      !note.braceEnd &&\n      !/[xy#]/.test(c)\n    ) {\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        this.needToEndBrace.isAbove,\n        this.needToEndBrace.shape,\n        this.needToEndBrace.attachment === Markings.BraceAttachment.Left\n          ? Markings.BraceAttachment.Right\n          : Markings.BraceAttachment.Left\n      );\n      note.braceEnd.automatic = true;\n      delete this.needToEndBrace;\n    }\n\n    notes.push(note);\n  }\n\n  // an instruction in this context is referring to a special gabc coding found after\n  // notes between ['s and ]'s. choral signs and braces fall into this\n  // category.\n  //\n  // currently only brace instructions are supported here!\n  static processInstructionForNote(ctxt, note, instruction, sourceIndexOffset) {\n    var results = instruction.match(__bracketedCommandRegex);\n    if (results === null) return;\n    var cmd = results[1];\n    var data = results[2];\n    switch (cmd) {\n      case \"cs\":\n        note.choralSign = new ChoralSign(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n      case \"alt\":\n        note.alText = new AboveLinesText(\n          ctxt,\n          data,\n          note,\n          note.sourceIndex + sourceIndexOffset,\n          instruction.length\n        );\n        return;\n    }\n\n    results = instruction.match(__braceSpecRegex);\n\n    if (results === null) return;\n\n    // see the comments at the definition of __braceSpecRegex for the\n    // capturing groups\n    var above = results[1] === \"o\";\n    var shape = Markings.BraceShape.CurlyBrace; // default\n\n    switch (results[2]) {\n      case \"b\":\n        shape = Markings.BraceShape.RoundBrace;\n        break;\n      case \"cb\":\n        shape = Markings.BraceShape.CurlyBrace;\n        break;\n      case \"cba\":\n        shape = Markings.BraceShape.AccentedCurlyBrace;\n        break;\n    }\n\n    var attachmentPoint =\n      results[3] === \"1\"\n        ? Markings.BraceAttachment.Left\n        : Markings.BraceAttachment.Right;\n\n    if (results[4] === \"{\" || results[5])\n      note.braceStart = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n    else\n      note.braceEnd = new Markings.BracePoint(\n        note,\n        above,\n        shape,\n        attachmentPoint\n      );\n\n    // just have the next note end a brace that uses length;\n    if (results[5]) {\n      note.braceStart.automatic = true;\n      this.needToEndBrace = note.braceStart;\n    }\n  }\n\n  // takes raw gabc text source and parses it into words. For example, passing\n  // in a string of \"me(f.) (,) ma(fff)num(d!ewf) tu(fgF'E)am,(f.)\" would return\n  // an array of four strings: [\"me(f.)\", \"(,)\", \"ma(fff)num(d!ewf)\", \"tu(fgF'E)am,(f.)\"]\n  static splitWords(gabcNotations) {\n    // split the notations on whitespace boundaries, as long as the space\n    // immediately follows a set of parentheses. Prior to doing that, we replace\n    // all whitespace with spaces, which prevents tabs and newlines from ending\n    // up in the notation data.\n    gabcNotations = gabcNotations\n      // .trim()\n      // .replace(/\\s/g, \" \")\n      .replace(/\\)\\s(?=[^\\)]*(?:\\(|$))/g, \")\\n\");\n    return gabcNotations.split(/\\n/g);\n  }\n\n  static parseSource(gabcSource) {\n    return this.parseWords(this.splitWords(gabcSource));\n  }\n\n  // gabcWords is an array of strings, e.g., the result of splitWords above\n  static parseWords(gabcWords) {\n    var words = [];\n\n    for (var i = 0; i < gabcWords.length; i++)\n      words.push(this.parseWord(gabcWords[i]));\n\n    return words;\n  }\n\n  // returns an array of objects, each of which has the following properties\n  //  - notations (string)\n  //  - lyrics (array of strings)\n  static parseWord(gabcWord) {\n    var syllables = [];\n    var matches = [];\n\n    syllables.wordLength = gabcWord.length;\n\n    while ((match = __syllablesRegex.exec(gabcWord))) matches.push(match);\n\n    for (var j = 0; j < matches.length; j++) {\n      var match = matches[j];\n\n      var lyrics = match[1].trim().split(\"|\");\n      var notations = match[2];\n\n      syllables.push({\n        notations: notations,\n        lyrics: lyrics\n      });\n    }\n\n    return syllables;\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgeHeight(gabcHeight) {\n    return gabcHeight.toLowerCase().charCodeAt(0) - \"c\".charCodeAt(0);\n  }\n\n  // returns pitch\n  static gabcHeightToExsurgePitch(clef, gabcHeight) {\n    var exsurgeHeight = this.gabcHeightToExsurgeHeight(gabcHeight);\n\n    var pitch = clef.staffPositionToPitch(exsurgeHeight);\n\n    return pitch;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Gabc.js","//\n// Author(s):\n// Fr. Matthew Spencer, OSJ <mspencer@osjusa.org>\n//\n// Copyright (c) 2008-2016 Fr. Matthew Spencer, OSJ\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport {\n  LiquescentType,\n  NoteShape,\n  NoteShapeModifiers\n} from \"./Exsurge.Chant.js\";\nimport {\n  ChantNotationElement,\n  GlyphCode, LineaVisualizer, MarkingPositionHint,\n  NeumeLineVisualizer, VirgaLineVisualizer\n} from \"./Exsurge.Drawing.js\";\nimport { Glyphs } from \"./Exsurge.Glyphs.js\";\n\nclass NeumeBuilder {\n  constructor(ctxt, neume, startingX = 0) {\n    this.ctxt = ctxt;\n    this.neume = neume;\n    this.x = startingX;\n    this.lastNote = null;\n    this.lineIsHanging = false;\n    this.minX = 0;\n  }\n\n  // used to start a hanging line on the left of the next note\n  lineFrom(note) {\n    var previousNotation = this.ctxt.notations[this.ctxt.currNotationIndex - 1];\n    if (\n      this.x === 0 &&\n      previousNotation &&\n      previousNotation.notes &&\n      previousNotation.trailingSpace === 0\n    ) {\n      this.lastNote = previousNotation.notes.slice(-1)[0];\n      this.minX = -this.ctxt.neumeLineWeight;\n    } else {\n      this.lastNote = note;\n      this.lineIsHanging = true;\n    }\n    return this;\n  }\n\n  // add a note, with a connecting line on the left if we have one\n  noteAt(note, glyph, withLineTo = true) {\n    if (!note) throw \"NeumeBuilder.noteAt: note must be a valid note\";\n\n    if (!glyph) throw \"NeumeBuilder.noteAt: glyph must be a valid glyph code\";\n\n    note.setGlyph(this.ctxt, glyph);\n    var noteAlignsRight = note.glyphVisualizer.align === \"right\";\n\n    var needsLine =\n      withLineTo &&\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - note.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        note,\n        this.lineIsHanging\n      );\n      this.neume.addVisualizer(line);\n      line.bounds.x = Math.max(this.minX, this.x - line.bounds.width);\n\n      if (!noteAlignsRight) this.x = line.bounds.x;\n    }\n    \n    let xOffset = 0;\n    if (note.shapeModifiers & NoteShapeModifiers.Linea) {\n      var linea = new LineaVisualizer(\n        this.ctxt,\n        note\n      );\n      this.neume.addVisualizer(linea);\n      note.origin.x += linea.origin.x;\n      xOffset = linea.origin.x;\n    }\n\n    // if this is the first note of a right aligned glyph (probably an initio debilis),\n    // then there's nothing to worry about. but if it's not then first, then this\n    // subtraction will right align it visually\n    if (noteAlignsRight && this.lastNote)\n      note.bounds.x = this.x - note.bounds.width;\n    else {\n      note.bounds.x = this.x + xOffset;\n      this.x += note.bounds.width + xOffset;\n    }\n\n    this.neume.addVisualizer(note);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  // a special form of noteAdd that creates a virga\n  // uses a punctum cuadratum and a line rather than the virga glyphs\n  virgaAt(note, withLineTo = true) {\n    // add the punctum for the virga\n    this.noteAt(note, GlyphCode.PunctumQuadratum);\n\n    // add a line for the virga\n    var line = new VirgaLineVisualizer(this.ctxt, note);\n    this.x -= line.bounds.width;\n    if (note.shapeModifers & NoteShapeModifiers.Reverse) {\n      line.bounds.x = 0;\n    } else {\n      line.bounds.x = this.x;\n    }\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n\n  advanceBy(x) {\n    this.lastNote = null;\n    this.lineIsHanging = false;\n\n    this.x += x;\n\n    return this;\n  }\n\n  // for terminating hanging lines with no lower notes\n  withLineEndingAt(note) {\n    if (this.lastNote === null) return;\n\n    var line = new NeumeLineVisualizer(this.ctxt, this.lastNote, note, true);\n    this.neume.addVisualizer(line);\n    this.x -= line.bounds.width;\n    line.bounds.x = this.x;\n\n    this.neume.addVisualizer(line);\n\n    this.lastNote = note;\n\n    return this;\n  }\n\n  withPodatus(lowerNote, upperNote) {\n    var upperGlyph;\n    var lowerGlyph;\n\n    if (lowerNote.liquescent === LiquescentType.InitioDebilis) {\n      // liquescent upper note or not?\n      if (upperNote.liquescent === LiquescentType.None)\n        upperGlyph = GlyphCode.PunctumQuadratum;\n      else upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.BeginningAscLiquescent;\n      upperGlyph = GlyphCode.TerminatingAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Ascending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    } else if (upperNote.liquescent & LiquescentType.Descending) {\n      lowerGlyph = GlyphCode.PunctumQuadratum;\n      upperGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    } else {\n      // standard shape\n      lowerGlyph = GlyphCode.PodatusLower;\n      upperGlyph = GlyphCode.PodatusUpper;\n    }\n\n    // allow a quilisma pes\n    if (lowerNote.shape === NoteShape.Quilisma) lowerGlyph = GlyphCode.Quilisma;\n\n    this.noteAt(lowerNote, lowerGlyph).noteAt(upperNote, upperGlyph);\n\n    // make sure we don't have lines connected to the podatus\n    this.lastNote = null;\n\n    return this;\n  }\n\n  withClivisUpper(upper, lower, glyph = GlyphCode.PunctumQuadratum) {\n    if (upper.shape === NoteShape.Oriscus)\n      this.noteAt(upper, GlyphCode.OriscusDes, false);\n    else {\n      if (lower) {\n        this.lineFrom(lower);\n        this.lineIsHanging = lower.staffPosition < upper.staffPosition;\n        if (lower.liquescent & LiquescentType.Small) {\n          glyph = GlyphCode.BeginningDesLiquescent;\n        }\n      }\n      this.noteAt(upper, glyph);\n    }\n    return this;\n  }\n\n  withClivisLower(lower) {\n    var lowerGlyph;\n    if (lower.liquescent & LiquescentType.Small) {\n      lowerGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (lower.liquescent === LiquescentType.Ascending)\n      lowerGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (lower.liquescent === LiquescentType.Descending)\n      lowerGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    return this.noteAt(lower, lowerGlyph);\n  }\n\n  withClivis(upper, lower) {\n    this.withClivisUpper(upper, lower);\n    this.withClivisLower(lower);\n\n    // make sure we don't have lines connected to the clivis\n    this.lastNote = null;\n\n    return this;\n  }\n\n  // lays out a sequence of notes that are inclinata (e.g., climacus, pes subpunctis)\n  withInclinata(notes) {\n    var staffPosition = notes[0].staffPosition,\n      prevStaffPosition = notes[0].staffPosition;\n\n    // it is important to advance by the width of the inclinatum glyph itself\n    // rather than by individual note widths, so that any liquescents are spaced\n    // the same as non-liquscents\n    var advanceWidth =\n      Glyphs.PunctumInclinatum.bounds.width * this.ctxt.glyphScaling;\n\n    // now add all the punctum inclinatum\n    for (var i = 0; i < notes.length; i++, prevStaffPosition = staffPosition) {\n      var note = notes[i];\n\n      if (note.liquescent & LiquescentType.Small)\n        note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatumLiquescent);\n      else if (note.liquescent & LiquescentType.Large)\n        // fixme: is the large inclinatum liquescent the same as the apostropha?\n        note.setGlyph(this.ctxt, GlyphCode.Stropha);\n      // fixme: some climaci in the new chant books end with a punctum quadratum\n      // (see, for example, the antiphon \"Sancta Maria\" for October 7).\n      else note.setGlyph(this.ctxt, GlyphCode.PunctumInclinatum);\n\n      staffPosition = note.staffPosition;\n\n      var multiple = Math.abs(prevStaffPosition - staffPosition);\n      switch (multiple) {\n        case 0:\n          multiple = 1.1;\n          break;\n        default:\n          multiple *= 2 / 3;\n          break;\n      }\n\n      if (i > 0) this.x += advanceWidth * multiple;\n\n      note.bounds.x = this.x;\n\n      this.neume.addVisualizer(note);\n    }\n\n    return this;\n  }\n\n  withPorrectusSwash(start, end) {\n    var needsLine =\n      this.lastNote !== null &&\n      (this.lineIsHanging ||\n        (this.lastNote.glyphVisualizer &&\n          this.lastNote.glyphVisualizer.align === \"right\") ||\n        Math.abs(this.lastNote.staffPosition - start.staffPosition) > 1);\n\n    if (needsLine) {\n      var line = new NeumeLineVisualizer(\n        this.ctxt,\n        this.lastNote,\n        start,\n        this.lineIsHanging\n      );\n      this.x = Math.max(this.minX, this.x - line.bounds.width);\n      line.bounds.x = this.x;\n      this.neume.addVisualizer(line);\n    }\n\n    var glyph;\n\n    switch (start.staffPosition - end.staffPosition) {\n      case 1:\n        glyph = GlyphCode.Porrectus1;\n        break;\n      case 2:\n        glyph = GlyphCode.Porrectus2;\n        break;\n      case 3:\n        glyph = GlyphCode.Porrectus3;\n        break;\n      case 4:\n        glyph = GlyphCode.Porrectus4;\n        break;\n      default:\n        // fixme: should we generate an error here?\n        glyph = GlyphCode.None;\n        break;\n    }\n\n    start.setGlyph(this.ctxt, glyph);\n    start.bounds.x = this.x;\n\n    // the second glyph does not draw anything, but it still has logical importance for the editing\n    // environment...it can respond to changes which will then change the swash glyph of the first.\n    end.setGlyph(this.ctxt, GlyphCode.None);\n\n    this.x = start.bounds.right();\n    end.bounds.x = this.x - end.bounds.width;\n\n    this.neume.addVisualizer(start);\n    this.neume.addVisualizer(end);\n\n    this.lastNote = end;\n    this.lineIsHanging = false;\n\n    return this;\n  }\n}\n\n/*\n * Neumes base class\n */\nexport class Neume extends ChantNotationElement {\n  constructor(notes = []) {\n    super();\n\n    this.isNeume = true; // poor man's reflection\n    this.notes = notes;\n\n    for (var i = 0; i < notes.length; i++) notes[i].neume = this;\n  }\n\n  addNote(note) {\n    note.neume = this;\n    this.notes.push(note);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n  }\n\n  finishLayout(ctxt) {\n    this.ledgerLines = this.requiresLedgerLine(ctxt);\n\n    // allow subclasses an opportunity to position their own markings...\n    this.positionMarkings();\n\n    // layout the markings of the notes\n    for (var i = 0; i < this.notes.length; i++) {\n      var note = this.notes[i];\n      var j;\n\n      for (j = 0; j < note.episemata.length; j++) {\n        note.episemata[j].performLayout(ctxt);\n        this.addVisualizer(note.episemata[j]);\n      }\n\n      for (j = 0; j < note.morae.length; j++) {\n        note.morae[j].performLayout(ctxt);\n        this.addVisualizer(note.morae[j]);\n      }\n\n      // if the note has an ictus, then add it here\n      if (note.ictus) {\n        note.ictus.performLayout(ctxt);\n        this.addVisualizer(note.ictus);\n      }\n\n      if (note.accent) {\n        note.accent.performLayout(ctxt);\n        this.addVisualizer(note.accent);\n      }\n\n      if (note.choralSign) {\n        note.choralSign.performLayout(ctxt);\n        this.addVisualizer(note.choralSign);\n      }\n\n      // braces are handled by the chant line, so we don't mess with them here\n      // this is because brace size depends on chant line logic (neume spacing,\n      // justification, etc.) so they are considered chant line level\n      // markings rather than note level markings\n    }\n\n    this.origin.x = this.notes[0].origin.x;\n    this.origin.y = this.notes[0].origin.y;\n\n    super.finishLayout(ctxt);\n  }\n\n  requiresLedgerLine(ctxt) {\n    var firstAbove = false,\n      needsAbove = false,\n      firstBelow = false,\n      needsBelow = false,\n      // isPorrectus = false,\n      result = [],\n      ledgerLinePositionAbove = ctxt.staffLineCount * 2 + 1;\n\n    if (!this.notes) return result;\n\n    for (var i = 0; i < this.notes.length; ++i) {\n      var note = this.notes[i];\n      var staffPosition = note.staffPosition;\n      if (staffPosition >= ledgerLinePositionAbove - 1) {\n        needsAbove = needsAbove || staffPosition >= ledgerLinePositionAbove;\n        if (firstAbove === false) firstAbove = Math.max(0, i - 1);\n        if (staffPosition >= ledgerLinePositionAbove) continue;\n      } else if (staffPosition <= 0) {\n        needsBelow = needsBelow || staffPosition <= -1;\n        if (firstBelow === false) firstBelow = Math.max(0, i - 1);\n        if (staffPosition <= -1) continue;\n      }\n      if (needsAbove || needsBelow) {\n        var endI = i; // Math.abs(staffPosition) >= 4? i : i - 1;\n        result.push({\n          element: this.notes[firstAbove || firstBelow || 0],\n          endElem: this.notes[endI],\n          staffPosition: needsAbove ? ledgerLinePositionAbove : -1\n        });\n        firstAbove = firstBelow = needsAbove = needsBelow = false;\n      }\n      // isPorrectus = /^Porrectus\\d$/.test(note.glyphVisualizer.glyphCode);\n    }\n    if (needsAbove || needsBelow) {\n      result.push({\n        element: this.notes[firstAbove || firstBelow || 0],\n        endElem: this.notes[this.notes.length - 1],\n        staffPosition: needsAbove ? ledgerLinePositionAbove : -1\n      });\n    }\n    return result;\n  }\n\n  resetDependencies() {}\n\n  build(ctxt) {\n    return new NeumeBuilder(ctxt, this);\n  }\n  positionEpisemata(note, position) {\n    var i;\n    for (i = 0; i < note.episemata.length; i++)\n      if (note.episemata[i].positionHint === MarkingPositionHint.Default)\n        note.episemata[i].positionHint = position;\n    if (note.choralSign) note.choralSign.positionHint = position;\n    return note.episemata.length;\n  }\n  positionEpisemataAbove(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Above);\n  }\n  positionEpisemataBelow(note) {\n    return this.positionEpisemata(note, MarkingPositionHint.Below);\n  }\n\n  positionPodatusEpisemata(bottomNote, topNote) {\n    // 1. episema on lower note by default be below, upper note above\n    this.positionEpisemataBelow(bottomNote);\n    this.positionEpisemataAbove(topNote);\n    if (topNote.ictus) {\n      topNote.ictus.positionHint = MarkingPositionHint.Above;\n    }\n  }\n  positionInclinataMorae(notes) {\n    notes = notes.slice(-2);\n    if (notes.length < 2 || notes[1].staffPosition > notes[0].staffPosition)\n      return;\n    var bottomNote = notes[1],\n      topNote = notes[0],\n      mark;\n\n    // The mora on the second (lower) note should be below the punctum,\n    // if the punctum is on a line and the previous punctum is in the space above.\n    if (\n      Math.abs(bottomNote.staffPosition % 2) === 1 &&\n      topNote.staffPosition - bottomNote.staffPosition === 1 &&\n      bottomNote.morae.length > 0\n    ) {\n      mark = bottomNote.morae.slice(-1)[0];\n      if (mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionPodatusMorae(bottomNote, topNote) {\n    var mark;\n\n    // The mora on the first (lower) note should be below it,\n    // if it is on a line.\n    if (Math.abs(bottomNote.staffPosition % 2) === 1) {\n      if (bottomNote.morae.length === 1) {\n        mark = bottomNote.morae[0];\n      } else if (topNote.morae.length > 1) {\n        mark = topNote.morae[0];\n      }\n      if (mark && mark.positionHint === MarkingPositionHint.Default)\n        mark.positionHint = MarkingPositionHint.Below;\n    }\n\n    // if there is a mora on the first note but not on the second, and the neume\n    // continues with a punctum higher than the second note, we need to adjust\n    // the space after the neume so that it follows immediately with no gap\n    if (bottomNote.morae.length > 0 && topNote.morae.length === 0) {\n      bottomNote.morae[0].ignoreBounds = true;\n    }\n  }\n  // for any subclasses that begin with a podatus, they can call this from their own positionMarkings()\n  positionPodatusMarkings(bottomNote, topNote) {\n    this.positionPodatusEpisemata(bottomNote, topNote);\n    this.positionPodatusMorae(bottomNote, topNote);\n  }\n\n  // just like a clivis, but the first note of the three also works like the second note of the clivis:\n  // episema below, unless the middle note also has an episema\n  positionTorculusMarkings(firstNote, secondNote, thirdNote) {\n    var hasTopEpisema = this.positionClivisMarkings(secondNote, thirdNote);\n    hasTopEpisema =\n      this.positionEpisemata(\n        firstNote,\n        hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n      ) && hasTopEpisema;\n    return hasTopEpisema;\n  }\n  positionClivisMorae(firstNote, secondNote) {\n    // 1. second note of a clivis that ends on a line and goes down one step has its mora below:\n    var morae = firstNote.morae.concat(secondNote.morae);\n    if (\n      secondNote.morae.length &&\n      firstNote.staffPosition - secondNote.staffPosition === 1 &&\n      Math.abs(secondNote.staffPosition % 2) === 1\n    ) {\n      morae.slice(-1)[0].positionHint = MarkingPositionHint.Below;\n    }\n  }\n  positionClivisEpisemata(firstNote, secondNote) {\n    var hasTopEpisema = this.positionEpisemataAbove(firstNote);\n    this.positionEpisemata(\n      secondNote,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n    return hasTopEpisema;\n  }\n  positionClivisMarkings(firstNote, secondNote) {\n    this.positionClivisMorae(firstNote, secondNote);\n    return this.positionClivisEpisemata(firstNote, secondNote);\n  }\n\n  positionPorrectusMarkings(firstNote, secondNote, thirdNote) {\n    // episemata on first and second note work like a clivis,\n    // the second note should have its episema below, unless the first note also has an episema.\n    this.positionClivisEpisemata(firstNote, secondNote);\n    this.positionPodatusMarkings(secondNote, thirdNote);\n  }\n\n  positionPorrectusFlexusMarkings(first, second, third, fourth) {\n    var hasTopEpisema = this.positionEpisemataAbove(first);\n    hasTopEpisema = this.positionClivisMarkings(third, fourth) || hasTopEpisema;\n    this.positionEpisemata(\n      second,\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  // subclasses can override this in order to correctly place markings in a neume specific way\n  positionMarkings() {}\n}\n\n/*\n * Apostropha\n */\nexport class Apostropha extends Neume {\n  positionMarkings() {\n    var positionHint = MarkingPositionHint.Above;\n\n    // logic here is this: if first episema is default position, place it above.\n    // then place the second one (if there is one) opposite of the first.\n    for (var i = 0; i < this.notes[0].episemata.length; i++) {\n      if (\n        this.notes[0].episemata[i].positionHint === MarkingPositionHint.Default\n      )\n        this.notes[0].episemata[i].positionHint = positionHint;\n      else positionHint = this.notes[0].episemata[i].positionHint;\n\n      // now place the next one in the opposite position\n      positionHint =\n        positionHint === MarkingPositionHint.Above\n          ? MarkingPositionHint.Below\n          : MarkingPositionHint.Above;\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).noteAt(\n      this.notes[0],\n      Apostropha.getNoteGlyphCode(this.notes[0])\n    );\n\n    this.finishLayout(ctxt);\n  }\n\n  static getNoteGlyphCode(note) {\n    if (note.shape === NoteShape.Stropha) return GlyphCode.Stropha;\n\n    if (note.liquescent & LiquescentType.Ascending)\n      return GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note.liquescent & LiquescentType.Descending)\n      return GlyphCode.PunctumQuadratumDesLiquescent;\n\n    if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n      return GlyphCode.PunctumCavum;\n\n    return GlyphCode.PunctumQuadratum;\n  }\n}\n\n/*\n * Bivirga\n *\n * For simplicity in implementation, Bivirga's have two notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Bivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Trivirga\n *\n * For simplicity in implementation, Trivirga's have three notes in the object\n * structure. These technically must be the same pitch though.\n */\nexport class Trivirga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .virgaAt(this.notes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Climacus\n */\nexport class Climacus extends Neume {\n  positionMarkings() {\n    for (var i = 0; i < this.notes.length; i++) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt)\n      .virgaAt(this.notes[0])\n      .advanceBy(ctxt.intraNeumeSpacing)\n      .withInclinata(this.notes.slice(1));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Clivis\n */\nexport class Clivis extends Neume {\n  positionMarkings() {\n    this.positionClivisMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var upper = this.notes[0];\n    var lower = this.notes[1];\n\n    this.build(ctxt).withClivis(upper, lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Ancus\n */\nexport class Ancus extends Neume {\n  positionMarkings() {\n    this.positionClivisMarkings(this.notes[0], this.notes[2]);\n    this.positionClivisMarkings(this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var upper = this.notes[0];\n    var middle = this.notes[1];\n    var lower = this.notes[2];\n\n    var builder = this.build(ctxt);\n    builder.withClivisUpper(upper, middle);\n    let middleGlyph = GlyphCode.PunctumQuadratum;\n    if (lower.liquescent & LiquescentType.Small) {\n      middleGlyph = GlyphCode.BeginningDesLiquescent;\n    }\n    if (upper.staffPosition - middle.staffPosition > 1) {\n      builder.withClivisUpper(middle, upper, middleGlyph);\n    } else {\n      builder.withClivisUpper(middle, null, middleGlyph);\n    }\n    builder.withClivisLower(lower);\n    builder.lastNote = null;\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Distropha\n *\n * For simplicity in implementation, Distropha's have two notes in the object\n * structure. These technically must be the same pitch though (like Bivirga).\n */\nexport class Distropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance = ctxt.intraNeumeSpacing;\n    glyphCodes.slice(0, 2).forEach((glyphCode) => {\n      if (glyphCode === GlyphCode.Stropha)\n        glyphAdvance -= ctxt.intraNeumeSpacing / 4;\n    });\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Oriscus\n */\nexport class Oriscus extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // determine the glyph to use\n    var note = this.notes[0];\n    var glyph;\n\n    if (note.liquescent !== LiquescentType.None) {\n      glyph = GlyphCode.OriscusLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Ascending)\n        glyph = GlyphCode.OriscusAsc;\n      else if (note.shapeModifiers & NoteShapeModifiers.Descending)\n        glyph = GlyphCode.OriscusDes;\n      else {\n        // by default we take the descending form, unless we can figure out by a lookahead here\n        glyph = GlyphCode.OriscusDes;\n\n        // try to find a neume following this one\n        var neume = ctxt.findNextNeume();\n\n        if (neume) {\n          var nextNoteStaffPosition = ctxt.activeClef.pitchToStaffPosition(\n            neume.notes[0].pitch\n          );\n\n          if (nextNoteStaffPosition > note.staffPosition)\n            glyph = GlyphCode.OriscusAsc;\n        }\n      }\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n\n  resetDependencies() {\n    // a single oriscus tries to automatically use the right direction\n    // based on the following neumes. if we don't have a manually designated\n    // direction, then we reset our layout so that we can try to guess it\n    // at next layout phase.\n    if (\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Ascending ||\n      this.notes[0].shapeModifiers & NoteShapeModifiers.Descending\n    )\n      return;\n\n    this.needsLayout = true;\n  }\n}\n\n/*\n * PesQuassus\n */\nexport class PesQuassus extends Neume {\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var lower = this.notes[0];\n    var upper = this.notes[1];\n\n    var lowerGlyph;\n\n    var lowerStaffPos = lower.staffPosition;\n    var upperStaffPos = upper.staffPosition;\n\n    if (lower.shape === NoteShape.Oriscus) lowerGlyph = GlyphCode.OriscusAsc;\n    else lowerGlyph = GlyphCode.PunctumQuadratum;\n\n    var builder = this.build(ctxt).noteAt(lower, lowerGlyph);\n\n    if (upperStaffPos - lowerStaffPos === 1)\n      // use a virga glyph in this case\n      builder.virgaAt(upper);\n    else if (upper.liquescent === LiquescentType.LargeDescending)\n      builder\n        .noteAt(upper, GlyphCode.PunctumQuadratumDesLiquescent)\n        .withLineEndingAt(lower);\n    else\n      builder.noteAt(upper, GlyphCode.PunctumQuadratum).withLineEndingAt(lower);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PesSubpunctis\n */\nexport class PesSubpunctis extends Neume {\n  positionMarkings() {\n    this.positionPodatusEpisemata(this.notes[0], this.notes[1]);\n    for (var i = 2; i < this.notes.length; ++i) {\n      this.positionEpisemataAbove(this.notes[i]);\n    }\n    this.positionInclinataMorae(this.notes.slice(1));\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    // podatus followed by inclinata\n    this.build(ctxt)\n      .withPodatus(this.notes[0], this.notes[1])\n      .advanceBy(ctxt.intraNeumeSpacing * 0.68)\n      .withInclinata(this.notes.slice(2));\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Podatus\n *\n * This podatus class handles a few neume types actually, depending on the note\n * data: Podatus (including various liquescent types on the upper note),\n * Podatus initio debilis, and Quilisma-Pes\n */\nexport class Podatus extends Neume {\n  positionMarkings() {\n    this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withPodatus(this.notes[0], this.notes[1]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Porrectus\n */\nexport class Porrectus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var thirdGlyph;\n\n    if (third.liquescent & LiquescentType.Small)\n      thirdGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else thirdGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * PorrectusFlexus\n */\nexport class PorrectusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[0],\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var thirdGlyph = GlyphCode.PunctumQuadratum,\n      fourthGlyph;\n\n    if (fourth.liquescent & LiquescentType.Small) {\n      thirdGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fourthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fourth.liquescent & LiquescentType.Ascending)\n      fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fourth.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .lineFrom(second)\n      .withPorrectusSwash(first, second)\n      .noteAt(third, thirdGlyph)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n// this is some type of pseudo nume right? there is no such thing as a neume\n// of puncta inclinata, but this will be part of other composite neumes.\nexport class PunctaInclinata extends Neume {\n  positionMarkings() {\n    this.positionInclinataMorae(this.notes);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).withInclinata(this.notes);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Punctum\n */\nexport class Punctum extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note = this.notes[0];\n    var glyph = GlyphCode.PunctumQuadratum;\n\n    // determine the glyph to use\n    if (note.liquescent !== LiquescentType.None) {\n      if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatumLiquescent;\n      else if (note.shape === NoteShape.Oriscus)\n        glyph = GlyphCode.OriscusLiquescent;\n      else if (note.liquescent & LiquescentType.Ascending)\n        glyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (note.liquescent & LiquescentType.Descending)\n        glyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      else glyph = GlyphCode.PunctumQuadratumLiquescent;\n    } else {\n      if (note.shapeModifiers & NoteShapeModifiers.Cavum)\n        glyph = GlyphCode.PunctumCavum;\n      else if (note.shape === NoteShape.Inclinatum)\n        glyph = GlyphCode.PunctumInclinatum;\n      else if (note.shape === NoteShape.Quilisma) glyph = GlyphCode.Quilisma;\n      else glyph = GlyphCode.PunctumQuadratum;\n    }\n\n    this.build(ctxt).noteAt(note, glyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus\n */\nexport class Salicus extends Neume {\n  positionMarkings() {\n    // by default place episema below\n    // fixme: is this correct?\n    for (var i = 0; i < this.notes.length; i++)\n      this.positionEpisemataBelow(this.notes[i]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms\n    if (third.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.TerminatingAscLiquescent);\n    else if (third.liquescent === LiquescentType.Ascending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (third.liquescent === LiquescentType.Descending)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.virgaAt(third);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Salicus Flexus\n */\nexport class SalicusFlexus extends Neume {\n  positionMarkings() {\n    var hasTopEpisema = this.positionTorculusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3]\n    );\n    this.positionEpisemata(\n      this.notes[0],\n      hasTopEpisema ? MarkingPositionHint.Above : MarkingPositionHint.Below\n    );\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var builder = this.build(ctxt).noteAt(first, GlyphCode.PunctumQuadratum);\n\n    // if the next note doesn't require a stem connector, then add a tad bit\n    // of spacing here\n    if (!(second.shapeModifiers & NoteShapeModifiers.Stemmed))\n      builder.advanceBy(ctxt.intraNeumeSpacing);\n\n    // second note is always an oriscus, which may or may not be stemmed\n    // to the first\n    builder.noteAt(second, GlyphCode.OriscusAsc);\n\n    // third note can be a punctum quadratum or various liquescent forms,\n    // ...based on note four though!\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(third, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(third, GlyphCode.PunctumQuadratum);\n\n    // finally, do the fourth note\n    if (fourth.liquescent & LiquescentType.Small)\n      builder.noteAt(fourth, GlyphCode.TerminatingDesLiquescent);\n    else if (fourth.liquescent & LiquescentType.Ascending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumAscLiquescent);\n    else if (fourth.liquescent & LiquescentType.Descending)\n      builder.noteAt(fourth, GlyphCode.PunctumQuadratumDesLiquescent);\n    else builder.noteAt(fourth, GlyphCode.PunctumQuadratum);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus\n */\nexport class Scandicus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionEpisemataAbove(this.notes[2]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n    }\n  }\n\n  // if the third note shape is a virga, then the scadicus is rendered\n  // as a podatus followed by a virga. Otherwise, it's rendered as a\n  // punctum followed by a podatus...\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt).withPodatus(first, second).virgaAt(third);\n    } else {\n      this.build(ctxt)\n        .noteAt(\n          first,\n          first.shape === NoteShape.Quilisma\n            ? GlyphCode.Quilisma\n            : GlyphCode.PunctumQuadratum\n        )\n        .withPodatus(second, third);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Scandicus Flexus\n */\nexport class ScandicusFlexus extends Neume {\n  positionMarkings() {\n    if (this.notes[2].shape === NoteShape.Virga) {\n      this.positionPodatusMarkings(this.notes[0], this.notes[1]);\n      this.positionClivisMarkings(this.notes[2], this.notes[3]);\n    } else {\n      this.positionEpisemataBelow(this.notes[0]);\n      this.positionPodatusMarkings(this.notes[1], this.notes[2]);\n      this.positionEpisemataAbove(this.notes[3]);\n    }\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    if (third.shape === NoteShape.Virga) {\n      this.build(ctxt)\n        .withPodatus(first, second)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .withClivis(third, fourth);\n    } else {\n      var fourthGlyph = GlyphCode.PunctumQuadratum;\n\n      if (fourth.liquescent & LiquescentType.Ascending)\n        fourthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n      else if (fourth.liquescent & LiquescentType.Descending)\n        fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n\n      this.build(ctxt)\n        .noteAt(first, GlyphCode.PunctumQuadratum)\n        .withPodatus(second, third)\n        .advanceBy(ctxt.intraNeumeSpacing)\n        .noteAt(fourth, fourthGlyph);\n    }\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Torculus\n */\nexport class Torculus extends Neume {\n  positionMarkings() {\n    this.positionTorculusMarkings(this.notes[0], this.notes[1], this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var note1 = this.notes[0];\n    var note2 = this.notes[1];\n    var note3 = this.notes[2];\n\n    var glyph1, glyph3;\n\n    if (note1.liquescent === LiquescentType.InitioDebilis)\n      glyph1 = GlyphCode.TerminatingDesLiquescent;\n    else if (note1.shape === NoteShape.Quilisma) glyph1 = GlyphCode.Quilisma;\n    else glyph1 = GlyphCode.PunctumQuadratum;\n\n    if (note3.liquescent & LiquescentType.Small)\n      glyph3 = GlyphCode.TerminatingDesLiquescent;\n    else if (note3.liquescent & LiquescentType.Ascending)\n      glyph3 = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (note3.liquescent & LiquescentType.Descending)\n      glyph3 = GlyphCode.PunctumQuadratumDesLiquescent;\n    else glyph3 = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(note1, glyph1)\n      .noteAt(note2, GlyphCode.PunctumQuadratum)\n      .noteAt(note3, glyph3);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinus\n */\nexport class TorculusResupinus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusMarkings(this.notes[1], this.notes[2], this.notes[3]);\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n\n    var firstGlyph, fourthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fourth.liquescent & LiquescentType.Small)\n      fourthGlyph = GlyphCode.TerminatingAscLiquescent;\n    else if (third.liquescent & LiquescentType.Descending)\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fourthGlyph = GlyphCode.PodatusUpper;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * TorculusResupinusFlexus\n */\nexport class TorculusResupinusFlexus extends Neume {\n  positionMarkings() {\n    this.positionPorrectusFlexusMarkings(\n      this.notes[1],\n      this.notes[2],\n      this.notes[3],\n      this.notes[4]\n    );\n    this.positionClivisEpisemata(this.notes[1], this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    var first = this.notes[0];\n    var second = this.notes[1];\n    var third = this.notes[2];\n    var fourth = this.notes[3];\n    var fifth = this.notes[4];\n\n    var firstGlyph,\n      fourthGlyph = GlyphCode.PunctumQuadratum,\n      fifthGlyph;\n\n    if (first.liquescent === LiquescentType.InitioDebilis) {\n      firstGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (first.shape === NoteShape.Quilisma)\n      firstGlyph = GlyphCode.Quilisma;\n    else firstGlyph = GlyphCode.PunctumQuadratum;\n\n    if (fifth.liquescent & LiquescentType.Small) {\n      fourthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n      fifthGlyph = GlyphCode.TerminatingDesLiquescent;\n    } else if (fifth.liquescent & LiquescentType.Ascending)\n      fifthGlyph = GlyphCode.PunctumQuadratumAscLiquescent;\n    else if (fifth.liquescent & LiquescentType.Descending)\n      fifthGlyph = GlyphCode.PunctumQuadratumDesLiquescent;\n    else fifthGlyph = GlyphCode.PunctumQuadratum;\n\n    this.build(ctxt)\n      .noteAt(first, firstGlyph)\n      .withPorrectusSwash(second, third)\n      .noteAt(fourth, fourthGlyph)\n      .noteAt(fifth, fifthGlyph);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Tristropha\n *\n * For simplicity in implementation, Tristropha's have three notes in the object\n * structure. These technically must be the same pitch though (like the\n * Distropha and Bivirga).\n */\nexport class Tristropha extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n    this.positionEpisemataAbove(this.notes[1]);\n    this.positionEpisemataAbove(this.notes[2]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n    let glyphCodes = this.notes.map((note) =>\n      Apostropha.getNoteGlyphCode(note)\n    );\n    let glyphAdvance =\n      glyphCodes[0] === GlyphCode.Stropha\n        ? ctxt.intraNeumeSpacing / 2\n        : ctxt.intraNeumeSpacing;\n\n    this.build(ctxt)\n      .noteAt(this.notes[0], glyphCodes[0])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[1], glyphCodes[1])\n      .advanceBy(glyphAdvance)\n      .noteAt(this.notes[2], glyphCodes[2]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n/*\n * Virga\n */\nexport class Virga extends Neume {\n  positionMarkings() {\n    this.positionEpisemataAbove(this.notes[0]);\n  }\n\n  performLayout(ctxt) {\n    super.performLayout(ctxt);\n\n    this.build(ctxt).virgaAt(this.notes[0]);\n\n    this.finishLayout(ctxt);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Chant.Neumes.js","//\n// Author(s):\n// Benjamin Bloomfield <benjamin@sourceandsummit.com>\n//\n// Copyright (c) 2019\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\nimport { Rect } from \"./Exsurge.Core.js\";\nimport {\n  ChantLayoutElement, QuickSvg, Subtitle, Supertitle, TextLeftRight, Title\n} from \"./Exsurge.Drawing.js\";\n\nexport class Titles extends ChantLayoutElement {\n  constructor(\n    ctxt,\n    score,\n    { supertitle, title, subtitle, textLeft, textRight } = {}\n  ) {\n    super();\n    this.score = score;\n    this.setSupertitle(ctxt, supertitle);\n    this.setTitle(ctxt, title);\n    this.setSubtitle(ctxt, subtitle);\n    this.setTextLeft(ctxt, textLeft);\n    this.setTextRight(ctxt, textRight);\n  }\n\n  setBoundsX(ctxt, elementName, width) {\n    let element = this[elementName];\n    switch (ctxt.textStyles[elementName].alignment) {\n      case \"left\":\n        element.textAnchor = \"start\";\n        element.bounds.x = 0;\n        break;\n      case \"right\":\n        element.textAnchor = \"end\";\n        element.bounds.x = width;\n        break;\n      case \"center\":\n      default:\n        element.textAnchor = \"middle\";\n        element.bounds.x = width / 2;\n    }\n  }\n\n  /**\n   * Lays out the titles, and returns their total height\n   * @param  {ChantContext} ctxt\n   * @return {number}      the tottal height of titles laid out\n   */\n  layoutTitles(ctxt, width) {\n    this.bounds = new Rect(0, 0, 0, 0);\n    let y = 0;\n    if (this.supertitle) {\n      this.supertitle.recalculateMetrics(ctxt);\n      this.supertitle.setMaxWidth(ctxt, width);\n\n      this.setBoundsX(ctxt, \"supertitle\", width);\n      this.supertitle.bounds.y = y;\n      this.bounds.union(this.supertitle.bounds);\n      this.supertitle.bounds.y += this.supertitle.origin.y;\n      y += this.supertitle.bounds.height + this.supertitle.padding(ctxt);\n    }\n    if (this.title) {\n      if (y) y += this.title.padding(ctxt);\n      this.title.recalculateMetrics(ctxt);\n      this.title.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"title\", width);\n      this.title.bounds.y = y;\n      this.bounds.union(this.title.bounds);\n      this.title.bounds.y += this.title.origin.y;\n      y += this.title.bounds.height + this.title.padding(ctxt);\n    }\n    if (this.subtitle) {\n      if (y) y += this.subtitle.padding(ctxt);\n      this.subtitle.recalculateMetrics(ctxt);\n      this.subtitle.setMaxWidth(ctxt, width);\n      this.setBoundsX(ctxt, \"subtitle\", width);\n      this.subtitle.bounds.y = y;\n      this.bounds.union(this.subtitle.bounds);\n      this.subtitle.bounds.y += this.subtitle.origin.y;\n      y += this.subtitle.bounds.height + this.subtitle.padding(ctxt);\n    }\n    let finalY = y,\n      textLeft = this.score.overrideTextLeft || this.textLeft;\n    if (textLeft) {\n      textLeft.recalculateMetrics(ctxt);\n      textLeft.bounds.y = y;\n      this.bounds.union(textLeft.bounds);\n      textLeft.bounds.y += textLeft.origin.y;\n      finalY = y + textLeft.bounds.height + textLeft.padding(ctxt);\n    }\n    if (this.textRight) {\n      this.textRight.recalculateMetrics(ctxt);\n      this.textRight.bounds.x = width;\n      this.textRight.bounds.y = y;\n      this.bounds.union(this.textRight.bounds);\n      this.textRight.bounds.y += this.textRight.origin.y;\n      finalY = Math.max(\n        finalY,\n        y + this.textRight.bounds.height + this.textRight.padding(ctxt)\n      );\n    }\n    return finalY;\n  }\n\n  setSupertitle(ctxt, supertitle) {\n    this.supertitle = supertitle ? new Supertitle(ctxt, supertitle) : null;\n  }\n  setTitle(ctxt, title) {\n    this.title = title ? new Title(ctxt, title) : null;\n  }\n  setSubtitle(ctxt, subtitle) {\n    this.subtitle = subtitle ? new Subtitle(ctxt, subtitle) : null;\n  }\n  setTextLeft(ctxt, textLeft) {\n    this.textLeft = textLeft\n      ? new TextLeftRight(ctxt, textLeft, \"textLeft\")\n      : null;\n  }\n  setTextRight(ctxt, textRight) {\n    this.textRight = textRight\n      ? new TextLeftRight(ctxt, textRight, \"textRight\")\n      : null;\n  }\n\n  hasSupertitle(ctxt, supertitle) {\n    return !!this.supertitle;\n  }\n  hasTitle(ctxt, title) {\n    return !!this.title;\n  }\n  hasSubtitle(ctxt, subtitle) {\n    return !!this.subtitle;\n  }\n  hasTextLeft(ctxt, textLeft) {\n    return !!this.textLeft;\n  }\n  hasTextRight(ctxt, textRight) {\n    return !!this.textRight;\n  }\n\n  draw(ctxt, scale = 1) {\n    var canvasCtxt = ctxt.canvasCtxt;\n    canvasCtxt.translate(this.bounds.x, this.bounds.y);\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) el.draw(ctxt, scale);\n    }\n\n    canvasCtxt.translate(-this.bounds.x, -this.bounds.y);\n  }\n\n  getInnerNodes(ctxt, functionName = \"createSvgNode\") {\n    var nodes = [];\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) nodes.push(el[functionName](ctxt));\n    }\n    return nodes;\n  }\n\n  createSvgNode(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgNode\");\n\n    var node = QuickSvg.createNode(\"g\", { class: \"Titles\" }, nodes);\n\n    node.source = this;\n    this.svg = node;\n\n    return node;\n  }\n\n  createSvgTree(ctxt) {\n    var nodes = this.getInnerNodes(ctxt, \"createSvgTree\");\n\n    return QuickSvg.createSvgTree(\n      \"g\",\n      { class: \"Titles\", source: this },\n      ...nodes\n    );\n  }\n\n  createSvgFragment(ctxt) {\n    var fragment = \"\";\n\n    for (let el of [\n      this.supertitle,\n      this.title,\n      this.subtitle,\n      this.score.overrideTextLeft || this.textLeft,\n      this.textRight\n    ]) {\n      if (el) fragment += el.createSvgFragment(ctxt);\n    }\n\n    fragment = QuickSvg.createFragment(\"g\", { class: \"Titles\" }, fragment);\n    return fragment;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Exsurge.Titles.js"],"sourceRoot":""}